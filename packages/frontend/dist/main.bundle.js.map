{"version":3,"file":"main.bundle.js","sources":["webpack://frontend/../../node_modules/effect/dist/esm/Equivalence.js","webpack://frontend/../../node_modules/effect/dist/esm/Function.js","webpack://frontend/../../node_modules/effect/dist/esm/GlobalValue.js","webpack://frontend/../../node_modules/effect/dist/esm/Predicate.js","webpack://frontend/../../node_modules/effect/dist/esm/internal/errors.js","webpack://frontend/../../node_modules/effect/dist/esm/Utils.js","webpack://frontend/../../node_modules/effect/dist/esm/Hash.js","webpack://frontend/../../node_modules/effect/dist/esm/Equal.js","webpack://frontend/../../node_modules/effect/dist/esm/Inspectable.js","webpack://frontend/../../node_modules/effect/dist/esm/Pipeable.js","webpack://frontend/../../node_modules/effect/dist/esm/internal/effectable.js","webpack://frontend/../../node_modules/effect/dist/esm/internal/opCodes/effect.js","webpack://frontend/../../node_modules/effect/dist/esm/internal/option.js","webpack://frontend/../../node_modules/effect/dist/esm/internal/either.js","webpack://frontend/../../node_modules/effect/dist/esm/Option.js","webpack://frontend/../../node_modules/effect/dist/esm/Iterable.js","webpack://frontend/../../node_modules/effect/dist/esm/Order.js","webpack://frontend/../../node_modules/effect/dist/esm/Record.js","webpack://frontend/../../node_modules/effect/dist/esm/Array.js","webpack://frontend/../../node_modules/effect/dist/esm/internal/context.js","webpack://frontend/../../node_modules/effect/dist/esm/Context.js","webpack://frontend/../../node_modules/effect/dist/esm/internal/singleShotGen.js","webpack://frontend/../../node_modules/effect/dist/esm/Micro.js","webpack://frontend/../../node_modules/effect/dist/esm/Effectable.js","webpack://frontend/../../node_modules/effect/dist/esm/Either.js","webpack://frontend/../../node_modules/@uploadthing/shared/dist/index.js","webpack://frontend/../../node_modules/uploadthing/client/index.js","webpack://frontend/./src/index.js"],"sourcesContent":["/**\n * This module provides an implementation of the `Equivalence` type class, which defines a binary relation\n * that is reflexive, symmetric, and transitive. In other words, it defines a notion of equivalence between values of a certain type.\n * These properties are also known in mathematics as an \"equivalence relation\".\n *\n * @since 2.0.0\n */\nimport { dual } from \"./Function.js\";\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const make = isEquivalent => (self, that) => self === that || isEquivalent(self, that);\nconst isStrictEquivalent = (x, y) => x === y;\n/**\n * Return an `Equivalence` that uses strict equality (===) to compare values.\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const strict = () => isStrictEquivalent;\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const string = /*#__PURE__*/strict();\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const number = /*#__PURE__*/strict();\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const boolean = /*#__PURE__*/strict();\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const bigint = /*#__PURE__*/strict();\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const symbol = /*#__PURE__*/strict();\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combine = /*#__PURE__*/dual(2, (self, that) => make((x, y) => self(x, y) && that(x, y)));\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineMany = /*#__PURE__*/dual(2, (self, collection) => make((x, y) => {\n  if (!self(x, y)) {\n    return false;\n  }\n  for (const equivalence of collection) {\n    if (!equivalence(x, y)) {\n      return false;\n    }\n  }\n  return true;\n}));\nconst isAlwaysEquivalent = (_x, _y) => true;\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineAll = collection => combineMany(isAlwaysEquivalent, collection);\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapInput = /*#__PURE__*/dual(2, (self, f) => make((x, y) => self(f(x), f(y))));\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Date = /*#__PURE__*/mapInput(number, date => date.getTime());\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product = /*#__PURE__*/dual(2, (self, that) => make(([xa, xb], [ya, yb]) => self(xa, ya) && that(xb, yb)));\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = collection => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length);\n    let collectionLength = 0;\n    for (const equivalence of collection) {\n      if (collectionLength >= len) {\n        break;\n      }\n      if (!equivalence(x[collectionLength], y[collectionLength])) {\n        return false;\n      }\n      collectionLength++;\n    }\n    return true;\n  });\n};\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = (self, collection) => {\n  const equivalence = all(collection);\n  return make((x, y) => !self(x[0], y[0]) ? false : equivalence(x.slice(1), y.slice(1)));\n};\n/**\n * Similar to `Promise.all` but operates on `Equivalence`s.\n *\n * ```\n * [Equivalence<A>, Equivalence<B>, ...] -> Equivalence<[A, B, ...]>\n * ```\n *\n * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple\n * by applying each `Equivalence` to the corresponding element of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const tuple = (...elements) => all(elements);\n/**\n * Creates a new `Equivalence` for an array of values based on a given `Equivalence` for the elements of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const array = item => make((self, that) => {\n  if (self.length !== that.length) {\n    return false;\n  }\n  for (let i = 0; i < self.length; i++) {\n    const isEq = item(self[i], that[i]);\n    if (!isEq) {\n      return false;\n    }\n  }\n  return true;\n});\n/**\n * Given a struct of `Equivalence`s returns a new `Equivalence` that compares values of a struct\n * by applying each `Equivalence` to the corresponding property of the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const struct = fields => {\n  const keys = Object.keys(fields);\n  return make((self, that) => {\n    for (const key of keys) {\n      if (!fields[key](self[key], that[key])) {\n        return false;\n      }\n    }\n    return true;\n  });\n};\n//# sourceMappingURL=Equivalence.js.map","/**\n * Tests if a value is a `function`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isFunction = input => typeof input === \"function\";\n/**\n * Creates a function that can be used in a data-last (aka `pipe`able) or\n * data-first style.\n *\n * The first parameter to `dual` is either the arity of the uncurried function\n * or a predicate that determines if the function is being used in a data-first\n * or data-last style.\n *\n * Using the arity is the most common use case, but there are some cases where\n * you may want to use a predicate. For example, if you have a function that\n * takes an optional argument, you can use a predicate to determine if the\n * function is being used in a data-first or data-last style.\n *\n * @param arity - Either the arity of the uncurried function or a predicate\n *                which determines if the function is being used in a data-first\n *                or data-last style.\n * @param body - The definition of the uncurried function.\n *\n * @example\n * import { dual, pipe } from \"effect/Function\"\n *\n * // Exampe using arity to determine data-first or data-last style\n * const sum: {\n *   (that: number): (self: number) => number\n *   (self: number, that: number): number\n * } = dual(2, (self: number, that: number): number => self + that)\n *\n * assert.deepStrictEqual(sum(2, 3), 5)\n * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n *\n * // Example using a predicate to determine data-first or data-last style\n * const sum2: {\n *   (that: number): (self: number) => number\n *   (self: number, that: number): number\n * } = dual((args) => args.length === 1, (self: number, that: number): number => self + that)\n *\n * assert.deepStrictEqual(sum(2, 3), 5)\n * assert.deepStrictEqual(pipe(2, sum(3)), 5)\n *\n * @since 2.0.0\n */\nexport const dual = function (arity, body) {\n  if (typeof arity === \"function\") {\n    return function () {\n      if (arity(arguments)) {\n        // @ts-expect-error\n        return body.apply(this, arguments);\n      }\n      return self => body(self, ...arguments);\n    };\n  }\n  switch (arity) {\n    case 0:\n    case 1:\n      throw new RangeError(`Invalid arity ${arity}`);\n    case 2:\n      return function (a, b) {\n        if (arguments.length >= 2) {\n          return body(a, b);\n        }\n        return function (self) {\n          return body(self, a);\n        };\n      };\n    case 3:\n      return function (a, b, c) {\n        if (arguments.length >= 3) {\n          return body(a, b, c);\n        }\n        return function (self) {\n          return body(self, a, b);\n        };\n      };\n    case 4:\n      return function (a, b, c, d) {\n        if (arguments.length >= 4) {\n          return body(a, b, c, d);\n        }\n        return function (self) {\n          return body(self, a, b, c);\n        };\n      };\n    case 5:\n      return function (a, b, c, d, e) {\n        if (arguments.length >= 5) {\n          return body(a, b, c, d, e);\n        }\n        return function (self) {\n          return body(self, a, b, c, d);\n        };\n      };\n    default:\n      return function () {\n        if (arguments.length >= arity) {\n          // @ts-expect-error\n          return body.apply(this, arguments);\n        }\n        const args = arguments;\n        return function (self) {\n          return body(self, ...args);\n        };\n      };\n  }\n};\n/**\n * Apply a function to a given value.\n *\n * @param a - The value that the function will be applied to.\n * @param self - The function to be applied to a value.\n *\n * @example\n * import { pipe, apply } from \"effect/Function\"\n * import { length } from \"effect/String\"\n *\n * assert.deepStrictEqual(pipe(length, apply(\"hello\")), 5)\n *\n * @since 2.0.0\n */\nexport const apply = a => self => self(a);\n/**\n * The identity function, i.e. A function that returns its input argument.\n *\n * @param a - The input argument.\n *\n * @example\n * import { identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(identity(5), 5)\n *\n * @since 2.0.0\n */\nexport const identity = a => a;\n/**\n * A function that ensures that the type of an expression matches some type,\n * without changing the resulting type of that expression.\n *\n * @example\n * import { satisfies } from \"effect/Function\"\n *\n * const test1 = satisfies<number>()(5 as const)\n *     //^? const test: 5\n *     // @ts-expect-error\n * const test2 = satisfies<string>()(5)\n *     //^? Argument of type 'number' is not assignable to parameter of type 'string'\n *\n * assert.deepStrictEqual(satisfies<number>()(5), 5)\n *\n * @since 2.0.0\n */\nexport const satisfies = () => b => b;\n/**\n * Casts the result to the specified type.\n *\n * @param a - The value to be casted to the target type.\n *\n * @example\n * import { unsafeCoerce, identity } from \"effect/Function\"\n *\n * assert.deepStrictEqual(unsafeCoerce, identity)\n *\n * @since 2.0.0\n */\nexport const unsafeCoerce = identity;\n/**\n * Creates a constant value that never changes.\n *\n * This is useful when you want to pass a value to a higher-order function (a function that takes another function as its argument)\n * and want that inner function to always use the same value, no matter how many times it is called.\n *\n * @param value - The constant value to be returned.\n *\n * @example\n * import { constant } from \"effect/Function\"\n *\n * const constNull = constant(null)\n *\n * assert.deepStrictEqual(constNull(), null)\n * assert.deepStrictEqual(constNull(), null)\n *\n * @since 2.0.0\n */\nexport const constant = value => () => value;\n/**\n * A thunk that returns always `true`.\n *\n * @example\n * import { constTrue } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constTrue(), true)\n *\n * @since 2.0.0\n */\nexport const constTrue = /*#__PURE__*/constant(true);\n/**\n * A thunk that returns always `false`.\n *\n * @example\n * import { constFalse } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constFalse(), false)\n *\n * @since 2.0.0\n */\nexport const constFalse = /*#__PURE__*/constant(false);\n/**\n * A thunk that returns always `null`.\n *\n * @example\n * import { constNull } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constNull(), null)\n *\n * @since 2.0.0\n */\nexport const constNull = /*#__PURE__*/constant(null);\n/**\n * A thunk that returns always `undefined`.\n *\n * @example\n * import { constUndefined } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constUndefined(), undefined)\n *\n * @since 2.0.0\n */\nexport const constUndefined = /*#__PURE__*/constant(undefined);\n/**\n * A thunk that returns always `void`.\n *\n * @example\n * import { constVoid } from \"effect/Function\"\n *\n * assert.deepStrictEqual(constVoid(), undefined)\n *\n * @since 2.0.0\n */\nexport const constVoid = constUndefined;\n/**\n * Reverses the order of arguments for a curried function.\n *\n * @param f - A curried function that takes multiple arguments.\n *\n * @example\n * import { flip } from \"effect/Function\"\n *\n * const f = (a: number) => (b: string) => a - b.length\n *\n * assert.deepStrictEqual(flip(f)('aaa')(2), -1)\n *\n * @since 2.0.0\n */\nexport const flip = f => (...b) => (...a) => f(...a)(...b);\n/**\n * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.\n * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.\n *\n * @param ab - A function that maps from `A` to `B`.\n * @param bc - A function that maps from `B` to `C`.\n *\n * @example\n * import { compose } from \"effect/Function\"\n *\n * const increment = (n: number) => n + 1;\n * const square = (n: number) => n * n;\n *\n * assert.strictEqual(compose(increment, square)(2), 9);\n *\n * @since 2.0.0\n */\nexport const compose = /*#__PURE__*/dual(2, (ab, bc) => a => bc(ab(a)));\n/**\n * The `absurd` function is a stub for cases where a value of type `never` is encountered in your code,\n * meaning that it should be impossible for this code to be executed.\n *\n * This function is particularly when it's necessary to specify that certain cases are impossible.\n *\n * @since 2.0.0\n */\nexport const absurd = _ => {\n  throw new Error(\"Called `absurd` function which should be uncallable\");\n};\n/**\n * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * import { tupled } from \"effect/Function\"\n *\n * const sumTupled = tupled((x: number, y: number): number => x + y)\n *\n * assert.deepStrictEqual(sumTupled([1, 2]), 3)\n *\n * @since 2.0.0\n */\nexport const tupled = f => a => f(...a);\n/**\n * Inverse function of `tupled`\n *\n * @example\n * import { untupled } from \"effect/Function\"\n *\n * const getFirst = untupled(<A, B>(tuple: [A, B]): A => tuple[0])\n *\n * assert.deepStrictEqual(getFirst(1, 2), 1)\n *\n * @since 2.0.0\n */\nexport const untupled = f => (...a) => f(a);\nexport function pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {\n  switch (arguments.length) {\n    case 1:\n      return a;\n    case 2:\n      return ab(a);\n    case 3:\n      return bc(ab(a));\n    case 4:\n      return cd(bc(ab(a)));\n    case 5:\n      return de(cd(bc(ab(a))));\n    case 6:\n      return ef(de(cd(bc(ab(a)))));\n    case 7:\n      return fg(ef(de(cd(bc(ab(a))))));\n    case 8:\n      return gh(fg(ef(de(cd(bc(ab(a)))))));\n    case 9:\n      return hi(gh(fg(ef(de(cd(bc(ab(a))))))));\n    default:\n      {\n        let ret = arguments[0];\n        for (let i = 1; i < arguments.length; i++) {\n          ret = arguments[i](ret);\n        }\n        return ret;\n      }\n  }\n}\nexport function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {\n  switch (arguments.length) {\n    case 1:\n      return ab;\n    case 2:\n      return function () {\n        return bc(ab.apply(this, arguments));\n      };\n    case 3:\n      return function () {\n        return cd(bc(ab.apply(this, arguments)));\n      };\n    case 4:\n      return function () {\n        return de(cd(bc(ab.apply(this, arguments))));\n      };\n    case 5:\n      return function () {\n        return ef(de(cd(bc(ab.apply(this, arguments)))));\n      };\n    case 6:\n      return function () {\n        return fg(ef(de(cd(bc(ab.apply(this, arguments))))));\n      };\n    case 7:\n      return function () {\n        return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));\n      };\n    case 8:\n      return function () {\n        return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));\n      };\n    case 9:\n      return function () {\n        return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));\n      };\n  }\n  return;\n}\n/**\n * Type hole simulation.\n *\n * @since 2.0.0\n */\nexport const hole = /*#__PURE__*/unsafeCoerce(absurd);\n/**\n * The SK combinator, also known as the \"S-K combinator\" or \"S-combinator\", is a fundamental combinator in the\n * lambda calculus and the SKI combinator calculus.\n *\n * This function is useful for discarding the first argument passed to it and returning the second argument.\n *\n * @param _ - The first argument to be discarded.\n * @param b - The second argument to be returned.\n *\n * @example\n * import { SK } from \"effect/Function\";\n *\n * assert.deepStrictEqual(SK(0, \"hello\"), \"hello\")\n *\n * @since 2.0.0\n */\nexport const SK = (_, b) => b;\n//# sourceMappingURL=Function.js.map","/**\n * The `GlobalValue` module ensures that a single instance of a value is created globally,\n * even when modules are imported multiple times (e.g., due to mixing CommonJS and ESM builds)\n * or during hot-reloading in development environments like Next.js or Remix.\n *\n * It achieves this by using a versioned global store, identified by a unique `Symbol` tied to\n * the current version of the `effect` library. The store holds values that are keyed by an identifier,\n * allowing the reuse of previously computed instances across imports or reloads.\n *\n * This pattern is particularly useful in scenarios where frequent reloading can cause services or\n * single-instance objects to be recreated unnecessarily, such as in development environments with hot-reloading.\n *\n * @since 2.0.0\n */\nimport * as version from \"./internal/version.js\";\nconst globalStoreId = /*#__PURE__*/Symbol.for(`effect/GlobalValue/globalStoreId/${/*#__PURE__*/version.getCurrentVersion()}`);\nif (!(globalStoreId in globalThis)) {\n  ;\n  globalThis[globalStoreId] = /*#__PURE__*/new Map();\n}\nconst globalStore = globalThis[globalStoreId];\n/**\n * Retrieves or computes a global value associated with the given `id`. If the value for this `id`\n * has already been computed, it will be returned from the global store. If it does not exist yet,\n * the provided `compute` function will be executed to compute the value, store it, and then return it.\n *\n * This ensures that even in cases where the module is imported multiple times (e.g., in mixed environments\n * like CommonJS and ESM, or during hot-reloading in development), the value is computed only once and reused\n * thereafter.\n *\n * @example\n * import { globalValue } from \"effect/GlobalValue\"\n *\n * // This cache will persist as long as the module is running,\n * // even if reloaded or imported elsewhere\n * const myCache = globalValue(\n *   Symbol.for(\"myCache\"),\n *   () => new WeakMap<object, number>()\n * )\n *\n * @since 2.0.0\n */\nexport const globalValue = (id, compute) => {\n  if (!globalStore.has(id)) {\n    globalStore.set(id, compute());\n  }\n  return globalStore.get(id);\n};\n//# sourceMappingURL=GlobalValue.js.map","/**\n * @since 2.0.0\n */\nimport { dual, isFunction as isFunction_ } from \"./Function.js\";\n/**\n * Given a `Predicate<A>` returns a `Predicate<B>`\n *\n * @param self - the `Predicate<A>` to be transformed to `Predicate<B>`.\n * @param f - a function to transform `B` to `A`.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const minLength3 = Predicate.mapInput(Number.greaterThan(2), (s: string) => s.length)\n *\n * assert.deepStrictEqual(minLength3(\"a\"), false)\n * assert.deepStrictEqual(minLength3(\"aa\"), false)\n * assert.deepStrictEqual(minLength3(\"aaa\"), true)\n * assert.deepStrictEqual(minLength3(\"aaaa\"), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const mapInput = /*#__PURE__*/dual(2, (self, f) => b => self(f(b)));\n/**\n * Determine if an `Array` is a tuple with exactly `N` elements, narrowing down the type to `TupleOf`.\n *\n * An `Array` is considered to be a `TupleOf` if its length is exactly `N`.\n *\n * @param self - The `Array` to check.\n * @param n - The exact number of elements that the `Array` should have to be considered a `TupleOf`.\n *\n * @example\n * import { isTupleOf } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 3), true);\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 2), false);\n * assert.deepStrictEqual(isTupleOf([1, 2, 3], 4), false);\n *\n * const arr: number[] = [1, 2, 3];\n * if (isTupleOf(arr, 3)) {\n *   console.log(arr);\n *   // ^? [number, number, number]\n * }\n *\n * @category guards\n * @since 3.3.0\n */\nexport const isTupleOf = /*#__PURE__*/dual(2, (self, n) => self.length === n);\n/**\n * Determine if an `Array` is a tuple with at least `N` elements, narrowing down the type to `TupleOfAtLeast`.\n *\n * An `Array` is considered to be a `TupleOfAtLeast` if its length is at least `N`.\n *\n * @param self - The `Array` to check.\n * @param n - The minimum number of elements that the `Array` should have to be considered a `TupleOfAtLeast`.\n *\n * @example\n * import { isTupleOfAtLeast } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 3), true);\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 2), true);\n * assert.deepStrictEqual(isTupleOfAtLeast([1, 2, 3], 4), false);\n *\n * const arr: number[] = [1, 2, 3, 4];\n * if (isTupleOfAtLeast(arr, 3)) {\n *   console.log(arr);\n *   // ^? [number, number, number, ...number[]]\n * }\n *\n * @category guards\n * @since 3.3.0\n */\nexport const isTupleOfAtLeast = /*#__PURE__*/dual(2, (self, n) => self.length >= n);\n/**\n * Tests if a value is `truthy`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isTruthy } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTruthy(1), true)\n * assert.deepStrictEqual(isTruthy(0), false)\n * assert.deepStrictEqual(isTruthy(\"\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isTruthy = input => !!input;\n/**\n * Tests if a value is a `Set`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isSet } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isSet(new Set([1, 2])), true)\n * assert.deepStrictEqual(isSet(new Set()), true)\n * assert.deepStrictEqual(isSet({}), false)\n * assert.deepStrictEqual(isSet(null), false)\n * assert.deepStrictEqual(isSet(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSet = input => input instanceof Set;\n/**\n * Tests if a value is a `Map`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isMap } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isMap(new Map()), true)\n * assert.deepStrictEqual(isMap({}), false)\n * assert.deepStrictEqual(isMap(null), false)\n * assert.deepStrictEqual(isMap(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isMap = input => input instanceof Map;\n/**\n * Tests if a value is a `string`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isString } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isString(\"a\"), true)\n *\n * assert.deepStrictEqual(isString(1), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isString = input => typeof input === \"string\";\n/**\n * Tests if a value is a `number`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNumber } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNumber(2), true)\n *\n * assert.deepStrictEqual(isNumber(\"2\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNumber = input => typeof input === \"number\";\n/**\n * Tests if a value is a `boolean`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBoolean } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isBoolean(true), true)\n *\n * assert.deepStrictEqual(isBoolean(\"true\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBoolean = input => typeof input === \"boolean\";\n/**\n * Tests if a value is a `bigint`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isBigInt } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isBigInt(1n), true)\n *\n * assert.deepStrictEqual(isBigInt(1), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isBigInt = input => typeof input === \"bigint\";\n/**\n * Tests if a value is a `symbol`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isSymbol } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isSymbol(Symbol.for(\"a\")), true)\n *\n * assert.deepStrictEqual(isSymbol(\"a\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSymbol = input => typeof input === \"symbol\";\n/**\n * Tests if a value is a `function`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isFunction } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isFunction(isFunction), true)\n *\n * assert.deepStrictEqual(isFunction(\"function\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isFunction = isFunction_;\n/**\n * Tests if a value is `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isUndefined } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUndefined(undefined), true)\n *\n * assert.deepStrictEqual(isUndefined(null), false)\n * assert.deepStrictEqual(isUndefined(\"undefined\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUndefined = input => input === undefined;\n/**\n * Tests if a value is not `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotUndefined } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotUndefined(null), true)\n * assert.deepStrictEqual(isNotUndefined(\"undefined\"), true)\n *\n * assert.deepStrictEqual(isNotUndefined(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotUndefined = input => input !== undefined;\n/**\n * Tests if a value is `null`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNull } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNull(null), true)\n *\n * assert.deepStrictEqual(isNull(undefined), false)\n * assert.deepStrictEqual(isNull(\"null\"), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNull = input => input === null;\n/**\n * Tests if a value is not `null`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotNull } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotNull(undefined), true)\n * assert.deepStrictEqual(isNotNull(\"null\"), true)\n *\n * assert.deepStrictEqual(isNotNull(null), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotNull = input => input !== null;\n/**\n * A guard that always fails.\n *\n * @param _ - The value to test.\n *\n * @example\n * import { isNever } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNever(null), false)\n * assert.deepStrictEqual(isNever(undefined), false)\n * assert.deepStrictEqual(isNever({}), false)\n * assert.deepStrictEqual(isNever([]), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNever = _ => false;\n/**\n * A guard that always succeeds.\n *\n * @param _ - The value to test.\n *\n * @example\n * import { isUnknown } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUnknown(null), true)\n * assert.deepStrictEqual(isUnknown(undefined), true)\n *\n * assert.deepStrictEqual(isUnknown({}), true)\n * assert.deepStrictEqual(isUnknown([]), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUnknown = _ => true;\n/** @internal */\nexport const isRecordOrArray = input => typeof input === \"object\" && input !== null;\n/**\n * Tests if a value is an `object`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isObject } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isObject({}), true)\n * assert.deepStrictEqual(isObject([]), true)\n *\n * assert.deepStrictEqual(isObject(null), false)\n * assert.deepStrictEqual(isObject(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isObject = input => isRecordOrArray(input) || isFunction(input);\n/**\n * Checks whether a value is an `object` containing a specified property key.\n *\n * @param property - The field to check within the object.\n * @param self - The value to examine.\n *\n * @category guards\n * @since 2.0.0\n */\nexport const hasProperty = /*#__PURE__*/dual(2, (self, property) => isObject(self) && property in self);\n/**\n * Tests if a value is an `object` with a property `_tag` that matches the given tag.\n *\n * @param input - The value to test.\n * @param tag - The tag to test for.\n *\n * @example\n * import { isTagged } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isTagged(1, \"a\"), false)\n * assert.deepStrictEqual(isTagged(null, \"a\"), false)\n * assert.deepStrictEqual(isTagged({}, \"a\"), false)\n * assert.deepStrictEqual(isTagged({ a: \"a\" }, \"a\"), false)\n * assert.deepStrictEqual(isTagged({ _tag: \"a\" }, \"a\"), true)\n * assert.deepStrictEqual(isTagged(\"a\")({ _tag: \"a\" }), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isTagged = /*#__PURE__*/dual(2, (self, tag) => hasProperty(self, \"_tag\") && self[\"_tag\"] === tag);\n/**\n * A guard that succeeds when the input is `null` or `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNullable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNullable(null), true)\n * assert.deepStrictEqual(isNullable(undefined), true)\n *\n * assert.deepStrictEqual(isNullable({}), false)\n * assert.deepStrictEqual(isNullable([]), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNullable = input => input === null || input === undefined;\n/**\n * A guard that succeeds when the input is not `null` or `undefined`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isNotNullable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isNotNullable({}), true)\n * assert.deepStrictEqual(isNotNullable([]), true)\n *\n * assert.deepStrictEqual(isNotNullable(null), false)\n * assert.deepStrictEqual(isNotNullable(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNotNullable = input => input !== null && input !== undefined;\n/**\n * A guard that succeeds when the input is an `Error`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isError } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isError(new Error()), true)\n *\n * assert.deepStrictEqual(isError(null), false)\n * assert.deepStrictEqual(isError({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isError = input => input instanceof Error;\n/**\n * A guard that succeeds when the input is a `Uint8Array`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isUint8Array } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isUint8Array(new Uint8Array()), true)\n *\n * assert.deepStrictEqual(isUint8Array(null), false)\n * assert.deepStrictEqual(isUint8Array({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isUint8Array = input => input instanceof Uint8Array;\n/**\n * A guard that succeeds when the input is a `Date`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isDate } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isDate(new Date()), true)\n *\n * assert.deepStrictEqual(isDate(null), false)\n * assert.deepStrictEqual(isDate({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isDate = input => input instanceof Date;\n/**\n * A guard that succeeds when the input is an `Iterable`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isIterable } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isIterable([]), true)\n * assert.deepStrictEqual(isIterable(new Set()), true)\n *\n * assert.deepStrictEqual(isIterable(null), false)\n * assert.deepStrictEqual(isIterable({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isIterable = input => hasProperty(input, Symbol.iterator);\n/**\n * A guard that succeeds when the input is a record.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isRecord } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isRecord({}), true)\n * assert.deepStrictEqual(isRecord({ a: 1 }), true)\n *\n * assert.deepStrictEqual(isRecord([]), false)\n * assert.deepStrictEqual(isRecord([1, 2, 3]), false)\n * assert.deepStrictEqual(isRecord(null), false)\n * assert.deepStrictEqual(isRecord(undefined), false)\n * assert.deepStrictEqual(isRecord(() => null), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isRecord = input => isRecordOrArray(input) && !Array.isArray(input);\n/**\n * A guard that succeeds when the input is a readonly record.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isReadonlyRecord } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isReadonlyRecord({}), true)\n * assert.deepStrictEqual(isReadonlyRecord({ a: 1 }), true)\n *\n * assert.deepStrictEqual(isReadonlyRecord([]), false)\n * assert.deepStrictEqual(isReadonlyRecord([1, 2, 3]), false)\n * assert.deepStrictEqual(isReadonlyRecord(null), false)\n * assert.deepStrictEqual(isReadonlyRecord(undefined), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isReadonlyRecord = isRecord;\n/**\n * A guard that succeeds when the input is a Promise.\n *\n * @param input - The value to test.\n *\n * @example\n * import { isPromise } from \"effect/Predicate\"\n *\n * assert.deepStrictEqual(isPromise({}), false)\n * assert.deepStrictEqual(isPromise(Promise.resolve(\"hello\")), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isPromise = input => hasProperty(input, \"then\") && \"catch\" in input && isFunction(input.then) && isFunction(input.catch);\n/**\n * @category guards\n * @since 2.0.0\n */\nexport const isPromiseLike = input => hasProperty(input, \"then\") && isFunction(input.then);\n/**\n * Tests if a value is a `RegExp`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { Predicate } from \"effect\"\n *\n * assert.deepStrictEqual(Predicate.isRegExp(/a/), true)\n * assert.deepStrictEqual(Predicate.isRegExp(\"a\"), false)\n *\n * @category guards\n * @since 3.9.0\n */\nexport const isRegExp = input => input instanceof RegExp;\n/**\n * @since 2.0.0\n */\nexport const compose = /*#__PURE__*/dual(2, (ab, bc) => a => ab(a) && bc(a));\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product = (self, that) => ([a, b]) => self(a) && that(b);\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = collection => {\n  return as => {\n    let collectionIndex = 0;\n    for (const p of collection) {\n      if (collectionIndex >= as.length) {\n        break;\n      }\n      if (p(as[collectionIndex]) === false) {\n        return false;\n      }\n      collectionIndex++;\n    }\n    return true;\n  };\n};\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = (self, collection) => {\n  const rest = all(collection);\n  return ([head, ...tail]) => self(head) === false ? false : rest(tail);\n};\n/**\n * Similar to `Promise.all` but operates on `Predicate`s.\n *\n * ```\n * [Refinement<A, B>, Refinement<C, D>, ...] -> Refinement<[A, C, ...], [B, D, ...]>\n * [Predicate<A>, Predicate<B>, ...] -> Predicate<[A, B, ...]>\n * [Refinement<A, B>, Predicate<C>, ...] -> Refinement<[A, C, ...], [B, C, ...]>\n * ```\n *\n * @since 2.0.0\n */\nexport const tuple = (...elements) => all(elements);\n/**\n * ```\n * { ab: Refinement<A, B>; cd: Refinement<C, D>, ... } -> Refinement<{ ab: A; cd: C; ... }, { ab: B; cd: D; ... }>\n * { a: Predicate<A, B>; b: Predicate<B>, ... } -> Predicate<{ a: A; b: B; ... }>\n * { ab: Refinement<A, B>; c: Predicate<C>, ... } -> Refinement<{ ab: A; c: C; ... }, { ab: B; c: С; ... }>\n * ```\n *\n * @since 2.0.0\n */\nexport const struct = fields => {\n  const keys = Object.keys(fields);\n  return a => {\n    for (const key of keys) {\n      if (!fields[key](a[key])) {\n        return false;\n      }\n    }\n    return true;\n  };\n};\n/**\n * Negates the result of a given predicate.\n *\n * @param self - A predicate.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const isPositive = Predicate.not(Number.lessThan(0))\n *\n * assert.deepStrictEqual(isPositive(-1), false)\n * assert.deepStrictEqual(isPositive(0), true)\n * assert.deepStrictEqual(isPositive(1), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const not = self => a => !self(a);\n/**\n * Combines two predicates into a new predicate that returns `true` if at least one of the predicates returns `true`.\n *\n * @param self - A predicate.\n * @param that - A predicate.\n *\n * @example\n * import { Predicate, Number } from \"effect\"\n *\n * const nonZero = Predicate.or(Number.lessThan(0), Number.greaterThan(0))\n *\n * assert.deepStrictEqual(nonZero(-1), true)\n * assert.deepStrictEqual(nonZero(0), false)\n * assert.deepStrictEqual(nonZero(1), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const or = /*#__PURE__*/dual(2, (self, that) => a => self(a) || that(a));\n/**\n * Combines two predicates into a new predicate that returns `true` if both of the predicates returns `true`.\n *\n * @param self - A predicate.\n * @param that - A predicate.\n *\n * @example\n * import { Predicate } from \"effect\"\n *\n * const minLength = (n: number) => (s: string) => s.length >= n\n * const maxLength = (n: number) => (s: string) => s.length <= n\n *\n * const length = (n: number) => Predicate.and(minLength(n), maxLength(n))\n *\n * assert.deepStrictEqual(length(2)(\"aa\"), true)\n * assert.deepStrictEqual(length(2)(\"a\"), false)\n * assert.deepStrictEqual(length(2)(\"aaa\"), false)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const and = /*#__PURE__*/dual(2, (self, that) => a => self(a) && that(a));\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const xor = /*#__PURE__*/dual(2, (self, that) => a => self(a) !== that(a));\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const eqv = /*#__PURE__*/dual(2, (self, that) => a => self(a) === that(a));\n/**\n * Represents the logical implication combinator for predicates. In formal\n * logic, the implication operator `->` denotes that if the first proposition\n * (antecedent) is true, then the second proposition (consequent) must also be\n * true. In simpler terms, `p implies q` can be interpreted as \"if p then q\". If\n * the first predicate holds, then the second predicate must hold\n * for the given context.\n *\n * In practical terms within TypeScript, `p implies q` is equivalent to `!p || (p && q)`.\n *\n * Note that if the antecedent is `false`, the result is `true` by default\n * because the outcome of the consequent cannot be determined.\n *\n * This function is useful in situations where you need to enforce rules or\n * constraints that are contingent on certain conditions.\n * It proves especially helpful in defining property tests.\n *\n * The example below illustrates the transitive property of order using the\n * `implies` function. In simple terms, if `a <= b` and `b <= c`, then `a <= c`\n * must be true.\n *\n * @example\n * import { Predicate } from \"effect\"\n *\n * type Triple = {\n *   readonly a: number\n *   readonly b: number\n *   readonly c: number\n * }\n *\n * const transitivity = Predicate.implies(\n *   // antecedent\n *   (input: Triple) => input.a <= input.b && input.b <= input.c,\n *   // consequent\n *   (input: Triple) => input.a <= input.c\n * )\n *\n * assert.equal(transitivity({ a: 1, b: 2, c: 3 }), true)\n * // antecedent is `false`, so the result is `true`\n * assert.equal(transitivity({ a: 1, b: 0, c: 0 }), true)\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const implies = /*#__PURE__*/dual(2, (antecedent, consequent) => a => antecedent(a) ? consequent(a) : true);\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const nor = /*#__PURE__*/dual(2, (self, that) => a => !(self(a) || that(a)));\n/**\n * @category combinators\n * @since 2.0.0\n */\nexport const nand = /*#__PURE__*/dual(2, (self, that) => a => !(self(a) && that(a)));\n/**\n * @category elements\n * @since 2.0.0\n */\nexport const every = collection => a => {\n  for (const p of collection) {\n    if (!p(a)) {\n      return false;\n    }\n  }\n  return true;\n};\n/**\n * @category elements\n * @since 2.0.0\n */\nexport const some = collection => a => {\n  for (const p of collection) {\n    if (p(a)) {\n      return true;\n    }\n  }\n  return false;\n};\n//# sourceMappingURL=Predicate.js.map","/**\n * @since 2.0.0\n */\n/** @internal */\nexport const getBugErrorMessage = message => `BUG: ${message} - please report an issue at https://github.com/Effect-TS/effect/issues`;\n//# sourceMappingURL=errors.js.map","/**\n * @since 2.0.0\n */\nimport { identity } from \"./Function.js\";\nimport { globalValue } from \"./GlobalValue.js\";\nimport { getBugErrorMessage } from \"./internal/errors.js\";\nimport { isNullable, isObject } from \"./Predicate.js\";\n/*\n * Copyright 2014 Thom Chiovoloni, released under the MIT license.\n *\n * A random number generator based on the basic implementation of the PCG algorithm,\n * as described here: http://www.pcg-random.org/\n *\n * Adapted for TypeScript from Thom's original code at https://github.com/thomcc/pcg-random\n *\n * forked from https://github.com/frptools\n *\n * @since 2.0.0\n */\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const GenKindTypeId = /*#__PURE__*/Symbol.for(\"effect/Gen/GenKind\");\n/**\n * @category predicates\n * @since 3.0.6\n */\nexport const isGenKind = u => isObject(u) && GenKindTypeId in u;\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport class GenKindImpl {\n  value;\n  constructor(\n  /**\n   * @since 2.0.0\n   */\n  value) {\n    this.value = value;\n  }\n  /**\n   * @since 2.0.0\n   */\n  get _F() {\n    return identity;\n  }\n  /**\n   * @since 2.0.0\n   */\n  get _R() {\n    return _ => _;\n  }\n  /**\n   * @since 2.0.0\n   */\n  get _O() {\n    return _ => _;\n  }\n  /**\n   * @since 2.0.0\n   */\n  get _E() {\n    return _ => _;\n  }\n  /**\n   * @since 2.0.0\n   */\n  [GenKindTypeId] = GenKindTypeId;\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator]() {\n    return new SingleShotGen(this);\n  }\n}\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport class SingleShotGen {\n  self;\n  called = false;\n  constructor(self) {\n    this.self = self;\n  }\n  /**\n   * @since 2.0.0\n   */\n  next(a) {\n    return this.called ? {\n      value: a,\n      done: true\n    } : (this.called = true, {\n      value: this.self,\n      done: false\n    });\n  }\n  /**\n   * @since 2.0.0\n   */\n  return(a) {\n    return {\n      value: a,\n      done: true\n    };\n  }\n  /**\n   * @since 2.0.0\n   */\n  throw(e) {\n    throw e;\n  }\n  /**\n   * @since 2.0.0\n   */\n  [Symbol.iterator]() {\n    return new SingleShotGen(this.self);\n  }\n}\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const makeGenKind = kind => new GenKindImpl(kind);\n/**\n * @category adapters\n * @since 2.0.0\n */\nexport const adapter = () => function () {\n  let x = arguments[0];\n  for (let i = 1; i < arguments.length; i++) {\n    x = arguments[i](x);\n  }\n  return new GenKindImpl(x);\n};\nconst defaultIncHi = 0x14057b7e;\nconst defaultIncLo = 0xf767814f;\nconst MUL_HI = 0x5851f42d >>> 0;\nconst MUL_LO = 0x4c957f2d >>> 0;\nconst BIT_53 = 9007199254740992.0;\nconst BIT_27 = 134217728.0;\n/**\n * PCG is a family of simple fast space-efficient statistically good algorithms\n * for random number generation. Unlike many general-purpose RNGs, they are also\n * hard to predict.\n *\n * @category model\n * @since 2.0.0\n */\nexport class PCGRandom {\n  _state;\n  constructor(seedHi, seedLo, incHi, incLo) {\n    if (isNullable(seedLo) && isNullable(seedHi)) {\n      seedLo = Math.random() * 0xffffffff >>> 0;\n      seedHi = 0;\n    } else if (isNullable(seedLo)) {\n      seedLo = seedHi;\n      seedHi = 0;\n    }\n    if (isNullable(incLo) && isNullable(incHi)) {\n      incLo = this._state ? this._state[3] : defaultIncLo;\n      incHi = this._state ? this._state[2] : defaultIncHi;\n    } else if (isNullable(incLo)) {\n      incLo = incHi;\n      incHi = 0;\n    }\n    this._state = new Int32Array([0, 0, incHi >>> 0, ((incLo || 0) | 1) >>> 0]);\n    this._next();\n    add64(this._state, this._state[0], this._state[1], seedHi >>> 0, seedLo >>> 0);\n    this._next();\n    return this;\n  }\n  /**\n   * Returns a copy of the internal state of this random number generator as a\n   * JavaScript Array.\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  getState() {\n    return [this._state[0], this._state[1], this._state[2], this._state[3]];\n  }\n  /**\n   * Restore state previously retrieved using `getState()`.\n   *\n   * @since 2.0.0\n   */\n  setState(state) {\n    this._state[0] = state[0];\n    this._state[1] = state[1];\n    this._state[2] = state[2];\n    this._state[3] = state[3] | 1;\n  }\n  /**\n   * Get a uniformly distributed 32 bit integer between [0, max).\n   *\n   * @category getter\n   * @since 2.0.0\n   */\n  integer(max) {\n    return Math.round(this.number() * Number.MAX_SAFE_INTEGER) % max;\n  }\n  /**\n   * Get a uniformly distributed IEEE-754 double between 0.0 and 1.0, with\n   * 53 bits of precision (every bit of the mantissa is randomized).\n   *\n   * @category getters\n   * @since 2.0.0\n   */\n  number() {\n    const hi = (this._next() & 0x03ffffff) * 1.0;\n    const lo = (this._next() & 0x07ffffff) * 1.0;\n    return (hi * BIT_27 + lo) / BIT_53;\n  }\n  /** @internal */\n  _next() {\n    // save current state (what we'll use for this number)\n    const oldHi = this._state[0] >>> 0;\n    const oldLo = this._state[1] >>> 0;\n    // churn LCG.\n    mul64(this._state, oldHi, oldLo, MUL_HI, MUL_LO);\n    add64(this._state, this._state[0], this._state[1], this._state[2], this._state[3]);\n    // get least sig. 32 bits of ((oldstate >> 18) ^ oldstate) >> 27\n    let xsHi = oldHi >>> 18;\n    let xsLo = (oldLo >>> 18 | oldHi << 14) >>> 0;\n    xsHi = (xsHi ^ oldHi) >>> 0;\n    xsLo = (xsLo ^ oldLo) >>> 0;\n    const xorshifted = (xsLo >>> 27 | xsHi << 5) >>> 0;\n    // rotate xorshifted right a random amount, based on the most sig. 5 bits\n    // bits of the old state.\n    const rot = oldHi >>> 27;\n    const rot2 = (-rot >>> 0 & 31) >>> 0;\n    return (xorshifted >>> rot | xorshifted << rot2) >>> 0;\n  }\n}\nfunction mul64(out, aHi, aLo, bHi, bLo) {\n  let c1 = (aLo >>> 16) * (bLo & 0xffff) >>> 0;\n  let c0 = (aLo & 0xffff) * (bLo >>> 16) >>> 0;\n  let lo = (aLo & 0xffff) * (bLo & 0xffff) >>> 0;\n  let hi = (aLo >>> 16) * (bLo >>> 16) + ((c0 >>> 16) + (c1 >>> 16)) >>> 0;\n  c0 = c0 << 16 >>> 0;\n  lo = lo + c0 >>> 0;\n  if (lo >>> 0 < c0 >>> 0) {\n    hi = hi + 1 >>> 0;\n  }\n  c1 = c1 << 16 >>> 0;\n  lo = lo + c1 >>> 0;\n  if (lo >>> 0 < c1 >>> 0) {\n    hi = hi + 1 >>> 0;\n  }\n  hi = hi + Math.imul(aLo, bHi) >>> 0;\n  hi = hi + Math.imul(aHi, bLo) >>> 0;\n  out[0] = hi;\n  out[1] = lo;\n}\n// add two 64 bit numbers (given in parts), and store the result in `out`.\nfunction add64(out, aHi, aLo, bHi, bLo) {\n  let hi = aHi + bHi >>> 0;\n  const lo = aLo + bLo >>> 0;\n  if (lo >>> 0 < aLo >>> 0) {\n    hi = hi + 1 | 0;\n  }\n  out[0] = hi;\n  out[1] = lo;\n}\n/**\n * @since 3.0.6\n */\nexport const YieldWrapTypeId = /*#__PURE__*/Symbol.for(\"effect/Utils/YieldWrap\");\n/**\n * @since 3.0.6\n */\nexport class YieldWrap {\n  /**\n   * @since 3.0.6\n   */\n  #value;\n  constructor(value) {\n    this.#value = value;\n  }\n  /**\n   * @since 3.0.6\n   */\n  [YieldWrapTypeId]() {\n    return this.#value;\n  }\n}\n/**\n * @since 3.0.6\n */\nexport function yieldWrapGet(self) {\n  if (typeof self === \"object\" && self !== null && YieldWrapTypeId in self) {\n    return self[YieldWrapTypeId]();\n  }\n  throw new Error(getBugErrorMessage(\"yieldWrapGet\"));\n}\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nexport const structuralRegionState = /*#__PURE__*/globalValue(\"effect/Utils/isStructuralRegion\", () => ({\n  enabled: false,\n  tester: undefined\n}));\n/**\n * Note: this is an experimental feature made available to allow custom matchers in tests, not to be directly used yet in user code\n *\n * @since 3.1.1\n * @status experimental\n * @category modifiers\n */\nexport const structuralRegion = (body, tester) => {\n  const current = structuralRegionState.enabled;\n  const currentTester = structuralRegionState.tester;\n  structuralRegionState.enabled = true;\n  if (tester) {\n    structuralRegionState.tester = tester;\n  }\n  try {\n    return body();\n  } finally {\n    structuralRegionState.enabled = current;\n    structuralRegionState.tester = currentTester;\n  }\n};\nconst tracingFunction = name => {\n  const wrap = {\n    [name](body) {\n      return body();\n    }\n  };\n  return function (fn) {\n    return wrap[name](fn);\n  };\n};\n/**\n * @since 3.2.2\n * @status experimental\n * @category tracing\n */\nexport const internalCall = /*#__PURE__*/tracingFunction(\"effect_internal_function\");\n//# sourceMappingURL=Utils.js.map","/**\n * @since 2.0.0\n */\nimport { pipe } from \"./Function.js\";\nimport { globalValue } from \"./GlobalValue.js\";\nimport { hasProperty } from \"./Predicate.js\";\nimport { structuralRegionState } from \"./Utils.js\";\n/** @internal */\nconst randomHashCache = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for(\"effect/Hash/randomHashCache\"), () => new WeakMap());\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const symbol = /*#__PURE__*/Symbol.for(\"effect/Hash\");\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const hash = self => {\n  if (structuralRegionState.enabled === true) {\n    return 0;\n  }\n  switch (typeof self) {\n    case \"number\":\n      return number(self);\n    case \"bigint\":\n      return string(self.toString(10));\n    case \"boolean\":\n      return string(String(self));\n    case \"symbol\":\n      return string(String(self));\n    case \"string\":\n      return string(self);\n    case \"undefined\":\n      return string(\"undefined\");\n    case \"function\":\n    case \"object\":\n      {\n        if (self === null) {\n          return string(\"null\");\n        } else if (self instanceof Date) {\n          return hash(self.toISOString());\n        } else if (isHash(self)) {\n          return self[symbol]();\n        } else {\n          return random(self);\n        }\n      }\n    default:\n      throw new Error(`BUG: unhandled typeof ${typeof self} - please report an issue at https://github.com/Effect-TS/effect/issues`);\n  }\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const random = self => {\n  if (!randomHashCache.has(self)) {\n    randomHashCache.set(self, number(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)));\n  }\n  return randomHashCache.get(self);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const combine = b => self => self * 53 ^ b;\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const optimize = n => n & 0xbfffffff | n >>> 1 & 0x40000000;\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isHash = u => hasProperty(u, symbol);\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const number = n => {\n  if (n !== n || n === Infinity) {\n    return 0;\n  }\n  let h = n | 0;\n  if (h !== n) {\n    h ^= n * 0xffffffff;\n  }\n  while (n > 0xffffffff) {\n    h ^= n /= 0xffffffff;\n  }\n  return optimize(h);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const string = str => {\n  let h = 5381,\n    i = str.length;\n  while (i) {\n    h = h * 33 ^ str.charCodeAt(--i);\n  }\n  return optimize(h);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const structureKeys = (o, keys) => {\n  let h = 12289;\n  for (let i = 0; i < keys.length; i++) {\n    h ^= pipe(string(keys[i]), combine(hash(o[keys[i]])));\n  }\n  return optimize(h);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const structure = o => structureKeys(o, Object.keys(o));\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const array = arr => {\n  let h = 6151;\n  for (let i = 0; i < arr.length; i++) {\n    h = pipe(h, combine(hash(arr[i])));\n  }\n  return optimize(h);\n};\n/**\n * @since 2.0.0\n * @category hashing\n */\nexport const cached = function () {\n  if (arguments.length === 1) {\n    const self = arguments[0];\n    return function (hash) {\n      Object.defineProperty(self, symbol, {\n        value() {\n          return hash;\n        },\n        enumerable: false\n      });\n      return hash;\n    };\n  }\n  const self = arguments[0];\n  const hash = arguments[1];\n  Object.defineProperty(self, symbol, {\n    value() {\n      return hash;\n    },\n    enumerable: false\n  });\n  return hash;\n};\n//# sourceMappingURL=Hash.js.map","import * as Hash from \"./Hash.js\";\nimport { hasProperty } from \"./Predicate.js\";\nimport { structuralRegionState } from \"./Utils.js\";\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const symbol = /*#__PURE__*/Symbol.for(\"effect/Equal\");\nexport function equals() {\n  if (arguments.length === 1) {\n    return self => compareBoth(self, arguments[0]);\n  }\n  return compareBoth(arguments[0], arguments[1]);\n}\nfunction compareBoth(self, that) {\n  if (self === that) {\n    return true;\n  }\n  const selfType = typeof self;\n  if (selfType !== typeof that) {\n    return false;\n  }\n  if (selfType === \"object\" || selfType === \"function\") {\n    if (self !== null && that !== null) {\n      if (isEqual(self) && isEqual(that)) {\n        if (Hash.hash(self) === Hash.hash(that) && self[symbol](that)) {\n          return true;\n        } else {\n          return structuralRegionState.enabled && structuralRegionState.tester ? structuralRegionState.tester(self, that) : false;\n        }\n      } else if (self instanceof Date && that instanceof Date) {\n        return self.toISOString() === that.toISOString();\n      }\n    }\n    if (structuralRegionState.enabled) {\n      if (Array.isArray(self) && Array.isArray(that)) {\n        return self.length === that.length && self.every((v, i) => compareBoth(v, that[i]));\n      }\n      if (Object.getPrototypeOf(self) === Object.prototype && Object.getPrototypeOf(self) === Object.prototype) {\n        const keysSelf = Object.keys(self);\n        const keysThat = Object.keys(that);\n        if (keysSelf.length === keysThat.length) {\n          for (const key of keysSelf) {\n            // @ts-expect-error\n            if (!(key in that && compareBoth(self[key], that[key]))) {\n              return structuralRegionState.tester ? structuralRegionState.tester(self, that) : false;\n            }\n          }\n          return true;\n        }\n      }\n      return structuralRegionState.tester ? structuralRegionState.tester(self, that) : false;\n    }\n  }\n  return structuralRegionState.enabled && structuralRegionState.tester ? structuralRegionState.tester(self, that) : false;\n}\n/**\n * @since 2.0.0\n * @category guards\n */\nexport const isEqual = u => hasProperty(u, symbol);\n/**\n * @since 2.0.0\n * @category instances\n */\nexport const equivalence = () => equals;\n//# sourceMappingURL=Equal.js.map","/**\n * @since 2.0.0\n */\nimport { globalValue } from \"./GlobalValue.js\";\nimport { hasProperty, isFunction } from \"./Predicate.js\";\n/**\n * @since 2.0.0\n * @category symbols\n */\nexport const NodeInspectSymbol = /*#__PURE__*/Symbol.for(\"nodejs.util.inspect.custom\");\n/**\n * @since 2.0.0\n */\nexport const toJSON = x => {\n  if (hasProperty(x, \"toJSON\") && isFunction(x[\"toJSON\"]) && x[\"toJSON\"].length === 0) {\n    return x.toJSON();\n  } else if (Array.isArray(x)) {\n    return x.map(toJSON);\n  }\n  return redact(x);\n};\n/**\n * @since 2.0.0\n */\nexport const format = x => JSON.stringify(x, null, 2);\n/**\n * @since 2.0.0\n */\nexport const BaseProto = {\n  toJSON() {\n    return toJSON(this);\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON();\n  },\n  toString() {\n    return format(this.toJSON());\n  }\n};\n/**\n * @since 2.0.0\n */\nexport class Class {\n  /**\n   * @since 2.0.0\n   */\n  [NodeInspectSymbol]() {\n    return this.toJSON();\n  }\n  /**\n   * @since 2.0.0\n   */\n  toString() {\n    return format(this.toJSON());\n  }\n}\n/**\n * @since 2.0.0\n */\nexport const toStringUnknown = (u, whitespace = 2) => {\n  if (typeof u === \"string\") {\n    return u;\n  }\n  try {\n    return typeof u === \"object\" ? stringifyCircular(u, whitespace) : String(u);\n  } catch (_) {\n    return String(u);\n  }\n};\n/**\n * @since 2.0.0\n */\nexport const stringifyCircular = (obj, whitespace) => {\n  let cache = [];\n  const retVal = JSON.stringify(obj, (_key, value) => typeof value === \"object\" && value !== null ? cache.includes(value) ? undefined // circular reference\n  : cache.push(value) && (redactableState.fiberRefs !== undefined && isRedactable(value) ? value[symbolRedactable](redactableState.fiberRefs) : value) : value, whitespace);\n  cache = undefined;\n  return retVal;\n};\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const symbolRedactable = /*#__PURE__*/Symbol.for(\"effect/Inspectable/Redactable\");\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const isRedactable = u => typeof u === \"object\" && u !== null && symbolRedactable in u;\nconst redactableState = /*#__PURE__*/globalValue(\"effect/Inspectable/redactableState\", () => ({\n  fiberRefs: undefined\n}));\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const withRedactableContext = (context, f) => {\n  const prev = redactableState.fiberRefs;\n  redactableState.fiberRefs = context;\n  try {\n    return f();\n  } finally {\n    redactableState.fiberRefs = prev;\n  }\n};\n/**\n * @since 3.10.0\n * @category redactable\n */\nexport const redact = u => {\n  if (isRedactable(u) && redactableState.fiberRefs !== undefined) {\n    return u[symbolRedactable](redactableState.fiberRefs);\n  }\n  return u;\n};\n//# sourceMappingURL=Inspectable.js.map","/**\n * @since 2.0.0\n */\n/**\n * @since 2.0.0\n */\nexport const pipeArguments = (self, args) => {\n  switch (args.length) {\n    case 0:\n      return self;\n    case 1:\n      return args[0](self);\n    case 2:\n      return args[1](args[0](self));\n    case 3:\n      return args[2](args[1](args[0](self)));\n    case 4:\n      return args[3](args[2](args[1](args[0](self))));\n    case 5:\n      return args[4](args[3](args[2](args[1](args[0](self)))));\n    case 6:\n      return args[5](args[4](args[3](args[2](args[1](args[0](self))))));\n    case 7:\n      return args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))));\n    case 8:\n      return args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self))))))));\n    case 9:\n      return args[8](args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))));\n    default:\n      {\n        let ret = self;\n        for (let i = 0, len = args.length; i < len; i++) {\n          ret = args[i](ret);\n        }\n        return ret;\n      }\n  }\n};\n//# sourceMappingURL=Pipeable.js.map","import * as Equal from \"../Equal.js\";\nimport * as Hash from \"../Hash.js\";\nimport { pipeArguments } from \"../Pipeable.js\";\nimport { SingleShotGen, YieldWrap } from \"../Utils.js\";\nimport * as OpCodes from \"./opCodes/effect.js\";\nimport * as version from \"./version.js\";\n/** @internal */\nexport const EffectTypeId = /*#__PURE__*/Symbol.for(\"effect/Effect\");\n/** @internal */\nexport const StreamTypeId = /*#__PURE__*/Symbol.for(\"effect/Stream\");\n/** @internal */\nexport const SinkTypeId = /*#__PURE__*/Symbol.for(\"effect/Sink\");\n/** @internal */\nexport const ChannelTypeId = /*#__PURE__*/Symbol.for(\"effect/Channel\");\n/** @internal */\nexport const effectVariance = {\n  /* c8 ignore next */\n  _R: _ => _,\n  /* c8 ignore next */\n  _E: _ => _,\n  /* c8 ignore next */\n  _A: _ => _,\n  _V: /*#__PURE__*/version.getCurrentVersion()\n};\nconst sinkVariance = {\n  /* c8 ignore next */\n  _A: _ => _,\n  /* c8 ignore next */\n  _In: _ => _,\n  /* c8 ignore next */\n  _L: _ => _,\n  /* c8 ignore next */\n  _E: _ => _,\n  /* c8 ignore next */\n  _R: _ => _\n};\nconst channelVariance = {\n  /* c8 ignore next */\n  _Env: _ => _,\n  /* c8 ignore next */\n  _InErr: _ => _,\n  /* c8 ignore next */\n  _InElem: _ => _,\n  /* c8 ignore next */\n  _InDone: _ => _,\n  /* c8 ignore next */\n  _OutErr: _ => _,\n  /* c8 ignore next */\n  _OutElem: _ => _,\n  /* c8 ignore next */\n  _OutDone: _ => _\n};\n/** @internal */\nexport const EffectPrototype = {\n  [EffectTypeId]: effectVariance,\n  [StreamTypeId]: effectVariance,\n  [SinkTypeId]: sinkVariance,\n  [ChannelTypeId]: channelVariance,\n  [Equal.symbol](that) {\n    return this === that;\n  },\n  [Hash.symbol]() {\n    return Hash.cached(this, Hash.random(this));\n  },\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this));\n  },\n  pipe() {\n    return pipeArguments(this, arguments);\n  }\n};\n/** @internal */\nexport const StructuralPrototype = {\n  [Hash.symbol]() {\n    return Hash.cached(this, Hash.structure(this));\n  },\n  [Equal.symbol](that) {\n    const selfKeys = Object.keys(this);\n    const thatKeys = Object.keys(that);\n    if (selfKeys.length !== thatKeys.length) {\n      return false;\n    }\n    for (const key of selfKeys) {\n      if (!(key in that && Equal.equals(this[key], that[key]))) {\n        return false;\n      }\n    }\n    return true;\n  }\n};\n/** @internal */\nexport const CommitPrototype = {\n  ...EffectPrototype,\n  _op: OpCodes.OP_COMMIT\n};\n/** @internal */\nexport const StructuralCommitPrototype = {\n  ...CommitPrototype,\n  ...StructuralPrototype\n};\n/** @internal */\nexport const Base = /*#__PURE__*/function () {\n  function Base() {}\n  Base.prototype = CommitPrototype;\n  return Base;\n}();\n/** @internal */\nexport const StructuralBase = /*#__PURE__*/function () {\n  function Base() {}\n  Base.prototype = StructuralCommitPrototype;\n  return Base;\n}();\n//# sourceMappingURL=effectable.js.map","/** @internal */\nexport const OP_ASYNC = \"Async\";\n/** @internal */\nexport const OP_COMMIT = \"Commit\";\n/** @internal */\nexport const OP_FAILURE = \"Failure\";\n/** @internal */\nexport const OP_ON_FAILURE = \"OnFailure\";\n/** @internal */\nexport const OP_ON_SUCCESS = \"OnSuccess\";\n/** @internal */\nexport const OP_ON_SUCCESS_AND_FAILURE = \"OnSuccessAndFailure\";\n/** @internal */\nexport const OP_SUCCESS = \"Success\";\n/** @internal */\nexport const OP_SYNC = \"Sync\";\n/** @internal */\nexport const OP_TAG = \"Tag\";\n/** @internal */\nexport const OP_UPDATE_RUNTIME_FLAGS = \"UpdateRuntimeFlags\";\n/** @internal */\nexport const OP_WHILE = \"While\";\n/** @internal */\nexport const OP_WITH_RUNTIME = \"WithRuntime\";\n/** @internal */\nexport const OP_YIELD = \"Yield\";\n/** @internal */\nexport const OP_REVERT_FLAGS = \"RevertFlags\";\n//# sourceMappingURL=effect.js.map","/**\n * @since 2.0.0\n */\nimport * as Equal from \"../Equal.js\";\nimport * as Hash from \"../Hash.js\";\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\";\nimport { hasProperty } from \"../Predicate.js\";\nimport { EffectPrototype } from \"./effectable.js\";\nconst TypeId = /*#__PURE__*/Symbol.for(\"effect/Option\");\nconst CommonProto = {\n  ...EffectPrototype,\n  [TypeId]: {\n    _A: _ => _\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON();\n  },\n  toString() {\n    return format(this.toJSON());\n  }\n};\nconst SomeProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {\n  _tag: \"Some\",\n  _op: \"Some\",\n  [Equal.symbol](that) {\n    return isOption(that) && isSome(that) && Equal.equals(this.value, that.value);\n  },\n  [Hash.symbol]() {\n    return Hash.cached(this, Hash.combine(Hash.hash(this._tag))(Hash.hash(this.value)));\n  },\n  toJSON() {\n    return {\n      _id: \"Option\",\n      _tag: this._tag,\n      value: toJSON(this.value)\n    };\n  }\n});\nconst NoneHash = /*#__PURE__*/Hash.hash(\"None\");\nconst NoneProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {\n  _tag: \"None\",\n  _op: \"None\",\n  [Equal.symbol](that) {\n    return isOption(that) && isNone(that);\n  },\n  [Hash.symbol]() {\n    return NoneHash;\n  },\n  toJSON() {\n    return {\n      _id: \"Option\",\n      _tag: this._tag\n    };\n  }\n});\n/** @internal */\nexport const isOption = input => hasProperty(input, TypeId);\n/** @internal */\nexport const isNone = fa => fa._tag === \"None\";\n/** @internal */\nexport const isSome = fa => fa._tag === \"Some\";\n/** @internal */\nexport const none = /*#__PURE__*/Object.create(NoneProto);\n/** @internal */\nexport const some = value => {\n  const a = Object.create(SomeProto);\n  a.value = value;\n  return a;\n};\n//# sourceMappingURL=option.js.map","/**\n * @since 2.0.0\n */\nimport * as Equal from \"../Equal.js\";\nimport { dual } from \"../Function.js\";\nimport * as Hash from \"../Hash.js\";\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\";\nimport { hasProperty } from \"../Predicate.js\";\nimport { EffectPrototype } from \"./effectable.js\";\nimport * as option from \"./option.js\";\n/**\n * @internal\n */\nexport const TypeId = /*#__PURE__*/Symbol.for(\"effect/Either\");\nconst CommonProto = {\n  ...EffectPrototype,\n  [TypeId]: {\n    _R: _ => _\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON();\n  },\n  toString() {\n    return format(this.toJSON());\n  }\n};\nconst RightProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {\n  _tag: \"Right\",\n  _op: \"Right\",\n  [Equal.symbol](that) {\n    return isEither(that) && isRight(that) && Equal.equals(this.right, that.right);\n  },\n  [Hash.symbol]() {\n    return Hash.combine(Hash.hash(this._tag))(Hash.hash(this.right));\n  },\n  toJSON() {\n    return {\n      _id: \"Either\",\n      _tag: this._tag,\n      right: toJSON(this.right)\n    };\n  }\n});\nconst LeftProto = /*#__PURE__*/Object.assign( /*#__PURE__*/Object.create(CommonProto), {\n  _tag: \"Left\",\n  _op: \"Left\",\n  [Equal.symbol](that) {\n    return isEither(that) && isLeft(that) && Equal.equals(this.left, that.left);\n  },\n  [Hash.symbol]() {\n    return Hash.combine(Hash.hash(this._tag))(Hash.hash(this.left));\n  },\n  toJSON() {\n    return {\n      _id: \"Either\",\n      _tag: this._tag,\n      left: toJSON(this.left)\n    };\n  }\n});\n/** @internal */\nexport const isEither = input => hasProperty(input, TypeId);\n/** @internal */\nexport const isLeft = ma => ma._tag === \"Left\";\n/** @internal */\nexport const isRight = ma => ma._tag === \"Right\";\n/** @internal */\nexport const left = left => {\n  const a = Object.create(LeftProto);\n  a.left = left;\n  return a;\n};\n/** @internal */\nexport const right = right => {\n  const a = Object.create(RightProto);\n  a.right = right;\n  return a;\n};\n/** @internal */\nexport const getLeft = self => isRight(self) ? option.none : option.some(self.left);\n/** @internal */\nexport const getRight = self => isLeft(self) ? option.none : option.some(self.right);\n/** @internal */\nexport const fromOption = /*#__PURE__*/dual(2, (self, onNone) => option.isNone(self) ? left(onNone()) : right(self.value));\n//# sourceMappingURL=either.js.map","import * as Equal from \"./Equal.js\";\nimport * as Equivalence from \"./Equivalence.js\";\nimport { constNull, constUndefined, dual, identity, isFunction } from \"./Function.js\";\nimport * as doNotation from \"./internal/doNotation.js\";\nimport * as either from \"./internal/either.js\";\nimport * as option from \"./internal/option.js\";\nimport * as order from \"./Order.js\";\nimport * as Gen from \"./Utils.js\";\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const TypeId = /*#__PURE__*/Symbol.for(\"effect/Option\");\n/**\n * Creates a new `Option` that represents the absence of a value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const none = () => option.none;\n/**\n * Creates a new `Option` that wraps the given value.\n *\n * @param value - The value to wrap.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const some = option.some;\n/**\n * Tests if a value is a `Option`.\n *\n * @param input - The value to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isOption(Option.some(1)), true)\n * assert.deepStrictEqual(Option.isOption(Option.none()), true)\n * assert.deepStrictEqual(Option.isOption({}), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isOption = option.isOption;\n/**\n * Determine if a `Option` is a `None`.\n *\n * @param self - The `Option` to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isNone(Option.some(1)), false)\n * assert.deepStrictEqual(Option.isNone(Option.none()), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNone = option.isNone;\n/**\n * Determine if a `Option` is a `Some`.\n *\n * @param self - The `Option` to check.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.isSome(Option.some(1)), true)\n * assert.deepStrictEqual(Option.isSome(Option.none()), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isSome = option.isSome;\n/**\n * Matches the given `Option` and returns either the provided `onNone` value or the result of the provided `onSome`\n * function when passed the `Option`'s value.\n *\n * @param self - The `Option` to match\n * @param onNone - The value to be returned if the `Option` is `None`\n * @param onSome - The function to be called if the `Option` is `Some`, it will be passed the `Option`'s value and its result will be returned\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(Option.some(1), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n *   'a some containing 1'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(Option.none(), Option.match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),\n *   'a none'\n * )\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match = /*#__PURE__*/dual(2, (self, {\n  onNone,\n  onSome\n}) => isNone(self) ? onNone() : onSome(self.value));\n/**\n * Returns a type guard from a `Option` returning function.\n * This function ensures that a type guard definition is type-safe.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parsePositive = (n: number): Option.Option<number> =>\n *   n > 0 ? Option.some(n) : Option.none()\n *\n * const isPositive = Option.toRefinement(parsePositive)\n *\n * assert.deepStrictEqual(isPositive(1), true)\n * assert.deepStrictEqual(isPositive(-1), false)\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toRefinement = f => a => isSome(f(a));\n/**\n * Converts an `Iterable` of values into an `Option`. Returns the first value of the `Iterable` wrapped in a `Some`\n * if the `Iterable` is not empty, otherwise returns `None`.\n *\n * @param collection - The `Iterable` to be converted to an `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.fromIterable([1, 2, 3]), Option.some(1))\n * assert.deepStrictEqual(Option.fromIterable([]), Option.none())\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterable = collection => {\n  for (const a of collection) {\n    return some(a);\n  }\n  return none();\n};\n/**\n * Converts a `Either` to an `Option` discarding the error.\n *\n * @example\n * import { Option, Either } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getRight(Either.right('ok')), Option.some('ok'))\n * assert.deepStrictEqual(Option.getRight(Either.left('err')), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getRight = either.getRight;\n/**\n * Converts a `Either` to an `Option` discarding the value.\n *\n * @example\n * import { Option, Either } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getLeft(Either.right(\"ok\")), Option.none())\n * assert.deepStrictEqual(Option.getLeft(Either.left(\"a\")), Option.some(\"a\"))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getLeft = either.getLeft;\n/**\n * Returns the value of the `Option` if it is `Some`, otherwise returns `onNone`\n *\n * @param self - The `Option` to get the value of.\n * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(Option.some(1), Option.getOrElse(() => 0)), 1)\n * assert.deepStrictEqual(pipe(Option.none(), Option.getOrElse(() => 0)), 0)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrElse = /*#__PURE__*/dual(2, (self, onNone) => isNone(self) ? onNone() : self.value);\n/**\n * Returns the provided `Option` `that` if `self` is `None`, otherwise returns `self`.\n *\n * @param self - The first `Option` to be checked.\n * @param that - The `Option` to return if `self` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElse(() => Option.none())\n *   ),\n *   Option.none()\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElse(() => Option.none())\n *   ),\n *   Option.some('a')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElse(() => Option.some('b'))\n *   ),\n *   Option.some('b')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElse(() => Option.some('b'))\n *   ),\n *   Option.some('a')\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElse = /*#__PURE__*/dual(2, (self, that) => isNone(self) ? that() : self);\n/**\n * Returns the provided default value as `Some` if `self` is `None`, otherwise returns `self`.\n *\n * @param self - The first `Option` to be checked.\n * @param onNone - Function that returns the default value to return if the `Option` is `None`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.none(),\n *     Option.orElseSome(() => 'b')\n *   ),\n *   Option.some('b')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some('a'),\n *     Option.orElseSome(() => 'b')\n *   ),\n *   Option.some('a')\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElseSome = /*#__PURE__*/dual(2, (self, onNone) => isNone(self) ? some(onNone()) : self);\n/**\n * Similar to `orElse`, but instead of returning a simple union, it returns an `Either` object,\n * which contains information about which of the two `Option`s has been chosen.\n *\n * This is useful when it's important to know whether the value was retrieved from the first `Option` or the second option.\n *\n * @param self - The first `Option` to be checked.\n * @param that - The second `Option` to be considered if the first `Option` is `None`.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElseEither = /*#__PURE__*/dual(2, (self, that) => isNone(self) ? map(that(), either.right) : map(self, either.left));\n/**\n * Given an `Iterable` collection of `Option`s, returns the first `Some` found in the collection.\n *\n * @param collection - An iterable collection of `Option` to be searched.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.firstSomeOf([Option.none(), Option.some(1), Option.some(2)]), Option.some(1))\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const firstSomeOf = collection => {\n  let out = none();\n  for (out of collection) {\n    if (isSome(out)) {\n      return out;\n    }\n  }\n  return out;\n};\n/**\n * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise\n * returns the value wrapped in a `Some`.\n *\n * @param nullableValue - The nullable value to be converted to an `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.fromNullable(undefined), Option.none())\n * assert.deepStrictEqual(Option.fromNullable(null), Option.none())\n * assert.deepStrictEqual(Option.fromNullable(1), Option.some(1))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromNullable = nullableValue => nullableValue == null ? none() : some(nullableValue);\n/**\n * This API is useful for lifting a function that returns `null` or `undefined` into the `Option` context.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parse = (s: string): number | undefined => {\n *   const n = parseFloat(s)\n *   return isNaN(n) ? undefined : n\n * }\n *\n * const parseOption = Option.liftNullable(parse)\n *\n * assert.deepStrictEqual(parseOption('1'), Option.some(1))\n * assert.deepStrictEqual(parseOption('not a number'), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const liftNullable = f => (...a) => fromNullable(f(...a));\n/**\n * Returns the value of the `Option` if it is a `Some`, otherwise returns `null`.\n *\n * @param self - The `Option` to extract the value from.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrNull(Option.some(1)), 1)\n * assert.deepStrictEqual(Option.getOrNull(Option.none()), null)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrNull = /*#__PURE__*/getOrElse(constNull);\n/**\n * Returns the value of the `Option` if it is a `Some`, otherwise returns `undefined`.\n *\n * @param self - The `Option` to extract the value from.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrUndefined(Option.some(1)), 1)\n * assert.deepStrictEqual(Option.getOrUndefined(Option.none()), undefined)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrUndefined = /*#__PURE__*/getOrElse(constUndefined);\n/**\n * A utility function that lifts a function that throws exceptions into a function that returns an `Option`.\n *\n * This function is useful for any function that might throw an exception, allowing the developer to handle\n * the exception in a more functional way.\n *\n * @param f - the function that can throw exceptions.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const parse = Option.liftThrowable(JSON.parse)\n *\n * assert.deepStrictEqual(parse(\"1\"), Option.some(1))\n * assert.deepStrictEqual(parse(\"\"), Option.none())\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const liftThrowable = f => (...a) => {\n  try {\n    return some(f(...a));\n  } catch (e) {\n    return none();\n  }\n};\n/**\n * Extracts the value of an `Option` or throws if the `Option` is `None`.\n *\n * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n *\n * @param self - The `Option` to extract the value from.\n * @param onNone - A function that will be called if the `Option` is `None`. It returns the error to be thrown.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Option.getOrThrowWith(Option.some(1), () => new Error('Unexpected None')),\n *   1\n * )\n * assert.throws(() => Option.getOrThrowWith(Option.none(), () => new Error('Unexpected None')))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getOrThrowWith = /*#__PURE__*/dual(2, (self, onNone) => {\n  if (isSome(self)) {\n    return self.value;\n  }\n  throw onNone();\n});\n/**\n * Extracts the value of an `Option` or throws if the `Option` is `None`.\n *\n * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.\n *\n * @param self - The `Option` to extract the value from.\n * @throws `Error(\"getOrThrow called on a None\")`\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.getOrThrow(Option.some(1)), 1)\n * assert.throws(() => Option.getOrThrow(Option.none()))\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const getOrThrow = /*#__PURE__*/getOrThrowWith(() => new Error(\"getOrThrow called on a None\"));\n/**\n * Maps the `Some` side of an `Option` value to a new `Option` value.\n *\n * @param self - An `Option` to map\n * @param f - The function to map over the value of the `Option`\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const map = /*#__PURE__*/dual(2, (self, f) => isNone(self) ? none() : some(f(self.value)));\n/**\n * Maps the `Some` value of this `Option` to the specified constant value.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const as = /*#__PURE__*/dual(2, (self, b) => map(self, () => b));\n/**\n * Maps the `Some` value of this `Option` to the `void` constant value.\n *\n * This is useful when the value of the `Option` is not needed, but the presence or absence of the value is important.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const asVoid = /*#__PURE__*/as(undefined);\nconst void_ = /*#__PURE__*/some(undefined);\nexport {\n/**\n * @since 2.0.0\n */\nvoid_ as void };\n/**\n * Applies a function to the value of an `Option` and flattens the result, if the input is `Some`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap = /*#__PURE__*/dual(2, (self, f) => isNone(self) ? none() : f(self.value));\n/**\n * Executes a sequence of two `Option`s. The second `Option` can be dependent on the result of the first `Option`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const andThen = /*#__PURE__*/dual(2, (self, f) => flatMap(self, a => {\n  const b = isFunction(f) ? f(a) : f;\n  return isOption(b) ? b : some(b);\n}));\n/**\n * This is `flatMap` + `fromNullable`, useful when working with optional values.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * interface Employee {\n *   company?: {\n *     address?: {\n *       street?: {\n *         name?: string\n *       }\n *     }\n *   }\n * }\n *\n * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some(employee1),\n *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n *   ),\n *   Option.some('high street')\n * )\n *\n * const employee2: Employee = { company: { address: { street: {} } } }\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Option.some(employee2),\n *     Option.flatMapNullable(employee => employee.company?.address?.street?.name),\n *   ),\n *   Option.none()\n * )\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMapNullable = /*#__PURE__*/dual(2, (self, f) => isNone(self) ? none() : fromNullable(f(self.value)));\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatten = /*#__PURE__*/flatMap(identity);\n/**\n * @category zipping\n * @since 2.0.0\n */\nexport const zipRight = /*#__PURE__*/dual(2, (self, that) => flatMap(self, () => that));\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const composeK = /*#__PURE__*/dual(2, (afb, bfc) => a => flatMap(afb(a), bfc));\n/**\n * Sequences the specified `that` `Option` but ignores its value.\n *\n * It is useful when we want to chain multiple operations, but only care about the result of `self`.\n *\n * @param that - The `Option` that will be ignored in the chain and discarded\n * @param self - The `Option` we care about\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipLeft = /*#__PURE__*/dual(2, (self, that) => tap(self, () => that));\n/**\n * Applies the provided function `f` to the value of the `Option` if it is `Some` and returns the original `Option`\n * unless `f` returns `None`, in which case it returns `None`.\n *\n * This function is useful for performing additional computations on the value of the input `Option` without affecting its value.\n *\n * @param f - Function to apply to the value of the `Option` if it is `Some`\n * @param self - The `Option` to apply the function to\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const getInteger = (n: number) => Number.isInteger(n) ? Option.some(n) : Option.none()\n *\n * assert.deepStrictEqual(Option.tap(Option.none(), getInteger), Option.none())\n * assert.deepStrictEqual(Option.tap(Option.some(1), getInteger), Option.some(1))\n * assert.deepStrictEqual(Option.tap(Option.some(1.14), getInteger), Option.none())\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const tap = /*#__PURE__*/dual(2, (self, f) => flatMap(self, a => map(f(a), () => a)));\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product = (self, that) => isSome(self) && isSome(that) ? some([self.value, that.value]) : none();\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = (self, collection) => {\n  if (isNone(self)) {\n    return none();\n  }\n  const out = [self.value];\n  for (const o of collection) {\n    if (isNone(o)) {\n      return none();\n    }\n    out.push(o.value);\n  }\n  return some(out);\n};\n/**\n * Takes a structure of `Option`s and returns an `Option` of values with the same structure.\n *\n * - If a tuple is supplied, then the returned `Option` will contain a tuple with the same length.\n * - If a struct is supplied, then the returned `Option` will contain a struct with the same keys.\n * - If an iterable is supplied, then the returned `Option` will contain an array.\n *\n * @param fields - the struct of `Option`s to be sequenced.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.all([Option.some(1), Option.some(2)]), Option.some([1, 2]))\n * assert.deepStrictEqual(Option.all({ a: Option.some(1), b: Option.some(\"hello\") }), Option.some({ a: 1, b: \"hello\" }))\n * assert.deepStrictEqual(Option.all({ a: Option.some(1), b: Option.none() }), Option.none())\n *\n * @category combining\n * @since 2.0.0\n */\n// @ts-expect-error\nexport const all = input => {\n  if (Symbol.iterator in input) {\n    const out = [];\n    for (const o of input) {\n      if (isNone(o)) {\n        return none();\n      }\n      out.push(o.value);\n    }\n    return some(out);\n  }\n  const out = {};\n  for (const key of Object.keys(input)) {\n    const o = input[key];\n    if (isNone(o)) {\n      return none();\n    }\n    out[key] = o.value;\n  }\n  return some(out);\n};\n/**\n * Zips two `Option` values together using a provided function, returning a new `Option` of the result.\n *\n * @param self - The left-hand side of the zip operation\n * @param that - The right-hand side of the zip operation\n * @param f - The function used to combine the values of the two `Option`s\n *\n * @example\n * import { Option } from \"effect\"\n *\n * type Complex = [real: number, imaginary: number]\n *\n * const complex = (real: number, imaginary: number): Complex => [real, imaginary]\n *\n * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.none(), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.none(), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.none(), Option.some(1), complex), Option.none())\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), Option.some(2), complex), Option.some([1, 2]))\n *\n * assert.deepStrictEqual(Option.zipWith(Option.some(1), complex)(Option.some(2)), Option.some([2, 1]))\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith = /*#__PURE__*/dual(3, (self, that, f) => map(product(self, that), ([a, b]) => f(a, b)));\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const ap = /*#__PURE__*/dual(2, (self, that) => zipWith(self, that, (f, a) => f(a)));\n/**\n * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, elements that are `None` are ignored.\n *\n * @param self - The Iterable of `Option<A>` to be reduced.\n * @param b - The initial value of the accumulator.\n * @param f - The reducing function that takes the current accumulator value and the unwrapped value of an `Option<A>`.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * const iterable = [Option.some(1), Option.none(), Option.some(2), Option.none()]\n * assert.deepStrictEqual(pipe(iterable, Option.reduceCompact(0, (b, a) => b + a)), 3)\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduceCompact = /*#__PURE__*/dual(3, (self, b, f) => {\n  let out = b;\n  for (const oa of self) {\n    if (isSome(oa)) {\n      out = f(out, oa.value);\n    }\n  }\n  return out;\n});\n/**\n * Transforms an `Option` into an `Array`.\n * If the input is `None`, an empty array is returned.\n * If the input is `Some`, the value is wrapped in an array.\n *\n * @param self - The `Option` to convert to an array.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * assert.deepStrictEqual(Option.toArray(Option.some(1)), [1])\n * assert.deepStrictEqual(Option.toArray(Option.none()), [])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toArray = self => isNone(self) ? [] : [self.value];\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap = /*#__PURE__*/dual(2, (self, f) => {\n  if (isNone(self)) {\n    return [none(), none()];\n  }\n  const e = f(self.value);\n  return either.isLeft(e) ? [some(e.left), none()] : [none(), some(e.right)];\n});\n/**\n * Maps over the value of an `Option` and filters out `None`s.\n *\n * Useful when in addition to filtering you also want to change the type of the `Option`.\n *\n * @param self - The `Option` to map over.\n * @param f - A function to apply to the value of the `Option`.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const evenNumber = (n: number) => n % 2 === 0 ? Option.some(n) : Option.none()\n *\n * assert.deepStrictEqual(Option.filterMap(Option.none(), evenNumber), Option.none())\n * assert.deepStrictEqual(Option.filterMap(Option.some(3), evenNumber), Option.none())\n * assert.deepStrictEqual(Option.filterMap(Option.some(2), evenNumber), Option.some(2))\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMap = /*#__PURE__*/dual(2, (self, f) => isNone(self) ? none() : f(self.value));\n/**\n * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.\n *\n * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.\n *\n * @param predicate - A predicate function to apply to the `Option` value.\n * @param fb - The `Option` to filter.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * // predicate\n * const isEven = (n: number) => n % 2 === 0\n *\n * assert.deepStrictEqual(Option.filter(Option.none(), isEven), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(3), isEven), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(2), isEven), Option.some(2))\n *\n * // refinement\n * const isNumber = (v: unknown): v is number => typeof v === \"number\"\n *\n * assert.deepStrictEqual(Option.filter(Option.none(), isNumber), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some('hello'), isNumber), Option.none())\n * assert.deepStrictEqual(Option.filter(Option.some(2), isNumber), Option.some(2))\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filter = /*#__PURE__*/dual(2, (self, predicate) => filterMap(self, b => predicate(b) ? option.some(b) : option.none));\n/**\n * @example\n * import { Option, Number } from \"effect\"\n *\n * const isEquivalent = Option.getEquivalence(Number.Equivalence)\n * assert.deepStrictEqual(isEquivalent(Option.none(), Option.none()), true)\n * assert.deepStrictEqual(isEquivalent(Option.none(), Option.some(1)), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.none()), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.some(2)), false)\n * assert.deepStrictEqual(isEquivalent(Option.some(1), Option.some(1)), true)\n *\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = isEquivalent => Equivalence.make((x, y) => isNone(x) ? isNone(y) : isNone(y) ? false : isEquivalent(x.value, y.value));\n/**\n * The `Order` instance allows `Option` values to be compared with\n * `compare`, whenever there is an `Order` instance for\n * the type the `Option` contains.\n *\n * `None` is considered to be less than any `Some` value.\n *\n * @example\n * import { pipe, Option, Number } from \"effect\"\n *\n * const O = Option.getOrder(Number.Order)\n * assert.deepStrictEqual(O(Option.none(), Option.none()), 0)\n * assert.deepStrictEqual(O(Option.none(), Option.some(1)), -1)\n * assert.deepStrictEqual(O(Option.some(1), Option.none()), 1)\n * assert.deepStrictEqual(O(Option.some(1), Option.some(2)), -1)\n * assert.deepStrictEqual(O(Option.some(1), Option.some(1)), 0)\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const getOrder = O => order.make((self, that) => isSome(self) ? isSome(that) ? O(self.value, that.value) : 1 : -1);\n/**\n * Lifts a binary function into `Option`.\n *\n * @param f - The function to lift.\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const lift2 = f => dual(2, (self, that) => zipWith(self, that, f));\n/**\n * Transforms a `Predicate` function into a `Some` of the input value if the predicate returns `true` or `None`\n * if the predicate returns `false`.\n *\n * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n *\n * @example\n * import { Option } from \"effect\"\n *\n * const getOption = Option.liftPredicate((n: number) => n >= 0)\n *\n * assert.deepStrictEqual(getOption(-1), Option.none())\n * assert.deepStrictEqual(getOption(1), Option.some(1))\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftPredicate = /*#__PURE__*/dual(2, (b, predicate) => predicate(b) ? some(b) : none());\n/**\n * Returns a function that checks if a `Option` contains a given value using a provided `isEquivalent` function.\n *\n * @param equivalent - An `Equivalence` instance to compare values of the `Option`.\n * @param self - The `Option` to apply the comparison to.\n * @param a - The value to compare against the `Option`.\n *\n * @example\n * import { pipe, Option, Number } from \"effect\"\n *\n * assert.deepStrictEqual(pipe(Option.some(2), Option.containsWith(Number.Equivalence)(2)), true)\n * assert.deepStrictEqual(pipe(Option.some(1), Option.containsWith(Number.Equivalence)(2)), false)\n * assert.deepStrictEqual(pipe(Option.none(), Option.containsWith(Number.Equivalence)(2)), false)\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith = isEquivalent => dual(2, (self, a) => isNone(self) ? false : isEquivalent(self.value, a));\nconst _equivalence = /*#__PURE__*/Equal.equivalence();\n/**\n * Returns a function that checks if an `Option` contains a given value using the default `Equivalence`.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains = /*#__PURE__*/containsWith(_equivalence);\n/**\n * Check if a value in an `Option` type meets a certain predicate.\n *\n * @param self - The `Option` to check.\n * @param predicate - The condition to check.\n *\n * @example\n * import { pipe, Option } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n *\n * assert.deepStrictEqual(pipe(Option.some(2), Option.exists(isEven)), true)\n * assert.deepStrictEqual(pipe(Option.some(1), Option.exists(isEven)), false)\n * assert.deepStrictEqual(pipe(Option.none(), Option.exists(isEven)), false)\n *\n * @since 2.0.0\n */\nexport const exists = /*#__PURE__*/dual(2, (self, refinement) => isNone(self) ? false : refinement(self.value));\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bindTo = /*#__PURE__*/doNotation.bindTo(map);\nconst let_ = /*#__PURE__*/doNotation.let_(map);\nexport {\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link bindTo}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nlet_ as let };\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bind = /*#__PURE__*/doNotation.bind(map, flatMap);\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Option` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Option, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Option.Do,\n *   Option.bind(\"x\", () => Option.some(2)),\n *   Option.bind(\"y\", () => Option.some(3)),\n *   Option.let(\"sum\", ({ x, y }) => x + y),\n *   Option.filter(({ x, y }) => x * y > 5)\n * )\n * assert.deepStrictEqual(result, Option.some({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const Do = /*#__PURE__*/some({});\nconst adapter = /*#__PURE__*/Gen.adapter();\n/**\n * @category generators\n * @since 2.0.0\n */\nexport const gen = (...args) => {\n  let f;\n  if (args.length === 1) {\n    f = args[0];\n  } else {\n    f = args[1].bind(args[0]);\n  }\n  const iterator = f(adapter);\n  let state = iterator.next();\n  if (state.done) {\n    return some(state.value);\n  } else {\n    let current = state.value;\n    if (Gen.isGenKind(current)) {\n      current = current.value;\n    } else {\n      current = Gen.yieldWrapGet(current);\n    }\n    if (isNone(current)) {\n      return current;\n    }\n    while (!state.done) {\n      state = iterator.next(current.value);\n      if (!state.done) {\n        current = state.value;\n        if (Gen.isGenKind(current)) {\n          current = current.value;\n        } else {\n          current = Gen.yieldWrapGet(current);\n        }\n        if (isNone(current)) {\n          return current;\n        }\n      }\n    }\n    return some(state.value);\n  }\n};\n//# sourceMappingURL=Option.js.map","/**\n * This module provides utility functions for working with Iterables in TypeScript.\n *\n * @since 2.0.0\n */\nimport * as E from \"./Either.js\";\nimport * as Equal from \"./Equal.js\";\nimport { dual, identity } from \"./Function.js\";\nimport * as O from \"./Option.js\";\nimport { isBoolean } from \"./Predicate.js\";\nimport * as Tuple from \"./Tuple.js\";\n/**\n * Return a `Iterable` with element `i` initialized with `f(i)`.\n *\n * If the `length` is not specified, the `Iterable` will be infinite.\n *\n * **Note**. `length` is normalized to an integer >= 1.\n *\n * @example\n * import { makeBy } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(Array.from(makeBy(n => n * 2, { length: 5 })), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const makeBy = (f, options) => {\n  const max = options?.length !== undefined ? Math.max(1, Math.floor(options.length)) : Infinity;\n  return {\n    [Symbol.iterator]() {\n      let i = 0;\n      return {\n        next() {\n          if (i < max) {\n            return {\n              value: f(i++),\n              done: false\n            };\n          }\n          return {\n            done: true,\n            value: undefined\n          };\n        }\n      };\n    }\n  };\n};\n/**\n * Return a `Iterable` containing a range of integers, including both endpoints.\n *\n * If `end` is omitted, the range will not have an upper bound.\n *\n * @example\n * import { range } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(Array.from(range(1, 3)), [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const range = (start, end) => {\n  if (end === undefined) {\n    return makeBy(i => start + i);\n  }\n  return makeBy(i => start + i, {\n    length: start <= end ? end - start + 1 : 1\n  });\n};\n/**\n * Return a `Iterable` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @example\n * import { replicate } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(Array.from(replicate(\"a\", 3)), [\"a\", \"a\", \"a\"])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const replicate = /*#__PURE__*/dual(2, (a, n) => makeBy(() => a, {\n  length: n\n}));\n/**\n * Takes a record and returns an Iterable of tuples containing its keys and values.\n *\n * @param self - The record to transform.\n *\n * @example\n * import { fromRecord } from \"effect/Iterable\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(Array.from(fromRecord(x)), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromRecord = self => ({\n  *[Symbol.iterator]() {\n    for (const key in self) {\n      if (Object.prototype.hasOwnProperty.call(self, key)) {\n        yield [key, self[key]];\n      }\n    }\n  }\n});\n/**\n * Prepend an element to the front of an `Iterable`, creating a new `Iterable`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend = /*#__PURE__*/dual(2, (self, head) => prependAll(self, [head]));\n/**\n * Prepends the specified prefix iterable to the beginning of the specified iterable.\n *\n * @example\n * import { Iterable } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.prependAll([1, 2], [\"a\", \"b\"])),\n *   [\"a\", \"b\", 1, 2]\n * )\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll = /*#__PURE__*/dual(2, (self, that) => appendAll(that, self));\n/**\n * Append an element to the end of an `Iterable`, creating a new `Iterable`.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append = /*#__PURE__*/dual(2, (self, last) => appendAll(self, [last]));\n/**\n * Concatenates two iterables, combining their elements.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll = /*#__PURE__*/dual(2, (self, that) => ({\n  [Symbol.iterator]() {\n    const iterA = self[Symbol.iterator]();\n    let doneA = false;\n    let iterB;\n    return {\n      next() {\n        if (!doneA) {\n          const r = iterA.next();\n          if (r.done) {\n            doneA = true;\n            iterB = that[Symbol.iterator]();\n            return iterB.next();\n          }\n          return r;\n        }\n        return iterB.next();\n      }\n    };\n  }\n}));\n/**\n * Reduce an `Iterable` from the left, keeping all intermediate results instead of only the final result.\n *\n * @category folding\n * @since 2.0.0\n */\nexport const scan = /*#__PURE__*/dual(3, (self, b, f) => ({\n  [Symbol.iterator]() {\n    let acc = b;\n    let iterator;\n    function next() {\n      if (iterator === undefined) {\n        iterator = self[Symbol.iterator]();\n        return {\n          done: false,\n          value: acc\n        };\n      }\n      const result = iterator.next();\n      if (result.done) {\n        return result;\n      }\n      acc = f(acc, result.value);\n      return {\n        done: false,\n        value: acc\n      };\n    }\n    return {\n      next\n    };\n  }\n}));\n/**\n * Determine if an `Iterable` is empty\n *\n * @example\n * import { isEmpty } from \"effect/Iterable\"\n *\n * assert.deepStrictEqual(isEmpty([]), true);\n * assert.deepStrictEqual(isEmpty([1, 2, 3]), false);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmpty = self => {\n  const iterator = self[Symbol.iterator]();\n  return iterator.next().done === true;\n};\n/**\n * Return the number of elements in a `Iterable`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const size = self => {\n  const iterator = self[Symbol.iterator]();\n  let count = 0;\n  while (!iterator.next().done) {\n    count++;\n  }\n  return count;\n};\n/**\n * Get the first element of a `Iterable`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const head = self => {\n  const iterator = self[Symbol.iterator]();\n  const result = iterator.next();\n  return result.done ? O.none() : O.some(result.value);\n};\n/**\n * Get the first element of a `Iterable`, or throw an error if the `Iterable` is empty.\n *\n * @category getters\n * @since 3.3.0\n */\nexport const unsafeHead = self => {\n  const iterator = self[Symbol.iterator]();\n  const result = iterator.next();\n  if (result.done) throw new Error(\"unsafeHead: empty iterable\");\n  return result.value;\n};\n/**\n * Keep only a max number of elements from the start of an `Iterable`, creating a new `Iterable`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const take = /*#__PURE__*/dual(2, (self, n) => ({\n  [Symbol.iterator]() {\n    let i = 0;\n    const iterator = self[Symbol.iterator]();\n    return {\n      next() {\n        if (i < n) {\n          i++;\n          return iterator.next();\n        }\n        return {\n          done: true,\n          value: undefined\n        };\n      }\n    };\n  }\n}));\n/**\n * Calculate the longest initial Iterable for which all element satisfy the specified predicate, creating a new `Iterable`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const takeWhile = /*#__PURE__*/dual(2, (self, predicate) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let i = 0;\n    return {\n      next() {\n        const result = iterator.next();\n        if (result.done || !predicate(result.value, i++)) {\n          return {\n            done: true,\n            value: undefined\n          };\n        }\n        return result;\n      }\n    };\n  }\n}));\n/**\n * Drop a max number of elements from the start of an `Iterable`\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const drop = /*#__PURE__*/dual(2, (self, n) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let i = 0;\n    return {\n      next() {\n        while (i < n) {\n          const result = iterator.next();\n          if (result.done) {\n            return {\n              done: true,\n              value: undefined\n            };\n          }\n          i++;\n        }\n        return iterator.next();\n      }\n    };\n  }\n}));\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst = /*#__PURE__*/dual(2, (self, f) => {\n  let i = 0;\n  for (const a of self) {\n    const o = f(a, i);\n    if (isBoolean(o)) {\n      if (o) {\n        return O.some(a);\n      }\n    } else {\n      if (O.isSome(o)) {\n        return o;\n      }\n    }\n    i++;\n  }\n  return O.none();\n});\n/**\n * Find the last element for which a predicate holds.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLast = /*#__PURE__*/dual(2, (self, f) => {\n  let i = 0;\n  let last = O.none();\n  for (const a of self) {\n    const o = f(a, i);\n    if (isBoolean(o)) {\n      if (o) {\n        last = O.some(a);\n      }\n    } else {\n      if (O.isSome(o)) {\n        last = o;\n      }\n    }\n    i++;\n  }\n  return last;\n});\n/**\n * Takes two `Iterable`s and returns an `Iterable` of corresponding pairs.\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zip = /*#__PURE__*/dual(2, (self, that) => zipWith(self, that, Tuple.make));\n/**\n * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results. If one\n * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith = /*#__PURE__*/dual(3, (self, that, f) => ({\n  [Symbol.iterator]() {\n    const selfIterator = self[Symbol.iterator]();\n    const thatIterator = that[Symbol.iterator]();\n    return {\n      next() {\n        const selfResult = selfIterator.next();\n        const thatResult = thatIterator.next();\n        if (selfResult.done || thatResult.done) {\n          return {\n            done: true,\n            value: undefined\n          };\n        }\n        return {\n          done: false,\n          value: f(selfResult.value, thatResult.value)\n        };\n      }\n    };\n  }\n}));\n/**\n * Places an element in between members of an `Iterable`.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * @since 2.0.0\n */\nexport const intersperse = /*#__PURE__*/dual(2, (self, middle) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let next = iterator.next();\n    let emitted = false;\n    return {\n      next() {\n        if (next.done) {\n          return next;\n        } else if (emitted) {\n          emitted = false;\n          return {\n            done: false,\n            value: middle\n          };\n        }\n        emitted = true;\n        const result = next;\n        next = iterator.next();\n        return result;\n      }\n    };\n  }\n}));\n/**\n * Returns a function that checks if an `Iterable` contains a given value using a provided `isEquivalent` function.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith = isEquivalent => dual(2, (self, a) => {\n  for (const i of self) {\n    if (isEquivalent(a, i)) {\n      return true;\n    }\n  }\n  return false;\n});\nconst _equivalence = /*#__PURE__*/Equal.equivalence();\n/**\n * Returns a function that checks if a `Iterable` contains a given value using the default `Equivalence`.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains = /*#__PURE__*/containsWith(_equivalence);\n/**\n * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `Iterable`.\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const chunksOf = /*#__PURE__*/dual(2, (self, n) => {\n  const safeN = Math.max(1, Math.floor(n));\n  return {\n    [Symbol.iterator]() {\n      let iterator = self[Symbol.iterator]();\n      return {\n        next() {\n          if (iterator === undefined) {\n            return {\n              done: true,\n              value: undefined\n            };\n          }\n          const chunk = [];\n          for (let i = 0; i < safeN; i++) {\n            const result = iterator.next();\n            if (result.done) {\n              iterator = undefined;\n              return chunk.length === 0 ? {\n                done: true,\n                value: undefined\n              } : {\n                done: false,\n                value: chunk\n              };\n            }\n            chunk.push(result.value);\n          }\n          return {\n            done: false,\n            value: chunk\n          };\n        }\n      };\n    }\n  };\n});\n/**\n * Group equal, consecutive elements of an `Iterable` into `NonEmptyArray`s using the provided `isEquivalent` function.\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupWith = /*#__PURE__*/dual(2, (self, isEquivalent) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let nextResult;\n    return {\n      next() {\n        let result;\n        if (nextResult !== undefined) {\n          if (nextResult.done) {\n            return {\n              done: true,\n              value: undefined\n            };\n          }\n          result = nextResult;\n          nextResult = undefined;\n        } else {\n          result = iterator.next();\n          if (result.done) {\n            return {\n              done: true,\n              value: undefined\n            };\n          }\n        }\n        const chunk = [result.value];\n        while (true) {\n          const next = iterator.next();\n          if (next.done || !isEquivalent(result.value, next.value)) {\n            nextResult = next;\n            return {\n              done: false,\n              value: chunk\n            };\n          }\n          chunk.push(next.value);\n        }\n      }\n    };\n  }\n}));\n/**\n * Group equal, consecutive elements of an `Iterable` into `NonEmptyArray`s.\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const group = /*#__PURE__*/groupWith( /*#__PURE__*/Equal.equivalence());\n/**\n * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupBy = /*#__PURE__*/dual(2, (self, f) => {\n  const out = {};\n  for (const a of self) {\n    const k = f(a);\n    if (Object.prototype.hasOwnProperty.call(out, k)) {\n      out[k].push(a);\n    } else {\n      out[k] = [a];\n    }\n  }\n  return out;\n});\nconst constEmpty = {\n  [Symbol.iterator]() {\n    return constEmptyIterator;\n  }\n};\nconst constEmptyIterator = {\n  next() {\n    return {\n      done: true,\n      value: undefined\n    };\n  }\n};\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const empty = () => constEmpty;\n/**\n * Constructs a new `Iterable<A>` from the specified value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const of = a => [a];\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const map = /*#__PURE__*/dual(2, (self, f) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let i = 0;\n    return {\n      next() {\n        const result = iterator.next();\n        if (result.done) {\n          return {\n            done: true,\n            value: undefined\n          };\n        }\n        return {\n          done: false,\n          value: f(result.value, i++)\n        };\n      }\n    };\n  }\n}));\n/**\n * Applies a function to each element in an Iterable and returns a new Iterable containing the concatenated mapped elements.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap = /*#__PURE__*/dual(2, (self, f) => flatten(map(self, f)));\n/**\n * Flattens an Iterable of Iterables into a single Iterable\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatten = self => ({\n  [Symbol.iterator]() {\n    const outerIterator = self[Symbol.iterator]();\n    let innerIterator;\n    function next() {\n      if (innerIterator === undefined) {\n        const next = outerIterator.next();\n        if (next.done) {\n          return next;\n        }\n        innerIterator = next.value[Symbol.iterator]();\n      }\n      const result = innerIterator.next();\n      if (result.done) {\n        innerIterator = undefined;\n        return next();\n      }\n      return result;\n    }\n    return {\n      next\n    };\n  }\n});\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMap = /*#__PURE__*/dual(2, (self, f) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let i = 0;\n    return {\n      next() {\n        let result = iterator.next();\n        while (!result.done) {\n          const b = f(result.value, i++);\n          if (O.isSome(b)) {\n            return {\n              done: false,\n              value: b.value\n            };\n          }\n          result = iterator.next();\n        }\n        return {\n          done: true,\n          value: undefined\n        };\n      }\n    };\n  }\n}));\n/**\n * Transforms all elements of the `Iterable` for as long as the specified function returns some value\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMapWhile = /*#__PURE__*/dual(2, (self, f) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let i = 0;\n    return {\n      next() {\n        const result = iterator.next();\n        if (result.done) {\n          return {\n            done: true,\n            value: undefined\n          };\n        }\n        const b = f(result.value, i++);\n        if (O.isSome(b)) {\n          return {\n            done: false,\n            value: b.value\n          };\n        }\n        return {\n          done: true,\n          value: undefined\n        };\n      }\n    };\n  }\n}));\n/**\n * Retrieves the `Some` values from an `Iterable` of `Option`s.\n *\n * @example\n * import { Iterable, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.getSomes([Option.some(1), Option.none(), Option.some(2)])),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getSomes = /*#__PURE__*/filterMap(identity);\n/**\n * Retrieves the `Left` values from an `Iterable` of `Either`s.\n *\n * @example\n * import { Iterable, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.getLefts([Either.right(1), Either.left(\"err\"), Either.right(2)])),\n *   [\"err\"]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getLefts = self => filterMap(self, E.getLeft);\n/**\n * Retrieves the `Right` values from an `Iterable` of `Either`s.\n *\n * @example\n * import { Iterable, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.from(Iterable.getRights([Either.right(1), Either.left(\"err\"), Either.right(2)])),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getRights = self => filterMap(self, E.getRight);\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const filter = /*#__PURE__*/dual(2, (self, predicate) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let i = 0;\n    return {\n      next() {\n        let result = iterator.next();\n        while (!result.done) {\n          if (predicate(result.value, i++)) {\n            return {\n              done: false,\n              value: result.value\n            };\n          }\n          result = iterator.next();\n        }\n        return {\n          done: true,\n          value: undefined\n        };\n      }\n    };\n  }\n}));\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMapNullable = /*#__PURE__*/dual(2, (self, f) => filterMap(self, a => {\n  const b = f(a);\n  return b == null ? O.none() : O.some(b);\n}));\n/**\n * Check if a predicate holds true for some `Iterable` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const some = /*#__PURE__*/dual(2, (self, predicate) => {\n  let i = 0;\n  for (const a of self) {\n    if (predicate(a, i++)) {\n      return true;\n    }\n  }\n  return false;\n});\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const unfold = (b, f) => ({\n  [Symbol.iterator]() {\n    let next = b;\n    return {\n      next() {\n        const o = f(next);\n        if (O.isNone(o)) {\n          return {\n            done: true,\n            value: undefined\n          };\n        }\n        const [a, b] = o.value;\n        next = b;\n        return {\n          done: false,\n          value: a\n        };\n      }\n    };\n  }\n});\n/**\n * Iterate over the `Iterable` applying `f`.\n *\n * @since 2.0.0\n */\nexport const forEach = /*#__PURE__*/dual(2, (self, f) => {\n  let i = 0;\n  for (const a of self) {\n    f(a, i++);\n  }\n});\n/**\n * @category folding\n * @since 2.0.0\n */\nexport const reduce = /*#__PURE__*/dual(3, (self, b, f) => {\n  if (Array.isArray(self)) {\n    return self.reduce(f, b);\n  }\n  let i = 0;\n  let result = b;\n  for (const n of self) {\n    result = f(result, n, i++);\n  }\n  return result;\n});\n/**\n * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacentWith = /*#__PURE__*/dual(2, (self, isEquivalent) => ({\n  [Symbol.iterator]() {\n    const iterator = self[Symbol.iterator]();\n    let first = true;\n    let last;\n    function next() {\n      const result = iterator.next();\n      if (result.done) {\n        return {\n          done: true,\n          value: undefined\n        };\n      }\n      if (first) {\n        first = false;\n        last = result.value;\n        return result;\n      }\n      const current = result.value;\n      if (isEquivalent(last, current)) {\n        return next();\n      }\n      last = current;\n      return result;\n    }\n    return {\n      next\n    };\n  }\n}));\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacent = /*#__PURE__*/dedupeAdjacentWith( /*#__PURE__*/Equal.equivalence());\n/**\n * Zips this Iterable crosswise with the specified Iterable using the specified combiner.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesianWith = /*#__PURE__*/dual(3, (self, that, f) => flatMap(self, a => map(that, b => f(a, b))));\n/**\n * Zips this Iterable crosswise with the specified Iterable.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesian = /*#__PURE__*/dual(2, (self, that) => cartesianWith(self, that, (a, b) => [a, b]));\n//# sourceMappingURL=Iterable.js.map","/**\n * This module provides an implementation of the `Order` type class which is used to define a total ordering on some type `A`.\n * An order is defined by a relation `<=`, which obeys the following laws:\n *\n * - either `x <= y` or `y <= x` (totality)\n * - if `x <= y` and `y <= x`, then `x == y` (antisymmetry)\n * - if `x <= y` and `y <= z`, then `x <= z` (transitivity)\n *\n * The truth table for compare is defined as follows:\n *\n * | `x <= y` | `x >= y` | Ordering |                       |\n * | -------- | -------- | -------- | --------------------- |\n * | `true`   | `true`   | `0`      | corresponds to x == y |\n * | `true`   | `false`  | `< 0`    | corresponds to x < y  |\n * | `false`  | `true`   | `> 0`    | corresponds to x > y  |\n *\n * @since 2.0.0\n */\nimport { dual } from \"./Function.js\";\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const make = compare => (self, that) => self === that ? 0 : compare(self, that);\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const string = /*#__PURE__*/make((self, that) => self < that ? -1 : 1);\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const number = /*#__PURE__*/make((self, that) => self < that ? -1 : 1);\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const boolean = /*#__PURE__*/make((self, that) => self < that ? -1 : 1);\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const bigint = /*#__PURE__*/make((self, that) => self < that ? -1 : 1);\n/**\n * @since 2.0.0\n */\nexport const reverse = O => make((self, that) => O(that, self));\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combine = /*#__PURE__*/dual(2, (self, that) => make((a1, a2) => {\n  const out = self(a1, a2);\n  if (out !== 0) {\n    return out;\n  }\n  return that(a1, a2);\n}));\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineMany = /*#__PURE__*/dual(2, (self, collection) => make((a1, a2) => {\n  let out = self(a1, a2);\n  if (out !== 0) {\n    return out;\n  }\n  for (const O of collection) {\n    out = O(a1, a2);\n    if (out !== 0) {\n      return out;\n    }\n  }\n  return out;\n}));\n/**\n * @since 2.0.0\n */\nexport const empty = () => make(() => 0);\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const combineAll = collection => combineMany(empty(), collection);\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapInput = /*#__PURE__*/dual(2, (self, f) => make((b1, b2) => self(f(b1), f(b2))));\n/**\n * @category instances\n * @since 2.0.0\n */\nexport const Date = /*#__PURE__*/mapInput(number, date => date.getTime());\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const product = /*#__PURE__*/dual(2, (self, that) => make(([xa, xb], [ya, yb]) => {\n  const o = self(xa, ya);\n  return o !== 0 ? o : that(xb, yb);\n}));\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const all = collection => {\n  return make((x, y) => {\n    const len = Math.min(x.length, y.length);\n    let collectionLength = 0;\n    for (const O of collection) {\n      if (collectionLength >= len) {\n        break;\n      }\n      const o = O(x[collectionLength], y[collectionLength]);\n      if (o !== 0) {\n        return o;\n      }\n      collectionLength++;\n    }\n    return 0;\n  });\n};\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const productMany = /*#__PURE__*/dual(2, (self, collection) => {\n  const O = all(collection);\n  return make((x, y) => {\n    const o = self(x[0], y[0]);\n    return o !== 0 ? o : O(x.slice(1), y.slice(1));\n  });\n});\n/**\n * Similar to `Promise.all` but operates on `Order`s.\n *\n * ```\n * [Order<A>, Order<B>, ...] -> Order<[A, B, ...]>\n * ```\n *\n * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.\n * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.\n * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element\n * of the tuple.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const tuple = (...elements) => all(elements);\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const array = O => make((self, that) => {\n  const aLen = self.length;\n  const bLen = that.length;\n  const len = Math.min(aLen, bLen);\n  for (let i = 0; i < len; i++) {\n    const o = O(self[i], that[i]);\n    if (o !== 0) {\n      return o;\n    }\n  }\n  return number(aLen, bLen);\n});\n/**\n * This function creates and returns a new `Order` for a struct of values based on the given `Order`s\n * for each property in the struct.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport const struct = fields => {\n  const keys = Object.keys(fields);\n  return make((self, that) => {\n    for (const key of keys) {\n      const o = fields[key](self[key], that[key]);\n      if (o !== 0) {\n        return o;\n      }\n    }\n    return 0;\n  });\n};\n/**\n * Test whether one value is _strictly less than_ another.\n *\n * @since 2.0.0\n */\nexport const lessThan = O => dual(2, (self, that) => O(self, that) === -1);\n/**\n * Test whether one value is _strictly greater than_ another.\n *\n * @since 2.0.0\n */\nexport const greaterThan = O => dual(2, (self, that) => O(self, that) === 1);\n/**\n * Test whether one value is _non-strictly less than_ another.\n *\n * @since 2.0.0\n */\nexport const lessThanOrEqualTo = O => dual(2, (self, that) => O(self, that) !== 1);\n/**\n * Test whether one value is _non-strictly greater than_ another.\n *\n * @since 2.0.0\n */\nexport const greaterThanOrEqualTo = O => dual(2, (self, that) => O(self, that) !== -1);\n/**\n * Take the minimum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nexport const min = O => dual(2, (self, that) => self === that || O(self, that) < 1 ? self : that);\n/**\n * Take the maximum of two values. If they are considered equal, the first argument is chosen.\n *\n * @since 2.0.0\n */\nexport const max = O => dual(2, (self, that) => self === that || O(self, that) > -1 ? self : that);\n/**\n * Clamp a value between a minimum and a maximum.\n *\n * @example\n * import { Order, Number } from \"effect\"\n *\n * const clamp = Order.clamp(Number.Order)({ minimum: 1, maximum: 5 })\n *\n * assert.equal(clamp(3), 3)\n * assert.equal(clamp(0), 1)\n * assert.equal(clamp(6), 5)\n *\n * @since 2.0.0\n */\nexport const clamp = O => dual(2, (self, options) => min(O)(options.maximum, max(O)(options.minimum, self)));\n/**\n * Test whether a value is between a minimum and a maximum (inclusive).\n *\n * @since 2.0.0\n */\nexport const between = O => dual(2, (self, options) => !lessThan(O)(self, options.minimum) && !greaterThan(O)(self, options.maximum));\n//# sourceMappingURL=Order.js.map","/**\n * This module provides utility functions for working with records in TypeScript.\n *\n * @since 2.0.0\n */\nimport * as E from \"./Either.js\";\nimport * as Equal from \"./Equal.js\";\nimport { dual, identity } from \"./Function.js\";\nimport * as Option from \"./Option.js\";\n/**\n * Creates a new, empty record.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const empty = () => ({});\n/**\n * Determine if a record is empty.\n *\n * @param self - record to test for emptiness.\n *\n * @example\n * import { isEmptyRecord } from \"effect/Record\"\n *\n * assert.deepStrictEqual(isEmptyRecord({}), true);\n * assert.deepStrictEqual(isEmptyRecord({ a: 3 }), false);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyRecord = self => keys(self).length === 0;\n/**\n * Determine if a record is empty.\n *\n * @param self - record to test for emptiness.\n *\n * @example\n * import { isEmptyReadonlyRecord } from \"effect/Record\"\n *\n * assert.deepStrictEqual(isEmptyReadonlyRecord({}), true);\n * assert.deepStrictEqual(isEmptyReadonlyRecord({ a: 3 }), false);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyReadonlyRecord = isEmptyRecord;\n/**\n * Takes an iterable and a projection function and returns a record.\n * The projection function maps each value of the iterable to a tuple of a key and a value, which is then added to the resulting record.\n *\n * @param self - An iterable of values to be mapped to a record.\n * @param f - A projection function that maps values of the iterable to a tuple of a key and a value.\n *\n * @example\n * import { fromIterableWith } from \"effect/Record\"\n *\n * const input = [1, 2, 3, 4]\n *\n * assert.deepStrictEqual(\n *   fromIterableWith(input, a => [String(a), a * 2]),\n *   { '1': 2, '2': 4, '3': 6, '4': 8 }\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterableWith = /*#__PURE__*/dual(2, (self, f) => {\n  const out = empty();\n  for (const a of self) {\n    const [k, b] = f(a);\n    out[k] = b;\n  }\n  return out;\n});\n/**\n * Creates a new record from an iterable, utilizing the provided function to determine the key for each element.\n *\n * @param items - An iterable containing elements.\n * @param f - A function that extracts the key for each element.\n *\n * @example\n * import { fromIterableBy } from \"effect/Record\"\n *\n * const users = [\n *   { id: \"2\", name: \"name2\" },\n *   { id: \"1\", name: \"name1\" }\n * ]\n *\n * assert.deepStrictEqual(\n *   fromIterableBy(users, user => user.id),\n *   {\n *     \"2\": { id: \"2\", name: \"name2\" },\n *     \"1\": { id: \"1\", name: \"name1\" }\n *   }\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterableBy = (items, f) => fromIterableWith(items, a => [f(a), a]);\n/**\n * Builds a record from an iterable of key-value pairs.\n *\n * If there are conflicting keys when using `fromEntries`, the last occurrence of the key/value pair will overwrite the\n * previous ones. So the resulting record will only have the value of the last occurrence of each key.\n *\n * @param self - The iterable of key-value pairs.\n *\n * @example\n * import { fromEntries } from \"effect/Record\"\n *\n * const input: Array<[string, number]> = [[\"a\", 1], [\"b\", 2]]\n *\n * assert.deepStrictEqual(fromEntries(input), { a: 1, b: 2 })\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const fromEntries = Object.fromEntries;\n/**\n * Transforms the values of a record into an `Array` with a custom mapping function.\n *\n * @param self - The record to transform.\n * @param f - The custom mapping function to apply to each key/value of the record.\n *\n * @example\n * import { collect } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(collect(x, (key, n) => [key, n]), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const collect = /*#__PURE__*/dual(2, (self, f) => {\n  const out = [];\n  for (const key of keys(self)) {\n    out.push(f(key, self[key]));\n  }\n  return out;\n});\n/**\n * Takes a record and returns an array of tuples containing its keys and values.\n *\n * @param self - The record to transform.\n *\n * @example\n * import { toEntries } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(toEntries(x), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const toEntries = /*#__PURE__*/collect((key, value) => [key, value]);\n/**\n * Returns the number of key/value pairs in a record.\n *\n * @param self - A record to calculate the number of key/value pairs in.\n *\n * @example\n * import { size } from \"effect/Record\";\n *\n * assert.deepStrictEqual(size({ a: \"a\", b: 1, c: true }), 3);\n *\n * @since 2.0.0\n */\nexport const size = self => keys(self).length;\n/**\n * Check if a given `key` exists in a record.\n *\n * @param self - the record to look in.\n * @param key - the key to look for in the record.\n *\n * @example\n * import { empty, has } from \"effect/Record\"\n *\n * assert.deepStrictEqual(has({ a: 1, b: 2 }, \"a\"), true);\n * assert.deepStrictEqual(has(empty<string>(), \"c\"), false);\n *\n * @since 2.0.0\n */\nexport const has = /*#__PURE__*/dual(2, (self, key) => Object.prototype.hasOwnProperty.call(self, key));\n/**\n * Retrieve a value at a particular key from a record, returning it wrapped in an `Option`.\n *\n * @param self - The record to retrieve value from.\n * @param key - Key to retrieve from record.\n *\n * @example\n * import { Record as R, Option } from \"effect\"\n *\n * const person: Record<string, unknown> = { name: \"John Doe\", age: 35 }\n *\n * assert.deepStrictEqual(R.get(person, \"name\"), Option.some(\"John Doe\"))\n * assert.deepStrictEqual(R.get(person, \"email\"), Option.none())\n *\n * @since 2.0.0\n */\nexport const get = /*#__PURE__*/dual(2, (self, key) => has(self, key) ? Option.some(self[key]) : Option.none());\n/**\n * Apply a function to the element at the specified key, creating a new record.\n * If the key does not exist, the record is returned unchanged.\n *\n * @param self - The record to be updated.\n * @param key - The key of the element to modify.\n * @param f - The function to apply to the element.\n *\n * @example\n * import { Record as R } from \"effect\"\n *\n * const f = (x: number) => x * 2\n *\n * assert.deepStrictEqual(\n *  R.modify({ a: 3 }, 'a', f),\n *  { a: 6 }\n * )\n * assert.deepStrictEqual(\n *  R.modify({ a: 3 } as Record<string, number>, 'b', f),\n *  { a: 3 }\n * )\n *\n * @since 2.0.0\n */\nexport const modify = /*#__PURE__*/dual(3, (self, key, f) => {\n  if (!has(self, key)) {\n    return {\n      ...self\n    };\n  }\n  return {\n    ...self,\n    [key]: f(self[key])\n  };\n});\n/**\n * Apply a function to the element at the specified key, creating a new record,\n * or return `None` if the key doesn't exist.\n *\n * @param self - The record to be updated.\n * @param key - The key of the element to modify.\n * @param f - The function to apply to the element.\n *\n * @example\n * import { Record as R, Option } from \"effect\"\n *\n * const f = (x: number) => x * 2\n *\n * assert.deepStrictEqual(\n *  R.modifyOption({ a: 3 }, 'a', f),\n *  Option.some({ a: 6 })\n * )\n * assert.deepStrictEqual(\n *  R.modifyOption({ a: 3 } as Record<string, number>, 'b', f),\n *  Option.none()\n * )\n *\n * @since 2.0.0\n */\nexport const modifyOption = /*#__PURE__*/dual(3, (self, key, f) => {\n  if (!has(self, key)) {\n    return Option.none();\n  }\n  return Option.some({\n    ...self,\n    [key]: f(self[key])\n  });\n});\n/**\n * Replaces a value in the record with the new value passed as parameter.\n *\n * @param self - The record to be updated.\n * @param key - The key to search for in the record.\n * @param b - The new value to replace the existing value with.\n *\n * @example\n * import { Record, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.replaceOption({ a: 1, b: 2, c: 3 }, 'a', 10),\n *   Option.some({ a: 10, b: 2, c: 3 })\n * )\n * assert.deepStrictEqual(Record.replaceOption(Record.empty<string>(), 'a', 10), Option.none())\n *\n * @since 2.0.0\n */\nexport const replaceOption = /*#__PURE__*/dual(3, (self, key, b) => modifyOption(self, key, () => b));\n/**\n * If the given key exists in the record, returns a new record with the key removed,\n * otherwise returns a copy of the original record.\n *\n * @param self - the record to remove the key from.\n * @param key - the key to remove from the record.\n *\n * @example\n * import { remove } from \"effect/Record\"\n *\n * assert.deepStrictEqual(remove({ a: 1, b: 2 }, \"a\"), { b: 2 })\n *\n * @since 2.0.0\n */\nexport const remove = /*#__PURE__*/dual(2, (self, key) => {\n  if (!has(self, key)) {\n    return {\n      ...self\n    };\n  }\n  const out = {\n    ...self\n  };\n  delete out[key];\n  return out;\n});\n/**\n * Retrieves the value of the property with the given `key` from a record and returns an `Option`\n * of a tuple with the value and the record with the removed property.\n * If the key is not present, returns `O.none`.\n *\n * @param self - The input record.\n * @param key - The key of the property to retrieve.\n *\n * @example\n * import { Record as R, Option } from \"effect\"\n *\n * assert.deepStrictEqual(R.pop({ a: 1, b: 2 }, \"a\"), Option.some([1, { b: 2 }]))\n * assert.deepStrictEqual(R.pop({ a: 1, b: 2 } as Record<string, number>, \"c\"), Option.none())\n *\n * @category record\n * @since 2.0.0\n */\nexport const pop = /*#__PURE__*/dual(2, (self, key) => has(self, key) ? Option.some([self[key], remove(self, key)]) : Option.none());\n/**\n * Maps a record into another record by applying a transformation function to each of its values.\n *\n * @param self - The record to be mapped.\n * @param f - A transformation function that will be applied to each of the values in the record.\n *\n * @example\n * import { map } from \"effect/Record\"\n *\n * const f = (n: number) => `-${n}`\n *\n * assert.deepStrictEqual(map({ a: 3, b: 5 }, f), { a: \"-3\", b: \"-5\" })\n *\n * const g = (n: number, key: string) => `${key.toUpperCase()}-${n}`\n *\n * assert.deepStrictEqual(map({ a: 3, b: 5 }, g), { a: \"A-3\", b: \"B-5\" })\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const map = /*#__PURE__*/dual(2, (self, f) => {\n  const out = {\n    ...self\n  };\n  for (const key of keys(self)) {\n    out[key] = f(self[key], key);\n  }\n  return out;\n});\n/**\n * Maps the keys of a `ReadonlyRecord` while preserving the corresponding values.\n *\n * @example\n * import { mapKeys } from \"effect/Record\"\n *\n * assert.deepStrictEqual(mapKeys({ a: 3, b: 5 }, (key) => key.toUpperCase()), { A: 3, B: 5 })\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapKeys = /*#__PURE__*/dual(2, (self, f) => {\n  const out = {};\n  for (const key of keys(self)) {\n    const a = self[key];\n    out[f(key, a)] = a;\n  }\n  return out;\n});\n/**\n * Maps entries of a `ReadonlyRecord` using the provided function, allowing modification of both keys and corresponding values.\n *\n * @example\n * import { mapEntries } from \"effect/Record\"\n *\n * assert.deepStrictEqual(mapEntries({ a: 3, b: 5 }, (a, key) => [key.toUpperCase(), a + 1]), { A: 4, B: 6 })\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapEntries = /*#__PURE__*/dual(2, (self, f) => {\n  const out = {};\n  for (const key of keys(self)) {\n    const [k, b] = f(self[key], key);\n    out[k] = b;\n  }\n  return out;\n});\n/**\n * Transforms a record into a record by applying the function `f` to each key and value in the original record.\n * If the function returns `Some`, the key-value pair is included in the output record.\n *\n * @param self - The input record.\n * @param f - The transformation function.\n *\n * @example\n * import { Record, Option } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * const f = (a: number, key: string) => a > 2 ? Option.some(a * 2) : Option.none()\n * assert.deepStrictEqual(Record.filterMap(x, f), { c: 6 })\n *\n * @since 2.0.0\n */\nexport const filterMap = /*#__PURE__*/dual(2, (self, f) => {\n  const out = empty();\n  for (const key of keys(self)) {\n    const o = f(self[key], key);\n    if (Option.isSome(o)) {\n      out[key] = o.value;\n    }\n  }\n  return out;\n});\n/**\n * Selects properties from a record whose values match the given predicate.\n *\n * @param self - The record to filter.\n * @param predicate - A function that returns a `boolean` value to determine if the entry should be included in the new record.\n *\n * @example\n * import { filter } from \"effect/Record\"\n *\n * const x = { a: 1, b: 2, c: 3, d: 4 }\n * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filter = /*#__PURE__*/dual(2, (self, predicate) => {\n  const out = empty();\n  for (const key of keys(self)) {\n    if (predicate(self[key], key)) {\n      out[key] = self[key];\n    }\n  }\n  return out;\n});\n/**\n * Given a record with `Option` values, returns a new record containing only the `Some` values, preserving the original keys.\n *\n * @param self - A record with `Option` values.\n *\n * @example\n * import { Record, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getSomes({ a: Option.some(1), b: Option.none(), c: Option.some(2) }),\n *   { a: 1, c: 2 }\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getSomes = /*#__PURE__*/filterMap(identity);\n/**\n * Given a record with `Either` values, returns a new record containing only the `Left` values, preserving the original keys.\n *\n * @example\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getLefts({ a: Either.right(1), b: Either.left(\"err\"), c: Either.right(2) }),\n *   { b: \"err\" }\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getLefts = self => {\n  const out = empty();\n  for (const key of keys(self)) {\n    const value = self[key];\n    if (E.isLeft(value)) {\n      out[key] = value.left;\n    }\n  }\n  return out;\n};\n/**\n * Given a record with `Either` values, returns a new record containing only the `Right` values, preserving the original keys.\n *\n * @example\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.getRights({ a: Either.right(1), b: Either.left(\"err\"), c: Either.right(2) }),\n *   { a: 1, c: 2 }\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getRights = self => {\n  const out = empty();\n  for (const key of keys(self)) {\n    const value = self[key];\n    if (E.isRight(value)) {\n      out[key] = value.right;\n    }\n  }\n  return out;\n};\n/**\n * Partitions the elements of a record into two groups: those that match a predicate, and those that don't.\n *\n * @param self - The record to partition.\n * @param f - The predicate function to apply to each element.\n *\n * @example\n * import { Record, Either } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * const f = (n: number) => (n % 2 === 0 ? Either.right(n) : Either.left(n))\n * assert.deepStrictEqual(Record.partitionMap(x, f), [{ a: 1, c: 3 }, { b: 2}])\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap = /*#__PURE__*/dual(2, (self, f) => {\n  const left = empty();\n  const right = empty();\n  for (const key of keys(self)) {\n    const e = f(self[key], key);\n    if (E.isLeft(e)) {\n      left[key] = e.left;\n    } else {\n      right[key] = e.right;\n    }\n  }\n  return [left, right];\n});\n/**\n * Partitions a record of `Either` values into two separate records,\n * one with the `Left` values and one with the `Right` values.\n *\n * @param self - the record to partition.\n *\n * @example\n * import { Record, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Record.separate({ a: Either.left(\"e\"), b: Either.right(1) }),\n *   [{ a: \"e\" }, { b: 1 }]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const separate = /*#__PURE__*/partitionMap(identity);\n/**\n * Partitions a record into two separate records based on the result of a predicate function.\n *\n * @param self - The input record to partition.\n * @param predicate - The partitioning function to determine the partitioning of each value of the record.\n *\n * @example\n * import { partition } from \"effect/Record\"\n *\n * assert.deepStrictEqual(\n *   partition({ a: 1, b: 3 }, (n) => n > 2),\n *   [{ a: 1 }, { b: 3 }]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partition = /*#__PURE__*/dual(2, (self, predicate) => {\n  const left = empty();\n  const right = empty();\n  for (const key of keys(self)) {\n    if (predicate(self[key], key)) {\n      right[key] = self[key];\n    } else {\n      left[key] = self[key];\n    }\n  }\n  return [left, right];\n});\n/**\n * Retrieve the keys of a given record as an array.\n *\n * @param self - The object for which you want to get the keys.\n *\n * @since 2.0.0\n */\nexport const keys = self => Object.keys(self);\n/**\n * Retrieve the values of a given record as an array.\n *\n * @param self - The object for which you want to get the values.\n *\n * @since 2.0.0\n */\nexport const values = self => collect(self, (_, a) => a);\n/**\n * Add a new key-value pair or update an existing key's value in a record.\n *\n * @param self - The record to which you want to add or update a key-value pair.\n * @param key - The key you want to add or update.\n * @param values - The value you want to associate with the key.\n *\n * @example\n * import { set } from \"effect/Record\"\n *\n * assert.deepStrictEqual(set(\"a\", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });\n * assert.deepStrictEqual(set(\"c\", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });\n *\n * @since 2.0.0\n */\nexport const set = /*#__PURE__*/dual(3, (self, key, value) => {\n  return {\n    ...self,\n    [key]: value\n  };\n});\n/**\n * Replace a key's value in a record and return the updated record.\n * If the key does not exist in the record, a copy of the original record is returned.\n *\n * @param self - The original record.\n * @param key - The key to replace.\n * @param value - The new value to associate with the key.\n *\n * @example\n * import { Record } from \"effect\"\n *\n * assert.deepStrictEqual(Record.replace(\"a\", 3)({ a: 1, b: 2 }), { a: 3, b: 2 });\n * assert.deepStrictEqual(Record.replace(\"c\", 3)({ a: 1, b: 2 }), { a: 1, b: 2 });\n *\n * @since 2.0.0\n */\nexport const replace = /*#__PURE__*/dual(3, (self, key, value) => {\n  if (has(self, key)) {\n    return {\n      ...self,\n      [key]: value\n    };\n  }\n  return {\n    ...self\n  };\n});\n/**\n * Check if all the keys and values in one record are also found in another record.\n *\n * @param self - The first record to check.\n * @param that - The second record to compare against.\n * @param equivalence - A function to compare values.\n *\n * @since 2.0.0\n */\nexport const isSubrecordBy = equivalence => dual(2, (self, that) => {\n  for (const key of keys(self)) {\n    if (!has(that, key) || !equivalence(self[key], that[key])) {\n      return false;\n    }\n  }\n  return true;\n});\n/**\n * Check if one record is a subrecord of another, meaning it contains all the keys and values found in the second record.\n * This comparison uses default equality checks (`Equal.equivalence()`).\n *\n * @param self - The first record to check.\n * @param that - The second record to compare against.\n *\n * @since 2.0.0\n */\nexport const isSubrecord = /*#__PURE__*/isSubrecordBy( /*#__PURE__*/Equal.equivalence());\n/**\n * Reduce a record to a single value by combining its entries with a specified function.\n *\n * @param self - The record to reduce.\n * @param zero - The initial value of the accumulator.\n * @param f - The function to combine entries (accumulator, value, key).\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduce = /*#__PURE__*/dual(3, (self, zero, f) => {\n  let out = zero;\n  for (const key of keys(self)) {\n    out = f(out, self[key], key);\n  }\n  return out;\n});\n/**\n * Check if all entries in a record meet a specific condition.\n *\n * @param self - The record to check.\n * @param predicate - The condition to test entries (value, key).\n *\n * @since 2.0.0\n */\nexport const every = /*#__PURE__*/dual(2, (self, refinement) => {\n  for (const key of keys(self)) {\n    if (!refinement(self[key], key)) {\n      return false;\n    }\n  }\n  return true;\n});\n/**\n * Check if any entry in a record meets a specific condition.\n *\n * @param self - The record to check.\n * @param predicate - The condition to test entries (value, key).\n *\n * @since 2.0.0\n */\nexport const some = /*#__PURE__*/dual(2, (self, predicate) => {\n  for (const key of keys(self)) {\n    if (predicate(self[key], key)) {\n      return true;\n    }\n  }\n  return false;\n});\n/**\n * Merge two records, preserving entries that exist in either of the records.\n *\n * @param self - The first record.\n * @param that - The second record to combine with the first.\n * @param combine - A function to specify how to merge entries with the same key.\n *\n * @since 2.0.0\n */\nexport const union = /*#__PURE__*/dual(3, (self, that, combine) => {\n  if (isEmptyRecord(self)) {\n    return {\n      ...that\n    };\n  }\n  if (isEmptyRecord(that)) {\n    return {\n      ...self\n    };\n  }\n  const out = empty();\n  for (const key of keys(self)) {\n    if (has(that, key)) {\n      out[key] = combine(self[key], that[key]);\n    } else {\n      out[key] = self[key];\n    }\n  }\n  for (const key of keys(that)) {\n    if (!has(out, key)) {\n      out[key] = that[key];\n    }\n  }\n  return out;\n});\n/**\n * Merge two records, retaining only the entries that exist in both records.\n *\n * @param self - The first record.\n * @param that - The second record to merge with the first.\n * @param combine - A function to specify how to merge entries with the same key.\n *\n * @since 2.0.0\n */\nexport const intersection = /*#__PURE__*/dual(3, (self, that, combine) => {\n  const out = empty();\n  if (isEmptyRecord(self) || isEmptyRecord(that)) {\n    return out;\n  }\n  for (const key of keys(self)) {\n    if (has(that, key)) {\n      out[key] = combine(self[key], that[key]);\n    }\n  }\n  return out;\n});\n/**\n * Merge two records, preserving only the entries that are unique to each record.\n *\n * @param self - The first record.\n * @param that - The second record to compare with the first.\n *\n * @since 2.0.0\n */\nexport const difference = /*#__PURE__*/dual(2, (self, that) => {\n  if (isEmptyRecord(self)) {\n    return {\n      ...that\n    };\n  }\n  if (isEmptyRecord(that)) {\n    return {\n      ...self\n    };\n  }\n  const out = {};\n  for (const key of keys(self)) {\n    if (!has(that, key)) {\n      out[key] = self[key];\n    }\n  }\n  for (const key of keys(that)) {\n    if (!has(self, key)) {\n      out[key] = that[key];\n    }\n  }\n  return out;\n});\n/**\n * Create an `Equivalence` for records using the provided `Equivalence` for values.\n *\n * @param equivalence - An `Equivalence` for the values contained in the records.\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getEquivalence = equivalence => {\n  const is = isSubrecordBy(equivalence);\n  return (self, that) => is(self, that) && is(that, self);\n};\n/**\n * Create a non-empty record from a single element.\n *\n * @param key - The key for the element.\n * @param value - The value associated with the key.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const singleton = (key, value) => ({\n  [key]: value\n});\n//# sourceMappingURL=Record.js.map","/**\n * This module provides utility functions for working with arrays in TypeScript.\n *\n * @since 2.0.0\n */\nimport * as E from \"./Either.js\";\nimport * as Equal from \"./Equal.js\";\nimport * as Equivalence from \"./Equivalence.js\";\nimport { dual, identity } from \"./Function.js\";\nimport * as readonlyArray from \"./internal/array.js\";\nimport * as doNotation from \"./internal/doNotation.js\";\nimport * as EffectIterable from \"./Iterable.js\";\nimport * as O from \"./Option.js\";\nimport * as Order from \"./Order.js\";\nimport { isBoolean } from \"./Predicate.js\";\nimport * as Record from \"./Record.js\";\nimport * as Tuple from \"./Tuple.js\";\n/**\n * Builds a `NonEmptyArray` from an non-empty collection of elements.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.make(1, 2, 3)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const make = (...elements) => elements;\n/**\n * Creates a new `Array` of the specified length.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.allocate<number>(3)\n * assert.deepStrictEqual(result.length, 3)\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const allocate = n => new Array(n);\n/**\n * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @example\n * import { makeBy } from \"effect/Array\"\n *\n * assert.deepStrictEqual(makeBy(5, n => n * 2), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const makeBy = (n, f) => {\n  const max = Math.max(1, Math.floor(n));\n  const out = new Array(max);\n  for (let i = 0; i < max; i++) {\n    out[i] = f(i);\n  }\n  return out;\n};\n/**\n * Return a `NonEmptyArray` containing a range of integers, including both endpoints.\n *\n * @example\n * import { range } from \"effect/Array\"\n *\n * assert.deepStrictEqual(range(1, 3), [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const range = (start, end) => start <= end ? makeBy(end - start + 1, i => start + i) : [start];\n/**\n * Return a `NonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to an integer >= 1.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * assert.deepStrictEqual(Array.replicate(\"a\", 3), [\"a\", \"a\", \"a\"])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const replicate = /*#__PURE__*/dual(2, (a, n) => makeBy(n, () => a));\n/**\n * Creates a new `Array` from an iterable collection of values.\n * If the input is already an array, it returns the input as-is.\n * Otherwise, it converts the iterable collection to an array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const set = new Set([1, 2, 3])\n * const result = Array.fromIterable(set)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromIterable = collection => Array.isArray(collection) ? collection : Array.from(collection);\n/**\n * Creates a new `Array` from a value that might not be an iterable.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * assert.deepStrictEqual(Array.ensure(\"a\"), [\"a\"])\n * assert.deepStrictEqual(Array.ensure([\"a\"]), [\"a\"])\n * assert.deepStrictEqual(Array.ensure([\"a\", \"b\", \"c\"]), [\"a\", \"b\", \"c\"])\n *\n * @category constructors\n * @since 3.3.0\n */\nexport const ensure = self => Array.isArray(self) ? self : [self];\n/**\n * Takes a record and returns an array of tuples containing its keys and values.\n *\n * @param self - The record to transform.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const x = { a: 1, b: 2, c: 3 }\n * assert.deepStrictEqual(Array.fromRecord(x), [[\"a\", 1], [\"b\", 2], [\"c\", 3]])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromRecord = Record.toEntries;\n/**\n * Converts an `Option` to an array.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Array.fromOption(Option.some(1)), [1])\n * assert.deepStrictEqual(Array.fromOption(Option.none()), [])\n *\n * @category conversions\n * @since 2.0.0\n */\nexport const fromOption = O.toArray;\n/**\n * Matches the elements of an array, applying functions to cases of empty and non-empty arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const match = Array.match({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: ([head, ...tail]) => `head: ${head}, tail: ${tail.length}`\n * })\n * assert.deepStrictEqual(match([]), \"empty\")\n * assert.deepStrictEqual(match([1, 2, 3]), \"head: 1, tail: 2\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match = /*#__PURE__*/dual(2, (self, {\n  onEmpty,\n  onNonEmpty\n}) => isNonEmptyReadonlyArray(self) ? onNonEmpty(self) : onEmpty());\n/**\n * Matches the elements of an array from the left, applying functions to cases of empty and non-empty arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const matchLeft = Array.matchLeft({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (head, tail) => `head: ${head}, tail: ${tail.length}`\n * })\n * assert.deepStrictEqual(matchLeft([]), \"empty\")\n * assert.deepStrictEqual(matchLeft([1, 2, 3]), \"head: 1, tail: 2\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const matchLeft = /*#__PURE__*/dual(2, (self, {\n  onEmpty,\n  onNonEmpty\n}) => isNonEmptyReadonlyArray(self) ? onNonEmpty(headNonEmpty(self), tailNonEmpty(self)) : onEmpty());\n/**\n * Matches the elements of an array from the right, applying functions to cases of empty and non-empty arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const matchRight = Array.matchRight({\n *   onEmpty: () => \"empty\",\n *   onNonEmpty: (init, last) => `init: ${init.length}, last: ${last}`\n * })\n * assert.deepStrictEqual(matchRight([]), \"empty\")\n * assert.deepStrictEqual(matchRight([1, 2, 3]), \"init: 2, last: 3\")\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const matchRight = /*#__PURE__*/dual(2, (self, {\n  onEmpty,\n  onNonEmpty\n}) => isNonEmptyReadonlyArray(self) ? onNonEmpty(initNonEmpty(self), lastNonEmpty(self)) : onEmpty());\n/**\n * Prepend an element to the front of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const original = [2, 3, 4];\n * const result = Array.prepend(original, 1);\n * assert.deepStrictEqual(result, [1, 2, 3, 4]);\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prepend = /*#__PURE__*/dual(2, (self, head) => [head, ...self]);\n/**\n * Prepends the specified prefix array (or iterable) to the beginning of the specified array (or iterable).\n * If either array is non-empty, the result is also a non-empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const prefix = [0, 1];\n * const array = [2, 3];\n * const result = Array.prependAll(array, prefix);\n * assert.deepStrictEqual(result, [0, 1, 2, 3]);\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const prependAll = /*#__PURE__*/dual(2, (self, that) => fromIterable(that).concat(fromIterable(self)));\n/**\n * Append an element to the end of an `Iterable`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const original = [1, 2, 3];\n * const result = Array.append(original, 4);\n * assert.deepStrictEqual(result, [1, 2, 3, 4]);\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const append = /*#__PURE__*/dual(2, (self, last) => [...self, last]);\n/**\n * Concatenates two arrays (or iterables), combining their elements.\n * If either array is non-empty, the result is also a non-empty array.\n *\n * @category concatenating\n * @since 2.0.0\n */\nexport const appendAll = /*#__PURE__*/dual(2, (self, that) => fromIterable(self).concat(fromIterable(that)));\n/**\n * Accumulates values from an `Iterable` starting from the left, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.scan(numbers, 0, (acc, value) => acc + value)\n * assert.deepStrictEqual(result, [0, 1, 3, 6, 10])\n *\n * // Explanation:\n * // This function starts with the initial value (0 in this case)\n * // and adds each element of the array to this accumulator one by one,\n * // keeping track of the cumulative sum after each addition.\n * // Each of these sums is captured in the resulting array.\n *\n * @category folding\n * @since 2.0.0\n */\nexport const scan = /*#__PURE__*/dual(3, (self, b, f) => {\n  const out = [b];\n  let i = 0;\n  for (const a of self) {\n    out[i + 1] = f(out[i], a);\n    i++;\n  }\n  return out;\n});\n/**\n * Accumulates values from an `Iterable` starting from the right, storing\n * each intermediate result in an array. Useful for tracking the progression of\n * a value through a series of transformations.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.scanRight(numbers, 0, (acc, value) => acc + value)\n * assert.deepStrictEqual(result, [10, 9, 7, 4, 0])\n *\n * @category folding\n * @since 2.0.0\n */\nexport const scanRight = /*#__PURE__*/dual(3, (self, b, f) => {\n  const input = fromIterable(self);\n  const out = new Array(input.length + 1);\n  out[input.length] = b;\n  for (let i = input.length - 1; i >= 0; i--) {\n    out[i] = f(out[i + 1], input[i]);\n  }\n  return out;\n});\n/**\n * Determine if `unknown` is an Array.\n *\n * @param self - The value to check.\n *\n * @example\n * import { isArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isArray(null), false);\n * assert.deepStrictEqual(isArray([1, 2, 3]), true);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isArray = Array.isArray;\n/**\n * Determine if an `Array` is empty narrowing down the type to `[]`.\n *\n * @param self - The `Array` to check.\n *\n * @example\n * import { isEmptyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isEmptyArray([]), true);\n * assert.deepStrictEqual(isEmptyArray([1, 2, 3]), false);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyArray = self => self.length === 0;\n/**\n * Determine if a `ReadonlyArray` is empty narrowing down the type to `readonly []`.\n *\n * @param self - The `ReadonlyArray` to check.\n *\n * @example\n * import { isEmptyReadonlyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isEmptyReadonlyArray([]), true);\n * assert.deepStrictEqual(isEmptyReadonlyArray([1, 2, 3]), false);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEmptyReadonlyArray = isEmptyArray;\n/**\n * Determine if an `Array` is non empty narrowing down the type to `NonEmptyArray`.\n *\n * An `Array` is considered to be a `NonEmptyArray` if it contains at least one element.\n *\n * @param self - The `Array` to check.\n *\n * @example\n * import { isNonEmptyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isNonEmptyArray([]), false);\n * assert.deepStrictEqual(isNonEmptyArray([1, 2, 3]), true);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNonEmptyArray = readonlyArray.isNonEmptyArray;\n/**\n * Determine if a `ReadonlyArray` is non empty narrowing down the type to `NonEmptyReadonlyArray`.\n *\n * A `ReadonlyArray` is considered to be a `NonEmptyReadonlyArray` if it contains at least one element.\n *\n * @param self - The `ReadonlyArray` to check.\n *\n * @example\n * import { isNonEmptyReadonlyArray } from \"effect/Array\"\n *\n * assert.deepStrictEqual(isNonEmptyReadonlyArray([]), false);\n * assert.deepStrictEqual(isNonEmptyReadonlyArray([1, 2, 3]), true);\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isNonEmptyReadonlyArray = readonlyArray.isNonEmptyArray;\n/**\n * Return the number of elements in a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const length = self => self.length;\nconst isOutOfBound = (i, as) => i < 0 || i >= as.length;\nconst clamp = (i, as) => Math.floor(Math.min(Math.max(0, i), as.length));\n/**\n * This function provides a safe way to read a value at a particular index from a `ReadonlyArray`.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const get = /*#__PURE__*/dual(2, (self, index) => {\n  const i = Math.floor(index);\n  return isOutOfBound(i, self) ? O.none() : O.some(self[i]);\n});\n/**\n * Gets an element unsafely, will throw on out of bounds.\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet = /*#__PURE__*/dual(2, (self, index) => {\n  const i = Math.floor(index);\n  if (isOutOfBound(i, self)) {\n    throw new Error(`Index ${i} out of bounds`);\n  }\n  return self[i];\n});\n/**\n * Return a tuple containing the first element, and a new `Array` of the remaining elements, if any.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const result = Array.unprepend([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [1, [2, 3, 4]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const unprepend = self => [headNonEmpty(self), tailNonEmpty(self)];\n/**\n * Return a tuple containing a copy of the `NonEmptyReadonlyArray` without its last element, and that last element.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const result = Array.unappend([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [[1, 2, 3], 4])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const unappend = self => [initNonEmpty(self), lastNonEmpty(self)];\n/**\n * Get the first element of a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const head = /*#__PURE__*/get(0);\n/**\n * Get the first element of a non empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.headNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, 1)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const headNonEmpty = /*#__PURE__*/unsafeGet(0);\n/**\n * Get the last element in a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const last = self => isNonEmptyReadonlyArray(self) ? O.some(lastNonEmpty(self)) : O.none();\n/**\n * Get the last element of a non empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.lastNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, 4)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const lastNonEmpty = self => self[self.length - 1];\n/**\n * Get all but the first element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const tail = self => {\n  const input = fromIterable(self);\n  return isNonEmptyReadonlyArray(input) ? O.some(tailNonEmpty(input)) : O.none();\n};\n/**\n * Get all but the first element of a `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.tailNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [2, 3, 4])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const tailNonEmpty = self => self.slice(1);\n/**\n * Get all but the last element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const init = self => {\n  const input = fromIterable(self);\n  return isNonEmptyReadonlyArray(input) ? O.some(initNonEmpty(input)) : O.none();\n};\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.initNonEmpty([1, 2, 3, 4])\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const initNonEmpty = self => self.slice(0, -1);\n/**\n * Keep only a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.take(numbers, 3)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const take = /*#__PURE__*/dual(2, (self, n) => {\n  const input = fromIterable(self);\n  return input.slice(0, clamp(n, input));\n});\n/**\n * Keep only a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.takeRight(numbers, 3)\n * assert.deepStrictEqual(result, [3, 4, 5])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const takeRight = /*#__PURE__*/dual(2, (self, n) => {\n  const input = fromIterable(self);\n  const i = clamp(n, input);\n  return i === 0 ? [] : input.slice(-i);\n});\n/**\n * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 3, 2, 4, 1, 2]\n * const result = Array.takeWhile(numbers, x => x < 4)\n * assert.deepStrictEqual(result, [1, 3, 2])\n *\n * // Explanation:\n * // - The function starts with the first element (`1`), which is less than `4`, so it adds `1` to the result.\n * // - The next element (`3`) is also less than `4`, so it adds `3`.\n * // - The next element (`2`) is again less than `4`, so it adds `2`.\n * // - The function then encounters `4`, which is not less than `4`. At this point, it stops checking further elements and finalizes the result.\n *\n * @category getters\n * @since 2.0.0\n */\nexport const takeWhile = /*#__PURE__*/dual(2, (self, predicate) => {\n  let i = 0;\n  const out = [];\n  for (const a of self) {\n    if (!predicate(a, i)) {\n      break;\n    }\n    out.push(a);\n    i++;\n  }\n  return out;\n});\nconst spanIndex = (self, predicate) => {\n  let i = 0;\n  for (const a of self) {\n    if (!predicate(a, i)) {\n      break;\n    }\n    i++;\n  }\n  return i;\n};\n/**\n * Split an `Iterable` into two parts:\n *\n * 1. the longest initial subarray for which all elements satisfy the specified predicate\n * 2. the remaining elements\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const span = /*#__PURE__*/dual(2, (self, predicate) => splitAt(self, spanIndex(self, predicate)));\n/**\n * Drop a max number of elements from the start of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.drop(numbers, 2)\n * assert.deepStrictEqual(result, [3, 4, 5])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const drop = /*#__PURE__*/dual(2, (self, n) => {\n  const input = fromIterable(self);\n  return input.slice(clamp(n, input), input.length);\n});\n/**\n * Drop a max number of elements from the end of an `Iterable`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.dropRight(numbers, 2)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const dropRight = /*#__PURE__*/dual(2, (self, n) => {\n  const input = fromIterable(self);\n  return input.slice(0, input.length - clamp(n, input));\n});\n/**\n * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.dropWhile(numbers, x => x < 4)\n * assert.deepStrictEqual(result, [4, 5])\n *\n * @category getters\n * @since 2.0.0\n */\nexport const dropWhile = /*#__PURE__*/dual(2, (self, predicate) => fromIterable(self).slice(spanIndex(self, predicate)));\n/**\n * Return the first index for which a predicate holds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [5, 3, 8, 9]\n * const result = Array.findFirstIndex(numbers, x => x > 5)\n * assert.deepStrictEqual(result, Option.some(2))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirstIndex = /*#__PURE__*/dual(2, (self, predicate) => {\n  let i = 0;\n  for (const a of self) {\n    if (predicate(a, i)) {\n      return O.some(i);\n    }\n    i++;\n  }\n  return O.none();\n});\n/**\n * Return the last index for which a predicate holds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 3, 8, 9]\n * const result = Array.findLastIndex(numbers, x => x < 5)\n * assert.deepStrictEqual(result, Option.some(1))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLastIndex = /*#__PURE__*/dual(2, (self, predicate) => {\n  const input = fromIterable(self);\n  for (let i = input.length - 1; i >= 0; i--) {\n    if (predicate(input[i], i)) {\n      return O.some(i);\n    }\n  }\n  return O.none();\n});\n/**\n * Returns the first element that satisfies the specified\n * predicate, or `None` if no such element exists.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.findFirst(numbers, x => x > 3)\n * assert.deepStrictEqual(result, Option.some(4))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findFirst = EffectIterable.findFirst;\n/**\n * Finds the last element in an iterable collection that satisfies the given predicate or refinement.\n * Returns an `Option` containing the found element, or `Option.none` if no element matches.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.findLast(numbers, n => n % 2 === 0)\n * assert.deepStrictEqual(result, Option.some(4))\n *\n * @category elements\n * @since 2.0.0\n */\nexport const findLast = /*#__PURE__*/dual(2, (self, f) => {\n  const input = fromIterable(self);\n  for (let i = input.length - 1; i >= 0; i--) {\n    const a = input[i];\n    const o = f(a, i);\n    if (isBoolean(o)) {\n      if (o) {\n        return O.some(a);\n      }\n    } else {\n      if (O.isSome(o)) {\n        return o;\n      }\n    }\n  }\n  return O.none();\n});\n/**\n * Insert an element at the specified index, creating a new `NonEmptyArray`,\n * or return `None` if the index is out of bounds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'e']\n * const result = Array.insertAt(letters, 3, 'd')\n * assert.deepStrictEqual(result, Option.some(['a', 'b', 'c', 'd', 'e']))\n *\n * @since 2.0.0\n */\nexport const insertAt = /*#__PURE__*/dual(3, (self, i, b) => {\n  const out = Array.from(self);\n  //             v--- `= self.length` is ok, it means inserting in last position\n  if (i < 0 || i > out.length) {\n    return O.none();\n  }\n  out.splice(i, 0, b);\n  return O.some(out);\n});\n/**\n * Change the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'd']\n * const result = Array.replace(letters, 1, 'z')\n * assert.deepStrictEqual(result, ['a', 'z', 'c', 'd'])\n *\n * @since 2.0.0\n */\nexport const replace = /*#__PURE__*/dual(3, (self, i, b) => modify(self, i, () => b));\n/**\n * Replaces an element in an array with the given value, returning an option of the updated array.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.replaceOption(numbers, 1, 4)\n * assert.deepStrictEqual(result, Option.some([1, 4, 3]))\n *\n * @since 2.0.0\n */\nexport const replaceOption = /*#__PURE__*/dual(3, (self, i, b) => modifyOption(self, i, () => b));\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.modify(numbers, 2, (n) => n * 2)\n * assert.deepStrictEqual(result, [1, 2, 6, 4])\n *\n * @since 2.0.0\n */\nexport const modify = /*#__PURE__*/dual(3, (self, i, f) => O.getOrElse(modifyOption(self, i, f), () => Array.from(self)));\n/**\n * Apply a function to the element at the specified index, creating a new `Array`,\n * or return `None` if the index is out of bounds.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.modifyOption(numbers, 2, (n) => n * 2)\n * assert.deepStrictEqual(result, Option.some([1, 2, 6, 4]))\n *\n * const outOfBoundsResult = Array.modifyOption(numbers, 5, (n) => n * 2)\n * assert.deepStrictEqual(outOfBoundsResult, Option.none())\n *\n * @since 2.0.0\n */\nexport const modifyOption = /*#__PURE__*/dual(3, (self, i, f) => {\n  const out = Array.from(self);\n  if (isOutOfBound(i, out)) {\n    return O.none();\n  }\n  const next = f(out[i]);\n  // @ts-expect-error\n  out[i] = next;\n  return O.some(out);\n});\n/**\n * Delete the element at the specified index, creating a new `Array`,\n * or return a copy of the input if the index is out of bounds.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.remove(numbers, 2)\n * assert.deepStrictEqual(result, [1, 2, 4])\n *\n * const outOfBoundsResult = Array.remove(numbers, 5)\n * assert.deepStrictEqual(outOfBoundsResult, [1, 2, 3, 4])\n *\n * @since 2.0.0\n */\nexport const remove = /*#__PURE__*/dual(2, (self, i) => {\n  const out = Array.from(self);\n  if (isOutOfBound(i, out)) {\n    return out;\n  }\n  out.splice(i, 1);\n  return out;\n});\n/**\n * Reverse an `Iterable`, creating a new `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.reverse(numbers)\n * assert.deepStrictEqual(result, [4, 3, 2, 1])\n *\n * @category elements\n * @since 2.0.0\n */\nexport const reverse = self => Array.from(self).reverse();\n/**\n * Create a new array with elements sorted in increasing order based on the specified comparator.\n * If the input is a `NonEmptyReadonlyArray`, the output will also be a `NonEmptyReadonlyArray`.\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const sort = /*#__PURE__*/dual(2, (self, O) => {\n  const out = Array.from(self);\n  out.sort(O);\n  return out;\n});\n/**\n * Sorts an array based on a provided mapping function and order. The mapping\n * function transforms the elements into a value that can be compared, and the\n * order defines how those values should be sorted.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const strings = [\"aaa\", \"b\", \"cc\"]\n * const result = Array.sortWith(strings, (s) => s.length, Order.number)\n * assert.deepStrictEqual(result, [\"b\", \"cc\", \"aaa\"])\n *\n * // Explanation:\n * // The array of strings is sorted based on their lengths. The mapping function `(s) => s.length`\n * // converts each string into its length, and the `Order.number` specifies that the lengths should\n * // be sorted in ascending order.\n *\n * @since 2.0.0\n * @category elements\n */\nexport const sortWith = /*#__PURE__*/dual(3, (self, f, order) => Array.from(self).map(a => [a, f(a)]).sort((a, b) => order(a[1], b[1])).map(x => x[0]));\n/**\n * Sorts the elements of an `Iterable` in increasing order based on the provided\n * orders. The elements are compared using the first order in `orders`, then the\n * second order if the first comparison is equal, and so on.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const users = [\n *   { name: \"Alice\", age: 30 },\n *   { name: \"Bob\", age: 25 },\n *   { name: \"Charlie\", age: 30 }\n * ]\n *\n * const result = Array.sortBy(\n *   Order.mapInput(Order.number, (user: (typeof users)[number]) => user.age),\n *   Order.mapInput(Order.string, (user: (typeof users)[number]) => user.name)\n * )(users)\n *\n * assert.deepStrictEqual(result, [\n *   { name: \"Bob\", age: 25 },\n *   { name: \"Alice\", age: 30 },\n *   { name: \"Charlie\", age: 30 }\n * ])\n *\n * // Explanation:\n * // The array of users is sorted first by age in ascending order. When ages are equal,\n * // the users are further sorted by name in ascending order.\n *\n * @category sorting\n * @since 2.0.0\n */\nexport const sortBy = (...orders) => {\n  const sortByAll = sort(Order.combineAll(orders));\n  return self => {\n    const input = fromIterable(self);\n    if (isNonEmptyReadonlyArray(input)) {\n      return sortByAll(input);\n    }\n    return [];\n  };\n};\n/**\n * Takes two `Iterable`s and returns an `Array` of corresponding pairs.\n * If one input `Iterable` is short, excess elements of the\n * longer `Iterable` are discarded.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = ['a', 'b']\n * const result = Array.zip(array1, array2)\n * assert.deepStrictEqual(result, [[1, 'a'], [2, 'b']])\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zip = /*#__PURE__*/dual(2, (self, that) => zipWith(self, that, Tuple.make));\n/**\n * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one\n * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [4, 5, 6]\n * const result = Array.zipWith(array1, array2, (a, b) => a + b)\n * assert.deepStrictEqual(result, [5, 7, 9])\n *\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith = /*#__PURE__*/dual(3, (self, that, f) => {\n  const as = fromIterable(self);\n  const bs = fromIterable(that);\n  if (isNonEmptyReadonlyArray(as) && isNonEmptyReadonlyArray(bs)) {\n    const out = [f(headNonEmpty(as), headNonEmpty(bs))];\n    const len = Math.min(as.length, bs.length);\n    for (let i = 1; i < len; i++) {\n      out[i] = f(as[i], bs[i]);\n    }\n    return out;\n  }\n  return [];\n});\n/**\n * This function is the inverse of `zip`. Takes an `Iterable` of pairs and return two corresponding `Array`s.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.unzip([[1, \"a\"], [2, \"b\"], [3, \"c\"]])\n * assert.deepStrictEqual(result, [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @since 2.0.0\n */\nexport const unzip = self => {\n  const input = fromIterable(self);\n  if (isNonEmptyReadonlyArray(input)) {\n    const fa = [input[0][0]];\n    const fb = [input[0][1]];\n    for (let i = 1; i < input.length; i++) {\n      fa[i] = input[i][0];\n      fb[i] = input[i][1];\n    }\n    return [fa, fb];\n  }\n  return [[], []];\n};\n/**\n * Places an element in between members of an `Iterable`.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.intersperse(numbers, 0)\n * assert.deepStrictEqual(result, [1, 0, 2, 0, 3])\n *\n * @since 2.0.0\n */\nexport const intersperse = /*#__PURE__*/dual(2, (self, middle) => {\n  const input = fromIterable(self);\n  if (isNonEmptyReadonlyArray(input)) {\n    const out = [headNonEmpty(input)];\n    const tail = tailNonEmpty(input);\n    for (let i = 0; i < tail.length; i++) {\n      if (i < tail.length) {\n        out.push(middle);\n      }\n      out.push(tail[i]);\n    }\n    return out;\n  }\n  return [];\n});\n/**\n * Apply a function to the head, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyHead([1, 2, 3], n => n * 10)\n * assert.deepStrictEqual(result, [10, 2, 3])\n *\n * @since 2.0.0\n */\nexport const modifyNonEmptyHead = /*#__PURE__*/dual(2, (self, f) => [f(headNonEmpty(self)), ...tailNonEmpty(self)]);\n/**\n * Change the head, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyHead([1, 2, 3], 10)\n * assert.deepStrictEqual(result, [10, 2, 3])\n *\n * @since 2.0.0\n */\nexport const setNonEmptyHead = /*#__PURE__*/dual(2, (self, b) => modifyNonEmptyHead(self, () => b));\n/**\n * Apply a function to the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.modifyNonEmptyLast([1, 2, 3], n => n * 2)\n * assert.deepStrictEqual(result, [1, 2, 6])\n *\n * @since 2.0.0\n */\nexport const modifyNonEmptyLast = /*#__PURE__*/dual(2, (self, f) => append(initNonEmpty(self), f(lastNonEmpty(self))));\n/**\n * Change the last element, creating a new `NonEmptyReadonlyArray`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.setNonEmptyLast([1, 2, 3], 4)\n * assert.deepStrictEqual(result, [1, 2, 4])\n *\n * @since 2.0.0\n */\nexport const setNonEmptyLast = /*#__PURE__*/dual(2, (self, b) => modifyNonEmptyLast(self, () => b));\n/**\n * Rotate an `Iterable` by `n` steps.\n * If the input is a non-empty array, the result is also a non-empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'd']\n * const result = Array.rotate(letters, 2)\n * assert.deepStrictEqual(result, ['c', 'd', 'a', 'b'])\n *\n * @since 2.0.0\n */\nexport const rotate = /*#__PURE__*/dual(2, (self, n) => {\n  const input = fromIterable(self);\n  if (isNonEmptyReadonlyArray(input)) {\n    const len = input.length;\n    const m = Math.round(n) % len;\n    if (isOutOfBound(Math.abs(m), input) || m === 0) {\n      return copy(input);\n    }\n    if (m < 0) {\n      const [f, s] = splitNonEmptyAt(input, -m);\n      return appendAll(s, f);\n    } else {\n      return rotate(self, m - len);\n    }\n  }\n  return [];\n});\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using a provided `isEquivalent` function.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const isEquivalent = (a: number, b: number) => a === b\n * const containsNumber = Array.containsWith(isEquivalent)\n * const result = containsNumber(3)(numbers)\n * assert.deepStrictEqual(result, true)\n *\n * @category elements\n * @since 2.0.0\n */\nexport const containsWith = isEquivalent => dual(2, (self, a) => {\n  for (const i of self) {\n    if (isEquivalent(a, i)) {\n      return true;\n    }\n  }\n  return false;\n});\nconst _equivalence = /*#__PURE__*/Equal.equivalence();\n/**\n * Returns a function that checks if a `ReadonlyArray` contains a given value using the default `Equivalence`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const letters = ['a', 'b', 'c', 'd']\n * const result = Array.contains('c')(letters)\n * assert.deepStrictEqual(result, true)\n *\n * @category elements\n * @since 2.0.0\n */\nexport const contains = /*#__PURE__*/containsWith(_equivalence);\n/**\n * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for \"chopping\" up the input\n * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a\n * value and the rest of the `Array`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.chop(numbers, (as): [number, Array<number>] => [as[0] * 2, as.slice(1)])\n * assert.deepStrictEqual(result, [2, 4, 6, 8, 10])\n *\n * // Explanation:\n * // The `chopFunction` takes the first element of the array, doubles it, and then returns it along with the rest of the array.\n * // The `chop` function applies this `chopFunction` recursively to the input array `[1, 2, 3, 4, 5]`,\n * // resulting in a new array `[2, 4, 6, 8, 10]`.\n *\n * @since 2.0.0\n */\nexport const chop = /*#__PURE__*/dual(2, (self, f) => {\n  const input = fromIterable(self);\n  if (isNonEmptyReadonlyArray(input)) {\n    const [b, rest] = f(input);\n    const out = [b];\n    let next = rest;\n    while (readonlyArray.isNonEmptyArray(next)) {\n      const [b, rest] = f(next);\n      out.push(b);\n      next = rest;\n    }\n    return out;\n  }\n  return [];\n});\n/**\n * Splits an `Iterable` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` can be `0`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.splitAt(numbers, 3)\n * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitAt = /*#__PURE__*/dual(2, (self, n) => {\n  const input = Array.from(self);\n  const _n = Math.floor(n);\n  if (isNonEmptyReadonlyArray(input)) {\n    if (_n >= 1) {\n      return splitNonEmptyAt(input, _n);\n    }\n    return [[], input];\n  }\n  return [input, []];\n});\n/**\n * Splits a `NonEmptyReadonlyArray` into two segments, with the first segment containing a maximum of `n` elements.\n * The value of `n` must be `>= 1`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.splitNonEmptyAt([\"a\", \"b\", \"c\", \"d\", \"e\"], 3)\n * assert.deepStrictEqual(result, [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitNonEmptyAt = /*#__PURE__*/dual(2, (self, n) => {\n  const _n = Math.max(1, Math.floor(n));\n  return _n >= self.length ? [copy(self), []] : [prepend(self.slice(1, _n), headNonEmpty(self)), self.slice(_n)];\n});\n/**\n * Splits this iterable into `n` equally sized arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n * const result = Array.split(numbers, 3)\n * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5, 6], [7, 8]])\n *\n * @since 2.0.0\n * @category splitting\n */\nexport const split = /*#__PURE__*/dual(2, (self, n) => {\n  const input = fromIterable(self);\n  return chunksOf(input, Math.ceil(input.length / Math.floor(n)));\n});\n/**\n * Splits this iterable on the first element that matches this predicate.\n * Returns a tuple containing two arrays: the first one is before the match, and the second one is from the match onward.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.splitWhere(numbers, n => n > 3)\n * assert.deepStrictEqual(result, [[1, 2, 3], [4, 5]])\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const splitWhere = /*#__PURE__*/dual(2, (self, predicate) => span(self, (a, i) => !predicate(a, i)));\n/**\n * Copies an array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const copy = Array.copy(numbers)\n * assert.deepStrictEqual(copy, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const copy = self => self.slice();\n/**\n * Pads an array.\n * Returns a new array of length `n` with the elements of `array` followed by `fill` elements if `array` is shorter than `n`.\n * If `array` is longer than `n`, the returned array will be a slice of `array` containing the `n` first elements of `array`.\n * If `n` is less than or equal to 0, the returned array will be an empty array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const arr = [1, 2, 3]\n * const result = Array.pad(arr, 6, 0)\n * assert.deepStrictEqual(result, [1, 2, 3, 0, 0, 0])\n *\n * @since 3.8.4\n */\nexport const pad = /*#__PURE__*/dual(3, (self, n, fill) => {\n  if (self.length >= n) {\n    return take(self, n);\n  }\n  return appendAll(self, makeBy(n - self.length, () => fill));\n});\n/**\n * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `self`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4, 5]\n * const result = Array.chunksOf(numbers, 2)\n * assert.deepStrictEqual(result, [[1, 2], [3, 4], [5]])\n *\n * // Explanation:\n * // The `chunksOf` function takes an array of numbers `[1, 2, 3, 4, 5]` and a number `2`.\n * // It splits the array into chunks of length 2. Since the array length is not evenly divisible by 2,\n * // the last chunk contains the remaining elements.\n * // The result is `[[1, 2], [3, 4], [5]]`.\n *\n * @category splitting\n * @since 2.0.0\n */\nexport const chunksOf = /*#__PURE__*/dual(2, (self, n) => {\n  const input = fromIterable(self);\n  if (isNonEmptyReadonlyArray(input)) {\n    return chop(input, splitNonEmptyAt(n));\n  }\n  return [];\n});\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s using the provided `isEquivalent` function.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.groupWith([\"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"a\"], (x, y) => x === y)\n * assert.deepStrictEqual(result, [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\"], [\"a\"]])\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupWith = /*#__PURE__*/dual(2, (self, isEquivalent) => chop(self, as => {\n  const h = headNonEmpty(as);\n  const out = [h];\n  let i = 1;\n  for (; i < as.length; i++) {\n    const a = as[i];\n    if (isEquivalent(a, h)) {\n      out.push(a);\n    } else {\n      break;\n    }\n  }\n  return [out, as.slice(i)];\n}));\n/**\n * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const result = Array.group([1, 1, 2, 2, 2, 3, 1])\n * assert.deepStrictEqual(result, [[1, 1], [2, 2, 2], [3], [1]])\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const group = /*#__PURE__*/groupWith( /*#__PURE__*/Equal.equivalence());\n/**\n * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const people = [\n *   { name: \"Alice\", group: \"A\" },\n *   { name: \"Bob\", group: \"B\" },\n *   { name: \"Charlie\", group: \"A\" }\n * ]\n * const result = Array.groupBy(people, person => person.group)\n * assert.deepStrictEqual(result, {\n *   A: [{ name: \"Alice\", group: \"A\" }, { name: \"Charlie\", group: \"A\" }],\n *   B: [{ name: \"Bob\", group: \"B\" }]\n * })\n *\n * @category grouping\n * @since 2.0.0\n */\nexport const groupBy = /*#__PURE__*/dual(2, (self, f) => {\n  const out = {};\n  for (const a of self) {\n    const k = f(a);\n    if (Object.prototype.hasOwnProperty.call(out, k)) {\n      out[k].push(a);\n    } else {\n      out[k] = [a];\n    }\n  }\n  return out;\n});\n/**\n * Calculates the union of two arrays using the provided equivalence relation.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [2, 3]\n * const union = Array.unionWith(array1, array2, (a, b) => a === b)\n * assert.deepStrictEqual(union, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const unionWith = /*#__PURE__*/dual(3, (self, that, isEquivalent) => {\n  const a = fromIterable(self);\n  const b = fromIterable(that);\n  if (isNonEmptyReadonlyArray(a)) {\n    if (isNonEmptyReadonlyArray(b)) {\n      const dedupe = dedupeWith(isEquivalent);\n      return dedupe(appendAll(a, b));\n    }\n    return a;\n  }\n  return b;\n});\n/**\n * Creates a union of two arrays, removing duplicates.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [2, 3]\n * const result = Array.union(array1, array2)\n * assert.deepStrictEqual(result, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const union = /*#__PURE__*/dual(2, (self, that) => unionWith(self, that, _equivalence));\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [{ id: 1 }, { id: 2 }, { id: 3 }]\n * const array2 = [{ id: 3 }, { id: 4 }, { id: 1 }]\n * const isEquivalent = (a: { id: number }, b: { id: number }) => a.id === b.id\n * const result = Array.intersectionWith(isEquivalent)(array2)(array1)\n * assert.deepStrictEqual(result, [{ id: 1 }, { id: 3 }])\n *\n * @since 2.0.0\n */\nexport const intersectionWith = isEquivalent => {\n  const has = containsWith(isEquivalent);\n  return dual(2, (self, that) => fromIterable(self).filter(a => has(that, a)));\n};\n/**\n * Creates an `Array` of unique values that are included in all given `Iterable`s.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [3, 4, 1]\n * const result = Array.intersection(array1, array2)\n * assert.deepStrictEqual(result, [1, 3])\n *\n * @since 2.0.0\n */\nexport const intersection = /*#__PURE__*/intersectionWith(_equivalence);\n/**\n * Creates a `Array` of values not included in the other given `Iterable` using the provided `isEquivalent` function.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [2, 3, 4]\n * const difference = Array.differenceWith<number>((a, b) => a === b)(array1, array2)\n * assert.deepStrictEqual(difference, [1])\n *\n * @since 2.0.0\n */\nexport const differenceWith = isEquivalent => {\n  const has = containsWith(isEquivalent);\n  return dual(2, (self, that) => fromIterable(self).filter(a => !has(that, a)));\n};\n/**\n * Creates a `Array` of values not included in the other given `Iterable`.\n * The order and references of result values are determined by the first `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2, 3]\n * const array2 = [2, 3, 4]\n * const difference = Array.difference(array1, array2)\n * assert.deepStrictEqual(difference, [1])\n *\n * @since 2.0.0\n */\nexport const difference = /*#__PURE__*/differenceWith(_equivalence);\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const empty = () => [];\n/**\n * Constructs a new `NonEmptyArray<A>` from the specified value.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const of = a => [a];\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const map = /*#__PURE__*/dual(2, (self, f) => self.map(f));\n/**\n * Applies a function to each element in an array and returns a new array containing the concatenated mapped elements.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap = /*#__PURE__*/dual(2, (self, f) => {\n  if (isEmptyReadonlyArray(self)) {\n    return [];\n  }\n  const out = [];\n  for (let i = 0; i < self.length; i++) {\n    const inner = f(self[i], i);\n    for (let j = 0; j < inner.length; j++) {\n      out.push(inner[j]);\n    }\n  }\n  return out;\n});\n/**\n * Combines multiple arrays into a single array by concatenating all elements\n * from each nested array. This function ensures that the structure of nested\n * arrays is collapsed into a single, flat array.\n *\n * @example\n * import { Array } from \"effect\";\n *\n * const nestedArrays = [[1, 2], [], [3, 4], [], [5, 6]]\n * const result = Array.flatten(nestedArrays)\n *\n * assert.deepStrictEqual(result, [1, 2, 3, 4, 5, 6]);\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatten = /*#__PURE__*/flatMap(identity);\n/**\n * Applies a function to each element of the `Iterable` and filters based on the result, keeping the transformed values where the function returns `Some`.\n * This method combines filtering and mapping functionalities, allowing transformations and filtering of elements based on a single function pass.\n *\n * @example\n * import { Array, Option } from \"effect\";\n *\n * const data = [1, 2, 3, 4, 5];\n * const evenSquares = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none();\n * const result = Array.filterMap(data, evenSquares);\n *\n * assert.deepStrictEqual(result, [4, 16]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMap = /*#__PURE__*/dual(2, (self, f) => {\n  const as = fromIterable(self);\n  const out = [];\n  for (let i = 0; i < as.length; i++) {\n    const o = f(as[i], i);\n    if (O.isSome(o)) {\n      out.push(o.value);\n    }\n  }\n  return out;\n});\n/**\n * Applies a function to each element of the array and filters based on the result, stopping when a condition is not met.\n * This method combines filtering and mapping in a single pass, and short-circuits, i.e., stops processing, as soon as the function returns `None`.\n * This is useful when you need to transform an array but only up to the point where a certain condition holds true.\n *\n * @example\n * import { Array, Option } from \"effect\";\n *\n * const data = [2, 4, 5];\n * const toSquareTillOdd = (x: number) => x % 2 === 0 ? Option.some(x * x) : Option.none();\n * const result = Array.filterMapWhile(data, toSquareTillOdd);\n *\n * assert.deepStrictEqual(result, [4, 16]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const filterMapWhile = /*#__PURE__*/dual(2, (self, f) => {\n  let i = 0;\n  const out = [];\n  for (const a of self) {\n    const b = f(a, i);\n    if (O.isSome(b)) {\n      out.push(b.value);\n    } else {\n      break;\n    }\n    i++;\n  }\n  return out;\n});\n/**\n * Applies a function to each element of the `Iterable`, categorizing the results into two separate arrays.\n * This function is particularly useful for operations where each element can result in two possible types,\n * and you want to separate these types into different collections. For instance, separating validation results\n * into successes and failures.\n *\n * @example\n * import { Array, Either } from \"effect\";\n *\n * const data = [1, 2, 3, 4, 5]\n * const isEven = (x: number) => x % 2 === 0\n * const partitioned = Array.partitionMap(data, x =>\n *   isEven(x) ? Either.right(x) : Either.left(x)\n * )\n *\n * assert.deepStrictEqual(partitioned, [\n *   [1, 3, 5],\n *   [2, 4]\n * ])\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partitionMap = /*#__PURE__*/dual(2, (self, f) => {\n  const left = [];\n  const right = [];\n  const as = fromIterable(self);\n  for (let i = 0; i < as.length; i++) {\n    const e = f(as[i], i);\n    if (E.isLeft(e)) {\n      left.push(e.left);\n    } else {\n      right.push(e.right);\n    }\n  }\n  return [left, right];\n});\n/**\n * Retrieves the `Some` values from an `Iterable` of `Option`s, collecting them into an array.\n *\n * @example\n * import { Array, Option } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.getSomes([Option.some(1), Option.none(), Option.some(2)]),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getSomes = /*#__PURE__*/filterMap(identity);\n/**\n * Retrieves the `Left` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * @example\n * import { Array, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.getLefts([Either.right(1), Either.left(\"err\"), Either.right(2)]),\n *   [\"err\"]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getLefts = self => {\n  const out = [];\n  for (const a of self) {\n    if (E.isLeft(a)) {\n      out.push(a.left);\n    }\n  }\n  return out;\n};\n/**\n * Retrieves the `Right` values from an `Iterable` of `Either`s, collecting them into an array.\n *\n * @example\n * import { Array, Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Array.getRights([Either.right(1), Either.left(\"err\"), Either.right(2)]),\n *   [1, 2]\n * )\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const getRights = self => {\n  const out = [];\n  for (const a of self) {\n    if (E.isRight(a)) {\n      out.push(a.right);\n    }\n  }\n  return out;\n};\n/**\n * @category filtering\n * @since 2.0.0\n */\nexport const filter = /*#__PURE__*/dual(2, (self, predicate) => {\n  const as = fromIterable(self);\n  const out = [];\n  for (let i = 0; i < as.length; i++) {\n    if (predicate(as[i], i)) {\n      out.push(as[i]);\n    }\n  }\n  return out;\n});\n/**\n * Separate elements based on a predicate that also exposes the index of the element.\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const partition = /*#__PURE__*/dual(2, (self, predicate) => {\n  const left = [];\n  const right = [];\n  const as = fromIterable(self);\n  for (let i = 0; i < as.length; i++) {\n    if (predicate(as[i], i)) {\n      right.push(as[i]);\n    } else {\n      left.push(as[i]);\n    }\n  }\n  return [left, right];\n});\n/**\n * Separates an `Iterable` into two arrays based on a predicate.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3, 4]\n * const result = Array.partition(numbers, n => n % 2 === 0)\n * assert.deepStrictEqual(result, [[1, 3], [2, 4]])\n *\n * @category filtering\n * @since 2.0.0\n */\nexport const separate = /*#__PURE__*/partitionMap(identity);\n/**\n * Reduces an array from the left.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.reduce(numbers, 0, (acc, n) => acc + n)\n * assert.deepStrictEqual(result, 6)\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduce = /*#__PURE__*/dual(3, (self, b, f) => fromIterable(self).reduce((b, a, i) => f(b, a, i), b));\n/**\n * Reduces an array from the right.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.reduceRight(numbers, 0, (acc, n) => acc + n)\n * assert.deepStrictEqual(result, 6)\n *\n * @category folding\n * @since 2.0.0\n */\nexport const reduceRight = /*#__PURE__*/dual(3, (self, b, f) => fromIterable(self).reduceRight((b, a, i) => f(b, a, i), b));\n/**\n * Lifts a predicate into an array.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const isEven = (n: number) => n % 2 === 0\n * const to = Array.liftPredicate(isEven)\n * assert.deepStrictEqual(to(1), [])\n * assert.deepStrictEqual(to(2), [2])\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftPredicate = predicate => b => predicate(b) ? [b] : [];\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport const liftOption = f => (...a) => fromOption(f(...a));\n/**\n * @category conversions\n * @since 2.0.0\n */\nexport const fromNullable = a => a == null ? empty() : [a];\n/**\n * @category lifting\n * @since 2.0.0\n */\nexport const liftNullable = f => (...a) => fromNullable(f(...a));\n/**\n * Maps over an array and flattens the result, removing null and undefined values.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.flatMapNullable(numbers, n => (n % 2 === 0 ? null : n))\n * assert.deepStrictEqual(result, [1, 3])\n *\n * // Explanation:\n * // The array of numbers [1, 2, 3] is mapped with a function that returns null for even numbers\n * // and the number itself for odd numbers. The resulting array [1, null, 3] is then flattened\n * // to remove null values, resulting in [1, 3].\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMapNullable = /*#__PURE__*/dual(2, (self, f) => flatMap(self, a => fromNullable(f(a))));\n/**\n * Lifts a function that returns an `Either` into a function that returns an array.\n * If the `Either` is a left, it returns an empty array.\n * If the `Either` is a right, it returns an array with the right value.\n *\n * @example\n * import { Array, Either } from \"effect\"\n *\n * const parseNumber = (s: string): Either.Either<number, Error> =>\n *   isNaN(Number(s)) ? Either.left(new Error(\"Not a number\")) : Either.right(Number(s))\n *\n * const liftedParseNumber = Array.liftEither(parseNumber)\n *\n * const result1 = liftedParseNumber(\"42\")\n * assert.deepStrictEqual(result1, [42])\n *\n * const result2 = liftedParseNumber(\"not a number\")\n * assert.deepStrictEqual(result2, [])\n *\n * // Explanation:\n * // The function parseNumber is lifted to return an array.\n * // When parsing \"42\", it returns an Either.left with the number 42, resulting in [42].\n * // When parsing \"not a number\", it returns an Either.right with an error, resulting in an empty array [].\n *\n * @category lifting\n * @since 2.0.0\n */\nexport const liftEither = f => (...a) => {\n  const e = f(...a);\n  return E.isLeft(e) ? [] : [e.right];\n};\n/**\n * Check if a predicate holds true for every `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const every = /*#__PURE__*/dual(2, (self, refinement) => self.every(refinement));\n/**\n * Check if a predicate holds true for some `ReadonlyArray` element.\n *\n * @category elements\n * @since 2.0.0\n */\nexport const some = /*#__PURE__*/dual(2, (self, predicate) => self.some(predicate));\n/**\n * Extends an array with a function that maps each subarray to a value.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.extend(numbers, as => as.length)\n * assert.deepStrictEqual(result, [3, 2, 1])\n *\n * // Explanation:\n * // The function maps each subarray starting from each element to its length.\n * // The subarrays are: [1, 2, 3], [2, 3], [3].\n * // The lengths are: 3, 2, 1.\n * // Therefore, the result is [3, 2, 1].\n *\n * @since 2.0.0\n */\nexport const extend = /*#__PURE__*/dual(2, (self, f) => self.map((_, i, as) => f(as.slice(i))));\n/**\n * Finds the minimum element in an array based on a comparator.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const min = Array.min([3, 1, 2], Order.number)\n * assert.deepStrictEqual(min, 1)\n *\n * @since 2.0.0\n */\nexport const min = /*#__PURE__*/dual(2, (self, O) => self.reduce(Order.min(O)));\n/**\n * Finds the maximum element in an array based on a comparator.\n *\n * @example\n * import { Array, Order } from \"effect\"\n *\n * const max = Array.max([3, 1, 2], Order.number)\n * assert.deepStrictEqual(max, 3)\n *\n * @since 2.0.0\n */\nexport const max = /*#__PURE__*/dual(2, (self, O) => self.reduce(Order.max(O)));\n/**\n * @category constructors\n * @since 2.0.0\n */\nexport const unfold = (b, f) => {\n  const out = [];\n  let next = b;\n  let o;\n  while (O.isSome(o = f(next))) {\n    const [a, b] = o.value;\n    out.push(a);\n    next = b;\n  }\n  return out;\n};\n/**\n * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.\n * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.\n * If all elements are equal, the arrays are then compared based on their length.\n * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getOrder = Order.array;\n/**\n * Creates an equivalence relation for arrays.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers1 = [1, 2, 3]\n * const numbers2 = [1, 2, 3]\n * const eq = Array.getEquivalence<number>((a, b) => a === b)\n * assert.deepStrictEqual(eq(numbers1, numbers2), true)\n *\n * @category instances\n * @since 2.0.0\n */\nexport const getEquivalence = Equivalence.array;\n/**\n * Performs a side-effect for each element of the `Iterable`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * Array.forEach(numbers, n => console.log(n)) // 1, 2, 3\n *\n * @since 2.0.0\n */\nexport const forEach = /*#__PURE__*/dual(2, (self, f) => fromIterable(self).forEach((a, i) => f(a, i)));\n/**\n * Remove duplicates from an `Iterable` using the provided `isEquivalent` function,\n * preserving the order of the first occurrence of each element.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 2, 3, 3, 3]\n * const unique = Array.dedupeWith(numbers, (a, b) => a === b)\n * assert.deepStrictEqual(unique, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const dedupeWith = /*#__PURE__*/dual(2, (self, isEquivalent) => {\n  const input = fromIterable(self);\n  if (isNonEmptyReadonlyArray(input)) {\n    const out = [headNonEmpty(input)];\n    const rest = tailNonEmpty(input);\n    for (const r of rest) {\n      if (out.every(a => !isEquivalent(r, a))) {\n        out.push(r);\n      }\n    }\n    return out;\n  }\n  return [];\n});\n/**\n * Remove duplicates from an `Iterable`, preserving the order of the first occurrence of each element.\n * The equivalence used to compare elements is provided by `Equal.equivalence()` from the `Equal` module.\n *\n * @since 2.0.0\n */\nexport const dedupe = self => dedupeWith(self, Equal.equivalence());\n/**\n * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 1, 2, 2, 3, 3]\n * const unique = Array.dedupeAdjacentWith(numbers, (a, b) => a === b)\n * assert.deepStrictEqual(unique, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacentWith = /*#__PURE__*/dual(2, (self, isEquivalent) => {\n  const out = [];\n  let lastA = O.none();\n  for (const a of self) {\n    if (O.isNone(lastA) || !isEquivalent(a, lastA.value)) {\n      out.push(a);\n      lastA = O.some(a);\n    }\n  }\n  return out;\n});\n/**\n * Deduplicates adjacent elements that are identical.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 1, 2, 2, 3, 3]\n * const unique = Array.dedupeAdjacent(numbers)\n * assert.deepStrictEqual(unique, [1, 2, 3])\n *\n * @since 2.0.0\n */\nexport const dedupeAdjacent = /*#__PURE__*/dedupeAdjacentWith( /*#__PURE__*/Equal.equivalence());\n/**\n * Joins the elements together with \"sep\" in the middle.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const strings = [\"a\", \"b\", \"c\"]\n * const joined = Array.join(strings, \"-\")\n * assert.deepStrictEqual(joined, \"a-b-c\")\n *\n * @since 2.0.0\n * @category folding\n */\nexport const join = /*#__PURE__*/dual(2, (self, sep) => fromIterable(self).join(sep));\n/**\n * Statefully maps over the chunk, producing new elements of type `B`.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const numbers = [1, 2, 3]\n * const result = Array.mapAccum(numbers, 0, (acc, n) => [acc + n, acc + n])\n * assert.deepStrictEqual(result, [6, [1, 3, 6]])\n *\n * @since 2.0.0\n * @category folding\n */\nexport const mapAccum = /*#__PURE__*/dual(3, (self, s, f) => {\n  let i = 0;\n  let s1 = s;\n  const out = [];\n  for (const a of self) {\n    const r = f(s1, a, i);\n    s1 = r[0];\n    out.push(r[1]);\n    i++;\n  }\n  return [s1, out];\n});\n/**\n * Zips this chunk crosswise with the specified chunk using the specified combiner.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [\"a\", \"b\"]\n * const product = Array.cartesianWith(array1, array2, (a, b) => `${a}-${b}`)\n * assert.deepStrictEqual(product, [\"1-a\", \"1-b\", \"2-a\", \"2-b\"])\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesianWith = /*#__PURE__*/dual(3, (self, that, f) => flatMap(self, a => map(that, b => f(a, b))));\n/**\n * Zips this chunk crosswise with the specified chunk.\n *\n * @example\n * import { Array } from \"effect\"\n *\n * const array1 = [1, 2]\n * const array2 = [\"a\", \"b\"]\n * const product = Array.cartesian(array1, array2)\n * assert.deepStrictEqual(product, [[1, \"a\"], [1, \"b\"], [2, \"a\"], [2, \"b\"]])\n *\n * @since 2.0.0\n * @category elements\n */\nexport const cartesian = /*#__PURE__*/dual(2, (self, that) => cartesianWith(self, that, (a, b) => [a, b]));\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const Do = /*#__PURE__*/of({});\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const bind = /*#__PURE__*/doNotation.bind(map, flatMap);\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link Do}\n * @see {@link let_ let}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nexport const bindTo = /*#__PURE__*/doNotation.bindTo(map);\nconst let_ = /*#__PURE__*/doNotation.let_(map);\nexport {\n/**\n * The \"do simulation\" for array allows you to sequentially apply operations to the elements of arrays, just as nested loops allow you to go through all combinations of elements in an arrays.\n *\n * It can be used to simulate \"array comprehension\".\n * It's a technique that allows you to create new arrays by iterating over existing ones and applying specific **conditions** or **transformations** to the elements. It's like assembling a new collection from pieces of other collections based on certain rules.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Array` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n * 5. Regular `Option` functions like `map` and `filter` can still be used within the do simulation. These functions will receive the accumulated variables as arguments within the scope\n *\n * @see {@link bindTo}\n * @see {@link bind}\n * @see {@link Do}\n *\n * @example\n * import { Array as Arr, pipe } from \"effect\"\n * const doResult = pipe(\n *   Arr.Do,\n *   Arr.bind(\"x\", () => [1, 3, 5]),\n *   Arr.bind(\"y\", () => [2, 4, 6]),\n *   Arr.filter(({ x, y }) => x < y), // condition\n *   Arr.map(({ x, y }) => [x, y] as const) // transformation\n * )\n * assert.deepStrictEqual(doResult, [[1, 2], [1, 4], [1, 6], [3, 4], [3, 6], [5, 6]])\n *\n * // equivalent\n * const x = [1, 3, 5],\n *       y = [2, 4, 6],\n *       result = [];\n * for(let i = 0; i < x.length; i++) {\n *   for(let j = 0; j < y.length; j++) {\n *     const _x = x[i], _y = y[j];\n *     if(_x < _y) result.push([_x, _y] as const)\n *   }\n * }\n *\n * @category do notation\n * @since 3.2.0\n */\nlet_ as let };\n//# sourceMappingURL=Array.js.map","import * as Equal from \"../Equal.js\";\nimport { dual } from \"../Function.js\";\nimport * as Hash from \"../Hash.js\";\nimport { format, NodeInspectSymbol, toJSON } from \"../Inspectable.js\";\nimport { pipeArguments } from \"../Pipeable.js\";\nimport { hasProperty } from \"../Predicate.js\";\nimport { EffectPrototype, effectVariance } from \"./effectable.js\";\nimport * as option from \"./option.js\";\n/** @internal */\nexport const TagTypeId = /*#__PURE__*/Symbol.for(\"effect/Context/Tag\");\n/** @internal */\nconst STMSymbolKey = \"effect/STM\";\n/** @internal */\nexport const STMTypeId = /*#__PURE__*/Symbol.for(STMSymbolKey);\n/** @internal */\nexport const TagProto = {\n  ...EffectPrototype,\n  _op: \"Tag\",\n  [STMTypeId]: effectVariance,\n  [TagTypeId]: {\n    _Service: _ => _,\n    _Identifier: _ => _\n  },\n  toString() {\n    return format(this.toJSON());\n  },\n  toJSON() {\n    return {\n      _id: \"Tag\",\n      key: this.key,\n      stack: this.stack\n    };\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON();\n  },\n  of(self) {\n    return self;\n  },\n  context(self) {\n    return make(this, self);\n  }\n};\n/** @internal */\nexport const makeGenericTag = key => {\n  const limit = Error.stackTraceLimit;\n  Error.stackTraceLimit = 2;\n  const creationError = new Error();\n  Error.stackTraceLimit = limit;\n  const tag = Object.create(TagProto);\n  Object.defineProperty(tag, \"stack\", {\n    get() {\n      return creationError.stack;\n    }\n  });\n  tag.key = key;\n  return tag;\n};\n/** @internal */\nexport const Tag = id => () => {\n  const limit = Error.stackTraceLimit;\n  Error.stackTraceLimit = 2;\n  const creationError = new Error();\n  Error.stackTraceLimit = limit;\n  function TagClass() {}\n  Object.setPrototypeOf(TagClass, TagProto);\n  TagClass.key = id;\n  Object.defineProperty(TagClass, \"stack\", {\n    get() {\n      return creationError.stack;\n    }\n  });\n  return TagClass;\n};\n/** @internal */\nexport const TypeId = /*#__PURE__*/Symbol.for(\"effect/Context\");\n/** @internal */\nexport const ContextProto = {\n  [TypeId]: {\n    _Services: _ => _\n  },\n  [Equal.symbol](that) {\n    if (isContext(that)) {\n      if (this.unsafeMap.size === that.unsafeMap.size) {\n        for (const k of this.unsafeMap.keys()) {\n          if (!that.unsafeMap.has(k) || !Equal.equals(this.unsafeMap.get(k), that.unsafeMap.get(k))) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  },\n  [Hash.symbol]() {\n    return Hash.cached(this, Hash.number(this.unsafeMap.size));\n  },\n  pipe() {\n    return pipeArguments(this, arguments);\n  },\n  toString() {\n    return format(this.toJSON());\n  },\n  toJSON() {\n    return {\n      _id: \"Context\",\n      services: Array.from(this.unsafeMap).map(toJSON)\n    };\n  },\n  [NodeInspectSymbol]() {\n    return this.toJSON();\n  }\n};\n/** @internal */\nexport const makeContext = unsafeMap => {\n  const context = Object.create(ContextProto);\n  context.unsafeMap = unsafeMap;\n  return context;\n};\nconst serviceNotFoundError = tag => {\n  const error = new Error(`Service not found${tag.key ? `: ${String(tag.key)}` : \"\"}`);\n  if (tag.stack) {\n    const lines = tag.stack.split(\"\\n\");\n    if (lines.length > 2) {\n      const afterAt = lines[2].match(/at (.*)/);\n      if (afterAt) {\n        error.message = error.message + ` (defined at ${afterAt[1]})`;\n      }\n    }\n  }\n  if (error.stack) {\n    const lines = error.stack.split(\"\\n\");\n    lines.splice(1, 3);\n    error.stack = lines.join(\"\\n\");\n  }\n  return error;\n};\n/** @internal */\nexport const isContext = u => hasProperty(u, TypeId);\n/** @internal */\nexport const isTag = u => hasProperty(u, TagTypeId);\nconst _empty = /*#__PURE__*/makeContext( /*#__PURE__*/new Map());\n/** @internal */\nexport const empty = () => _empty;\n/** @internal */\nexport const make = (tag, service) => makeContext(new Map([[tag.key, service]]));\n/** @internal */\nexport const add = /*#__PURE__*/dual(3, (self, tag, service) => {\n  const map = new Map(self.unsafeMap);\n  map.set(tag.key, service);\n  return makeContext(map);\n});\n/** @internal */\nexport const unsafeGet = /*#__PURE__*/dual(2, (self, tag) => {\n  if (!self.unsafeMap.has(tag.key)) {\n    throw serviceNotFoundError(tag);\n  }\n  return self.unsafeMap.get(tag.key);\n});\n/** @internal */\nexport const get = unsafeGet;\n/** @internal */\nexport const getOrElse = /*#__PURE__*/dual(3, (self, tag, orElse) => {\n  if (!self.unsafeMap.has(tag.key)) {\n    return orElse();\n  }\n  return self.unsafeMap.get(tag.key);\n});\n/** @internal */\nexport const getOption = /*#__PURE__*/dual(2, (self, tag) => {\n  if (!self.unsafeMap.has(tag.key)) {\n    return option.none;\n  }\n  return option.some(self.unsafeMap.get(tag.key));\n});\n/** @internal */\nexport const merge = /*#__PURE__*/dual(2, (self, that) => {\n  const map = new Map(self.unsafeMap);\n  for (const [tag, s] of that.unsafeMap) {\n    map.set(tag, s);\n  }\n  return makeContext(map);\n});\n/** @internal */\nexport const pick = (...tags) => self => {\n  const tagSet = new Set(tags.map(_ => _.key));\n  const newEnv = new Map();\n  for (const [tag, s] of self.unsafeMap.entries()) {\n    if (tagSet.has(tag)) {\n      newEnv.set(tag, s);\n    }\n  }\n  return makeContext(newEnv);\n};\n/** @internal */\nexport const omit = (...tags) => self => {\n  const newEnv = new Map(self.unsafeMap);\n  for (const tag of tags) {\n    newEnv.delete(tag.key);\n  }\n  return makeContext(newEnv);\n};\n//# sourceMappingURL=context.js.map","import * as internal from \"./internal/context.js\";\nconst TagTypeId = internal.TagTypeId;\n/**\n * Creates a new `Tag` instance with an optional key parameter.\n *\n * @param key - A key that will be used to compare tags.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.GenericTag(\"PORT\").key === Context.GenericTag(\"PORT\").key, true)\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const GenericTag = internal.makeGenericTag;\nconst TypeId = internal.TypeId;\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const unsafeMake = internal.makeContext;\n/**\n * Checks if the provided argument is a `Context`.\n *\n * @param input - The value to be checked if it is a `Context`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n *\n * @since 2.0.0\n * @category guards\n */\nexport const isContext = internal.isContext;\n/**\n * Checks if the provided argument is a `Tag`.\n *\n * @param input - The value to be checked if it is a `Tag`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isTag(Context.GenericTag(\"Tag\")), true)\n *\n * @since 2.0.0\n * @category guards\n */\nexport const isTag = internal.isTag;\n/**\n * Returns an empty `Context`.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * assert.strictEqual(Context.isContext(Context.empty()), true)\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const empty = internal.empty;\n/**\n * Creates a new `Context` with a single service associated to the tag.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n *\n * @since 2.0.0\n * @category constructors\n */\nexport const make = internal.make;\n/**\n * Adds a service to a given `Context`.\n *\n * @example\n * import { Context, pipe } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = Context.make(Port, { PORT: 8080 })\n *\n * const Services = pipe(\n *   someContext,\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n */\nexport const add = internal.add;\n/**\n * Get a service from the context that corresponds to the given tag.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { pipe, Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n * @category getters\n */\nexport const get = internal.get;\n/**\n * Get a service from the context that corresponds to the given tag, or\n * use the fallback value.\n *\n * @since 3.7.0\n * @category getters\n */\nexport const getOrElse = internal.getOrElse;\n/**\n * Get a service from the context that corresponds to the given tag.\n * This function is unsafe because if the tag is not present in the context, a runtime error will be thrown.\n *\n * For a safer version see {@link getOption}.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.unsafeGet(Services, Port), { PORT: 8080 })\n * assert.throws(() => Context.unsafeGet(Services, Timeout))\n *\n * @since 2.0.0\n * @category unsafe\n */\nexport const unsafeGet = internal.unsafeGet;\n/**\n * Get the value associated with the specified tag from the context wrapped in an `Option` object. If the tag is not\n * found, the `Option` object will be `None`.\n *\n * @param self - The `Context` to search for the service.\n * @param tag - The `Tag` of the service to retrieve.\n *\n * @example\n * import { Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const Services = Context.make(Port, { PORT: 8080 })\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n *\n * @since 2.0.0\n * @category getters\n */\nexport const getOption = internal.getOption;\n/**\n * Merges two `Context`s, returning a new `Context` containing the services of both.\n *\n * @param self - The first `Context` to merge.\n * @param that - The second `Context` to merge.\n *\n * @example\n * import { Context } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const firstContext = Context.make(Port, { PORT: 8080 })\n * const secondContext = Context.make(Timeout, { TIMEOUT: 5000 })\n *\n * const Services = Context.merge(firstContext, secondContext)\n *\n * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })\n * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })\n *\n * @since 2.0.0\n */\nexport const merge = internal.merge;\n/**\n * Returns a new `Context` that contains only the specified services.\n *\n * @param self - The `Context` to prune services from.\n * @param tags - The list of `Tag`s to be included in the new `Context`.\n *\n * @example\n * import { pipe, Context, Option } from \"effect\"\n *\n * const Port = Context.GenericTag<{ PORT: number }>(\"Port\")\n * const Timeout = Context.GenericTag<{ TIMEOUT: number }>(\"Timeout\")\n *\n * const someContext = pipe(\n *   Context.make(Port, { PORT: 8080 }),\n *   Context.add(Timeout, { TIMEOUT: 5000 })\n * )\n *\n * const Services = pipe(someContext, Context.pick(Port))\n *\n * assert.deepStrictEqual(Context.getOption(Services, Port), Option.some({ PORT: 8080 }))\n * assert.deepStrictEqual(Context.getOption(Services, Timeout), Option.none())\n *\n * @since 2.0.0\n */\nexport const pick = internal.pick;\n/**\n * @since 2.0.0\n */\nexport const omit = internal.omit;\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport const Tag = internal.Tag;\n//# sourceMappingURL=Context.js.map","/** @internal */\nexport class SingleShotGen {\n  self;\n  called = false;\n  constructor(self) {\n    this.self = self;\n  }\n  next(a) {\n    return this.called ? {\n      value: a,\n      done: true\n    } : (this.called = true, {\n      value: this.self,\n      done: false\n    });\n  }\n  return(a) {\n    return {\n      value: a,\n      done: true\n    };\n  }\n  throw(e) {\n    throw e;\n  }\n  [Symbol.iterator]() {\n    return new SingleShotGen(this.self);\n  }\n}\n//# sourceMappingURL=singleShotGen.js.map","import * as Context from \"./Context.js\";\nimport * as Effectable from \"./Effectable.js\";\nimport * as Either from \"./Either.js\";\nimport { constTrue, constVoid, dual, identity } from \"./Function.js\";\nimport { globalValue } from \"./GlobalValue.js\";\nimport { NodeInspectSymbol, toStringUnknown } from \"./Inspectable.js\";\nimport * as doNotation from \"./internal/doNotation.js\";\nimport { StructuralPrototype } from \"./internal/effectable.js\";\nimport { SingleShotGen } from \"./internal/singleShotGen.js\";\nimport * as Option from \"./Option.js\";\nimport { pipeArguments } from \"./Pipeable.js\";\nimport { hasProperty, isIterable, isTagged } from \"./Predicate.js\";\nimport { YieldWrap, yieldWrapGet } from \"./Utils.js\";\n/**\n * @since 3.4.0\n * @experimental\n * @category type ids\n */\nexport const TypeId = /*#__PURE__*/Symbol.for(\"effect/Micro\");\n/**\n * @since 3.4.0\n * @experimental\n * @category symbols\n */\nexport const runSymbol = /*#__PURE__*/Symbol.for(\"effect/Micro/runSymbol\");\n/**\n * @since 3.4.0\n * @experimental\n * @category guards\n */\nexport const isMicro = u => typeof u === \"object\" && u !== null && TypeId in u;\n// ----------------------------------------------------------------------------\n// Microable\n// ----------------------------------------------------------------------------\nconst MicroProto = {\n  ...Effectable.EffectPrototype,\n  _op: \"Micro\",\n  [TypeId]: {\n    _A: identity,\n    _E: identity,\n    _R: identity\n  },\n  [Symbol.iterator]() {\n    return new SingleShotGen(new YieldWrap(this));\n  }\n};\nconst MicroBase = /*#__PURE__*/function () {\n  function Base() {}\n  Base.prototype = MicroProto;\n  return Base;\n}();\n/**\n * @since 3.8.4\n * @experimental\n * @category constructors\n */\nexport class Class extends MicroBase {\n  /**\n   * @since 3.8.4\n   * @experimental\n   */\n  [runSymbol](env, onExit) {\n    this.asMicro()[runSymbol](env, onExit);\n  }\n}\n// ----------------------------------------------------------------------------\n// MicroCause\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const MicroCauseTypeId = /*#__PURE__*/Symbol.for(\"effect/Micro/MicroCause\");\n/**\n * @since 3.6.6\n * @experimental\n * @category guards\n */\nexport const isMicroCause = self => hasProperty(self, MicroCauseTypeId);\nconst microCauseVariance = {\n  _E: identity\n};\nclass MicroCauseImpl extends globalThis.Error {\n  _tag;\n  traces;\n  [MicroCauseTypeId];\n  constructor(_tag, originalError, traces) {\n    const causeName = `MicroCause.${_tag}`;\n    let name;\n    let message;\n    let stack;\n    if (originalError instanceof globalThis.Error) {\n      name = `(${causeName}) ${originalError.name}`;\n      message = originalError.message;\n      const messageLines = message.split(\"\\n\").length;\n      stack = originalError.stack ? `(${causeName}) ${originalError.stack.split(\"\\n\").slice(0, messageLines + 3).join(\"\\n\")}` : `${name}: ${message}`;\n    } else {\n      name = causeName;\n      message = toStringUnknown(originalError, 0);\n      stack = `${name}: ${message}`;\n    }\n    if (traces.length > 0) {\n      stack += `\\n    ${traces.join(\"\\n    \")}`;\n    }\n    super(message);\n    this._tag = _tag;\n    this.traces = traces;\n    this[MicroCauseTypeId] = microCauseVariance;\n    this.name = name;\n    this.stack = stack;\n  }\n  pipe() {\n    return pipeArguments(this, arguments);\n  }\n  toString() {\n    return this.stack;\n  }\n  [NodeInspectSymbol]() {\n    return this.stack;\n  }\n}\nclass FailImpl extends MicroCauseImpl {\n  error;\n  constructor(error, traces = []) {\n    super(\"Fail\", error, traces);\n    this.error = error;\n  }\n}\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeFail = (error, traces = []) => new FailImpl(error, traces);\nclass DieImpl extends MicroCauseImpl {\n  defect;\n  constructor(defect, traces = []) {\n    super(\"Die\", defect, traces);\n    this.defect = defect;\n  }\n}\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeDie = (defect, traces = []) => new DieImpl(defect, traces);\nclass InterruptImpl extends MicroCauseImpl {\n  constructor(traces = []) {\n    super(\"Interrupt\", \"interrupted\", traces);\n  }\n}\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeInterrupt = (traces = []) => new InterruptImpl(traces);\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeIsFail = self => self._tag === \"Fail\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeIsDie = self => self._tag === \"Die\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeIsInterrupt = self => self._tag === \"Interrupt\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeSquash = self => self._tag === \"Fail\" ? self.error : self._tag === \"Die\" ? self.defect : self;\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroCause\n */\nexport const causeWithTrace = /*#__PURE__*/dual(2, (self, trace) => {\n  const traces = [...self.traces, trace];\n  switch (self._tag) {\n    case \"Die\":\n      return causeDie(self.defect, traces);\n    case \"Interrupt\":\n      return causeInterrupt(traces);\n    case \"Fail\":\n      return causeFail(self.error, traces);\n  }\n});\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitInterrupt = /*#__PURE__*/Either.left( /*#__PURE__*/causeInterrupt());\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitSucceed = Either.right;\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitFail = e => Either.left(causeFail(e));\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitDie = defect => Either.left(causeDie(defect));\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitFailCause = Either.left;\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsSuccess = Either.isRight;\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsFailure = Either.isLeft;\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsInterrupt = self => exitIsFailure(self) && self.left._tag === \"Interrupt\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsFail = self => exitIsFailure(self) && self.left._tag === \"Fail\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitIsDie = self => exitIsFailure(self) && self.left._tag === \"Die\";\n/**\n * @since 3.4.6\n * @experimental\n * @category MicroExit\n */\nexport const exitVoid = /*#__PURE__*/exitSucceed(void 0);\n// ----------------------------------------------------------------------------\n// env\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const EnvTypeId = /*#__PURE__*/Symbol.for(\"effect/Micro/Env\");\nconst EnvProto = {\n  [EnvTypeId]: {\n    _R: identity\n  },\n  pipe() {\n    return pipeArguments(this, arguments);\n  }\n};\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envMake = refs => {\n  const self = Object.create(EnvProto);\n  self.refs = refs;\n  return self;\n};\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envUnsafeMakeEmpty = () => {\n  const controller = new AbortController();\n  const refs = Object.create(null);\n  refs[currentAbortController.key] = controller;\n  refs[currentAbortSignal.key] = controller.signal;\n  refs[currentScheduler.key] = new MicroSchedulerDefault();\n  return envMake(refs);\n};\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envGet = /*#__PURE__*/dual(2, (self, ref) => ref.key in self.refs ? self.refs[ref.key] : ref.initial);\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envSet = /*#__PURE__*/dual(3, (self, ref, value) => {\n  const refs = Object.assign(Object.create(null), self.refs);\n  refs[ref.key] = value;\n  return envMake(refs);\n});\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const envMutate = /*#__PURE__*/dual(2, (self, f) => envMake(f(Object.assign(Object.create(null), self.refs))));\n/**\n * Access the given `Context.Tag` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const service = tag => make(function (env, onExit) {\n  onExit(exitSucceed(Context.get(envGet(env, currentContext), tag)));\n});\n/**\n * Access the given `Context.Tag` from the environment, without tracking the\n * dependency at the type level.\n *\n * It will return an `Option` of the service, depending on whether it is\n * available in the environment or not.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const serviceOption = tag => make(function (env, onExit) {\n  onExit(exitSucceed(Context.getOption(envGet(env, currentContext), tag)));\n});\n/**\n * Retrieve the current value of the given `EnvRef`.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const getEnvRef = envRef => make((env, onExit) => onExit(Either.right(envGet(env, envRef))));\n/**\n * Set the value of the given `EnvRef` for the duration of the effect.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const locally = /*#__PURE__*/dual(3, (self, fiberRef, value) => make((env, onExit) => self[runSymbol](envSet(env, fiberRef, value), onExit)));\n/**\n * Access the current `Context` from the environment.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const context = () => getEnvRef(currentContext);\n/**\n * Merge the given `Context` with the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const provideContext = /*#__PURE__*/dual(2, (self, provided) => make(function (env, onExit) {\n  const context = envGet(env, currentContext);\n  const nextEnv = envSet(env, currentContext, Context.merge(context, provided));\n  self[runSymbol](nextEnv, onExit);\n}));\n/**\n * Add the provided service to the current context.\n *\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const provideService = /*#__PURE__*/dual(3, (self, tag, service) => make(function (env, onExit) {\n  const context = envGet(env, currentContext);\n  const nextEnv = envSet(env, currentContext, Context.add(context, tag, service));\n  self[runSymbol](nextEnv, onExit);\n}));\n/**\n * Create a service using the provided `Micro` effect, and add it to the\n * current context.\n *\n * @since 3.4.6\n * @experimental\n * @category environment\n */\nexport const provideServiceEffect = /*#__PURE__*/dual(3, (self, tag, acquire) => flatMap(acquire, service => provideService(self, tag, service)));\nconst setImmediate = \"setImmediate\" in globalThis ? globalThis.setImmediate : f => setTimeout(f, 0);\n/**\n * @since 3.5.9\n * @experimental\n * @category scheduler\n */\nexport class MicroSchedulerDefault {\n  tasks = [];\n  running = false;\n  /**\n   * @since 3.5.9\n   */\n  scheduleTask(task, _priority) {\n    this.tasks.push(task);\n    if (!this.running) {\n      this.running = true;\n      setImmediate(this.afterScheduled);\n    }\n  }\n  /**\n   * @since 3.5.9\n   */\n  afterScheduled = () => {\n    this.running = false;\n    this.runTasks();\n  };\n  /**\n   * @since 3.5.9\n   */\n  runTasks() {\n    const tasks = this.tasks;\n    this.tasks = [];\n    for (let i = 0, len = tasks.length; i < len; i++) {\n      tasks[i]();\n    }\n  }\n  /**\n   * @since 3.5.9\n   */\n  shouldYield(_env) {\n    return false;\n  }\n  /**\n   * @since 3.5.9\n   */\n  flush() {\n    while (this.tasks.length > 0) {\n      this.runTasks();\n    }\n  }\n}\n// ========================================================================\n// Env refs\n// ========================================================================\n/**\n * @since 3.4.0\n * @experimental\n * @category environment\n */\nexport const EnvRefTypeId = /*#__PURE__*/Symbol.for(\"effect/Micro/EnvRef\");\nconst EnvRefProto = {\n  ...MicroProto,\n  [EnvRefTypeId]: EnvRefTypeId,\n  [runSymbol](env, onExit) {\n    getEnvRef(this)[runSymbol](env, onExit);\n  }\n};\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const envRefMake = (key, initial) => globalValue(key, () => {\n  const self = Object.create(EnvRefProto);\n  self.key = key;\n  self.initial = initial();\n  return self;\n});\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentAbortController = /*#__PURE__*/envRefMake(\"effect/Micro/currentAbortController\", () => undefined);\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentAbortSignal = /*#__PURE__*/envRefMake(\"effect/Micro/currentAbortSignal\", () => undefined);\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentContext = /*#__PURE__*/envRefMake(\"effect/Micro/currentContext\", () => Context.empty());\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentConcurrency = /*#__PURE__*/envRefMake(\"effect/Micro/currentConcurrency\", () => \"unbounded\");\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentMaxDepthBeforeYield = /*#__PURE__*/envRefMake(\"effect/Micro/currentMaxDepthBeforeYield\", () => 2048);\nconst currentInterruptible = /*#__PURE__*/envRefMake(\"effect/Micro/currentInterruptible\", () => true);\n/**\n * @since 3.4.0\n * @experimental\n * @category environment refs\n */\nexport const currentScheduler = /*#__PURE__*/envRefMake(\"effect/Micro/currentScheduler\", () => new MicroSchedulerDefault());\n/**\n * If you have a `Micro` that uses `concurrency: \"inherit\"`, you can use this\n * api to control the concurrency of that `Micro` when it is run.\n *\n * @since 3.4.0\n * @experimental\n * @category environment refs\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.forEach([1, 2, 3], (n) => Micro.succeed(n), {\n *   concurrency: \"inherit\"\n * }).pipe(\n *   Micro.withConcurrency(2) // use a concurrency of 2\n * )\n */\nexport const withConcurrency = /*#__PURE__*/dual(2, (self, concurrency) => locally(self, currentConcurrency, concurrency));\n// ----------------------------------------------------------------------------\n// constructors\n// ----------------------------------------------------------------------------\nconst microDepthState = /*#__PURE__*/globalValue(\"effect/Micro/microDepthState\", () => ({\n  depth: 0,\n  maxDepthBeforeYield: currentMaxDepthBeforeYield.initial\n}));\nconst unsafeMake = run => {\n  const self = Object.create(MicroProto);\n  self[runSymbol] = run;\n  return self;\n};\nconst unsafeMakeOptions = (run, checkAbort) => unsafeMake(function execute(env, onExit) {\n  if (checkAbort && env.refs[currentInterruptible.key] !== false && env.refs[currentAbortSignal.key].aborted) {\n    return onExit(exitInterrupt);\n  }\n  microDepthState.depth++;\n  if (microDepthState.depth === 1) {\n    microDepthState.maxDepthBeforeYield = envGet(env, currentMaxDepthBeforeYield);\n  }\n  const scheduler = env.refs[currentScheduler.key];\n  if (microDepthState.depth >= microDepthState.maxDepthBeforeYield || scheduler.shouldYield(env)) {\n    scheduler.scheduleTask(() => execute(env, onExit), 0);\n  } else {\n    try {\n      run(env, onExit);\n    } catch (err) {\n      onExit(exitDie(err));\n    }\n  }\n  microDepthState.depth--;\n});\n/**\n * A low-level constructor for creating a `Micro` effect. It takes a function\n * that receives an environment and a callback which should be called with the\n * result of the effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const make = run => unsafeMakeOptions(run, true);\n/**\n * Converts a `MicroExit` into a `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const fromExit = self => make(function (_env, onExit) {\n  onExit(self);\n});\n/**\n * Converts a lazy `MicroExit` into a `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const fromExitSync = self => make(function (_env, onExit) {\n  onExit(self());\n});\n/**\n * Creates a `Micro` effect that will succeed with the specified constant value.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const succeed = a => fromExit(exitSucceed(a));\n/**\n * Creates a `Micro` effect that will succeed with `Option.Some` of the value.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const succeedSome = a => succeed(Option.some(a));\n/**\n * Creates a `Micro` effect that will succeed with `Option.None`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const succeedNone = /*#__PURE__*/succeed( /*#__PURE__*/Option.none());\n/**\n * Creates a `Micro` effect that will fail with the specified error.\n *\n * This will result in a `CauseFail`, where the error is tracked at the\n * type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const fail = e => fromExit(exitFail(e));\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated error.\n *\n * This will result in a `CauseFail`, where the error is tracked at the\n * type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const failSync = e => make(function (_env, onExit) {\n  onExit(exitFail(e()));\n});\n/**\n * Creates a `Micro` effect that will die with the specified error.\n *\n * This will result in a `CauseDie`, where the error is not tracked at\n * the type level.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const die = defect => fromExit(exitDie(defect));\n/**\n * Creates a `Micro` effect that will fail with the specified `MicroCause`.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const failCause = cause => fromExit(exitFailCause(cause));\n/**\n * Creates a `Micro` effect that will fail with the lazily evaluated `MicroCause`.\n *\n * @since 3.4.6\n * @experimental\n * @category constructors\n */\nexport const failCauseSync = cause => fromExitSync(() => exitFailCause(cause()));\n/**\n * Creates a `Micro` effect that will succeed with the lazily evaluated value.\n *\n * If the evaluation of the value throws an error, the effect will fail with\n * `CauseDie`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const sync = evaluate => make(function (_env, onExit) {\n  onExit(exitSucceed(evaluate()));\n});\n/**\n * Converts an `Option` into a `Micro` effect, that will fail with\n * `NoSuchElementException` if the option is `None`. Otherwise, it will succeed with the\n * value of the option.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const fromOption = option => make(function (_env, onExit) {\n  onExit(option._tag === \"Some\" ? exitSucceed(option.value) : exitFail(new NoSuchElementException({})));\n});\n/**\n * Converts an `Either` into a `Micro` effect, that will fail with the left side\n * of the either if it is a `Left`. Otherwise, it will succeed with the right\n * side of the either.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const fromEither = either => make(function (_env, onExit) {\n  onExit(either._tag === \"Right\" ? either : exitFail(either.left));\n});\n/**\n * Lazily creates a `Micro` effect from the given side-effect.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const suspend = evaluate => make(function (env, onExit) {\n  evaluate()[runSymbol](env, onExit);\n});\nconst void_ = /*#__PURE__*/succeed(void 0);\nexport {\n/**\n * A `Micro` effect that will succeed with `void` (`undefined`).\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nvoid_ as void };\n/**\n * Create a `Micro` effect from an asynchronous computation.\n *\n * You can return a cleanup effect that will be run when the effect is aborted.\n * It is also passed an `AbortSignal` that is triggered when the effect is\n * aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const async = register => make(function (env, onExit) {\n  let resumed = false;\n  const controller = register.length > 1 ? new AbortController() : undefined;\n  const signal = envGet(env, currentAbortSignal);\n  let cleanup = undefined;\n  function onAbort() {\n    if (cleanup) {\n      resume(uninterruptible(andThen(cleanup, fromExit(exitInterrupt))));\n    } else {\n      resume(fromExit(exitInterrupt));\n    }\n    if (controller !== undefined) {\n      controller.abort();\n    }\n  }\n  function resume(effect) {\n    if (resumed) {\n      return;\n    }\n    resumed = true;\n    signal.removeEventListener(\"abort\", onAbort);\n    effect[runSymbol](env, onExit);\n  }\n  cleanup = controller === undefined ? register(resume) : register(resume, controller.signal);\n  if (resumed) return;\n  signal.addEventListener(\"abort\", onAbort);\n});\nconst try_ = options => make(function (_env, onExit) {\n  try {\n    onExit(exitSucceed(options.try()));\n  } catch (err) {\n    onExit(exitFail(options.catch(err)));\n  }\n});\nexport {\n/**\n * The `Micro` equivalent of a try / catch block, which allows you to map\n * thrown errors to a specific error type.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n * @example\n * import { Micro } from \"effect\"\n *\n * Micro.try({\n *   try: () => throw new Error(\"boom\"),\n *   catch: (cause) => new Error(\"caught\", { cause })\n * })\n */\ntry_ as try };\n/**\n * Wrap a `Promise` into a `Micro` effect. Any errors will result in a\n * `CauseDie`.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const promise = evaluate => async(function (resume, signal) {\n  evaluate(signal).then(a => resume(succeed(a)), e => resume(die(e)));\n});\n/**\n * Wrap a `Promise` into a `Micro` effect. Any errors will be caught and\n * converted into a specific error type.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n * @example\n * import { Micro } from \"effect\"\n *\n * Micro.tryPromise({\n *   try: () => Promise.resolve(\"success\"),\n *   catch: (cause) => new Error(\"caught\", { cause })\n * })\n */\nexport const tryPromise = options => async(function (resume, signal) {\n  try {\n    options.try(signal).then(a => resume(succeed(a)), e => resume(fail(options.catch(e))));\n  } catch (err) {\n    resume(fail(options.catch(err)));\n  }\n});\n/**\n * Pause the execution of the current `Micro` effect, and resume it on the next\n * iteration of the event loop.\n *\n * You can specify a priority for the task, which will determine when it is\n * executed relative to other tasks.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const yieldWithPriority = priority => make(function (env, onExit) {\n  envGet(env, currentScheduler).scheduleTask(() => onExit(exitVoid), priority);\n});\n/**\n * Pause the execution of the current `Micro` effect, and resume it on the next\n * iteration of the event loop.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const yieldNow = /*#__PURE__*/yieldWithPriority(0);\n/**\n * Flush any yielded effects that are waiting to be executed.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const yieldFlush = /*#__PURE__*/make(function (env, onExit) {\n  envGet(env, currentScheduler).flush();\n  onExit(exitVoid);\n});\n/**\n * A `Micro` that will never succeed or fail. It wraps `setInterval` to prevent\n * the Javascript runtime from exiting.\n *\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const never = /*#__PURE__*/async(function () {\n  const interval = setInterval(constVoid, 2147483646);\n  return sync(() => clearInterval(interval));\n});\n/**\n * @since 3.4.0\n * @experimental\n * @category constructors\n */\nexport const gen = (...args) => make(function (env, onExit) {\n  const iterator = args.length === 1 ? args[0]() : args[1].call(args[0]);\n  let running = false;\n  let value = undefined;\n  function run() {\n    running = true;\n    try {\n      let shouldContinue = true;\n      while (shouldContinue) {\n        const result = iterator.next(value);\n        if (result.done) {\n          return onExit(exitSucceed(result.value));\n        }\n        shouldContinue = false;\n        yieldWrapGet(result.value)[runSymbol](env, function (exit) {\n          if (exit._tag === \"Left\") {\n            onExit(exit);\n          } else {\n            shouldContinue = true;\n            value = exit.right;\n            if (!running) run();\n          }\n        });\n      }\n    } catch (err) {\n      onExit(exitDie(err));\n    }\n    running = false;\n  }\n  run();\n});\n// ----------------------------------------------------------------------------\n// mapping & sequencing\n// ----------------------------------------------------------------------------\n/**\n * Flattens any nested `Micro` effects, merging the error and requirement types.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const flatten = self => make(function (env, onExit) {\n  self[runSymbol](env, exit => exit._tag === \"Left\" ? onExit(exit) : exit.right[runSymbol](env, onExit));\n});\n/**\n * Transforms the success value of the `Micro` effect with the specified\n * function.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const map = /*#__PURE__*/dual(2, (self, f) => make(function (env, onExit) {\n  self[runSymbol](env, function (exit) {\n    onExit(exit._tag === \"Left\" ? exit : exitSucceed(f(exit.right)));\n  });\n}));\n/**\n * Create a `Micro` effect that will replace the success value of the given\n * effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const as = /*#__PURE__*/dual(2, (self, value) => map(self, _ => value));\n/**\n * Wrap the success value of this `Micro` effect in an `Option.Some`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const asSome = self => map(self, Option.some);\n/**\n * Map the success value of this `Micro` effect to another `Micro` effect, then\n * flatten the result.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const flatMap = /*#__PURE__*/dual(2, (self, f) => make(function (env, onExit) {\n  self[runSymbol](env, function (exit) {\n    if (exit._tag === \"Left\") {\n      return onExit(exit);\n    }\n    f(exit.right)[runSymbol](env, onExit);\n  });\n}));\n/**\n * Swap the error and success types of the `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const flip = self => matchEffect(self, {\n  onFailure: succeed,\n  onSuccess: fail\n});\n/**\n * A more flexible version of `flatMap`, that combines `map` and `flatMap` into\n * a single api.\n *\n * It also allows you to pass in a `Micro` effect directly, which will be\n * executed after the current effect.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const andThen = /*#__PURE__*/dual(2, (self, f) => make(function (env, onExit) {\n  self[runSymbol](env, function (exit) {\n    if (exit._tag === \"Left\") {\n      return onExit(exit);\n    } else if (envGet(env, currentAbortSignal).aborted) {\n      return onExit(exitInterrupt);\n    }\n    const value = isMicro(f) ? f : typeof f === \"function\" ? f(exit.right) : f;\n    if (isMicro(value)) {\n      value[runSymbol](env, onExit);\n    } else {\n      onExit(exitSucceed(value));\n    }\n  });\n}));\n/**\n * Execute a side effect from the success value of the `Micro` effect.\n *\n * It is similar to the `andThen` api, but the success value is ignored.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const tap = /*#__PURE__*/dual(2, (self, f) => make(function (env, onExit) {\n  self[runSymbol](env, function (selfExit) {\n    if (selfExit._tag === \"Left\") {\n      return onExit(selfExit);\n    } else if (envGet(env, currentAbortSignal).aborted) {\n      return onExit(exitInterrupt);\n    }\n    const value = isMicro(f) ? f : typeof f === \"function\" ? f(selfExit.right) : f;\n    if (isMicro(value)) {\n      value[runSymbol](env, function (tapExit) {\n        if (tapExit._tag === \"Left\") {\n          return onExit(tapExit);\n        }\n        onExit(selfExit);\n      });\n    } else {\n      onExit(selfExit);\n    }\n  });\n}));\n/**\n * Replace the success value of the `Micro` effect with `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const asVoid = self => map(self, _ => void 0);\n/**\n * Access the `MicroExit` of the given `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category mapping & sequencing\n */\nexport const exit = self => make(function (env, onExit) {\n  self[runSymbol](env, function (exit) {\n    onExit(exitSucceed(exit));\n  });\n});\n/**\n * Replace the error type of the given `Micro` with the full `MicroCause` object.\n *\n * @since 3.4.0\n * @experimental\n * @category mapping & sequencing\n */\nexport const sandbox = self => catchAllCause(self, cause => fail(cause));\nfunction forkSignal(env) {\n  const controller = new AbortController();\n  const parentSignal = envGet(env, currentAbortSignal);\n  function onAbort() {\n    controller.abort();\n    parentSignal.removeEventListener(\"abort\", onAbort);\n  }\n  parentSignal.addEventListener(\"abort\", onAbort);\n  const envWithSignal = envMutate(env, function (refs) {\n    refs[currentAbortController.key] = controller;\n    refs[currentAbortSignal.key] = controller.signal;\n    return refs;\n  });\n  return [envWithSignal, onAbort];\n}\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed with a value. Losers of\n * the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const raceAll = all => make(function (env, onExit) {\n  const [envWithSignal, onAbort] = forkSignal(env);\n  const effects = Array.from(all);\n  let len = effects.length;\n  let index = 0;\n  let done = 0;\n  let exit = undefined;\n  const causes = [];\n  function onDone(exit_) {\n    done++;\n    if (exit_._tag === \"Right\" && exit === undefined) {\n      len = index;\n      exit = exit_;\n      onAbort();\n    } else if (exit_._tag === \"Left\") {\n      causes.push(exit_.left);\n    }\n    if (done >= len) {\n      onExit(exit ?? Either.left(causes[0]));\n    }\n  }\n  for (; index < len; index++) {\n    effects[index][runSymbol](envWithSignal, onDone);\n  }\n});\n/**\n * Returns an effect that races all the specified effects,\n * yielding the value of the first effect to succeed or fail. Losers of\n * the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const raceAllFirst = all => make(function (env, onExit) {\n  const [envWithSignal, onAbort] = forkSignal(env);\n  const effects = Array.from(all);\n  let len = effects.length;\n  let index = 0;\n  let done = 0;\n  let exit = undefined;\n  const causes = [];\n  function onDone(exit_) {\n    done++;\n    if (exit === undefined) {\n      len = index;\n      exit = exit_;\n      onAbort();\n    }\n    if (done >= len) {\n      onExit(exit ?? Either.left(causes[0]));\n    }\n  }\n  for (; index < len; index++) {\n    effects[index][runSymbol](envWithSignal, onDone);\n  }\n});\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed. Losers of the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const race = /*#__PURE__*/dual(2, (self, that) => raceAll([self, that]));\n/**\n * Returns an effect that races two effects, yielding the value of the first\n * effect to succeed *or* fail. Losers of the race will be interrupted immediately\n *\n * @since 3.4.0\n * @experimental\n * @category sequencing\n */\nexport const raceFirst = /*#__PURE__*/dual(2, (self, that) => raceAllFirst([self, that]));\n// ----------------------------------------------------------------------------\n// zipping\n// ----------------------------------------------------------------------------\n/**\n * Combine two `Micro` effects into a single effect that produces a tuple of\n * their results.\n *\n * @since 3.4.0\n * @experimental\n * @category zipping\n */\nexport const zip = /*#__PURE__*/dual(args => isMicro(args[1]), (self, that, options) => zipWith(self, that, (a, a2) => [a, a2], options));\n/**\n * The `Micro.zipWith` function combines two `Micro` effects and allows you to\n * apply a function to the results of the combined effects, transforming them\n * into a single value.\n *\n * @since 3.4.3\n * @experimental\n * @category zipping\n */\nexport const zipWith = /*#__PURE__*/dual(args => isMicro(args[1]), (self, that, f, options) => {\n  if (options?.concurrent) {\n    // Use `all` exclusively for concurrent cases, as it introduces additional overhead due to the management of concurrency\n    return map(all([self, that], {\n      concurrency: \"unbounded\"\n    }), ([a, a2]) => f(a, a2));\n  }\n  return flatMap(self, a => map(that, a2 => f(a, a2)));\n});\n// ----------------------------------------------------------------------------\n// filtering & conditionals\n// ----------------------------------------------------------------------------\n/**\n * Filter the specified effect with the provided function, failing with specified\n * `MicroCause` if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nexport const filterOrFailCause = /*#__PURE__*/dual(args => isMicro(args[0]), (self, refinement, orFailWith) => flatMap(self, a => refinement(a) ? succeed(a) : failCause(orFailWith(a))));\n/**\n * Filter the specified effect with the provided function, failing with specified\n * error if the predicate fails.\n *\n * In addition to the filtering capabilities discussed earlier, you have the option to further\n * refine and narrow down the type of the success channel by providing a\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nexport const filterOrFail = /*#__PURE__*/dual(args => isMicro(args[0]), (self, refinement, orFailWith) => flatMap(self, a => refinement(a) ? succeed(a) : fail(orFailWith(a))));\n/**\n * The moral equivalent of `if (p) exp`.\n *\n * @since 3.4.0\n * @experimental\n * @category filtering & conditionals\n */\nexport const when = /*#__PURE__*/dual(2, (self, condition) => flatMap(isMicro(condition) ? condition : sync(condition), pass => pass ? asSome(self) : succeed(Option.none())));\n// ----------------------------------------------------------------------------\n// repetition\n// ----------------------------------------------------------------------------\n/**\n * Repeat the given `Micro` using the provided options.\n *\n * The `while` predicate will be checked after each iteration, and can use the\n * fall `MicroExit` of the effect to determine if the repetition should continue.\n *\n * @since 3.4.6\n * @experimental\n * @category repetition\n */\nexport const repeatExit = /*#__PURE__*/dual(2, (self, options) => make(function (env, onExit) {\n  const startedAt = options.schedule ? Date.now() : 0;\n  let attempt = 0;\n  self[runSymbol](env, function loop(exit) {\n    if (options.while !== undefined && !options.while(exit)) {\n      return onExit(exit);\n    } else if (options.times !== undefined && attempt >= options.times) {\n      return onExit(exit);\n    }\n    attempt++;\n    let delayEffect = yieldNow;\n    if (options.schedule !== undefined) {\n      const elapsed = Date.now() - startedAt;\n      const duration = options.schedule(attempt, elapsed);\n      if (Option.isNone(duration)) {\n        return onExit(exit);\n      }\n      delayEffect = sleep(duration.value);\n    }\n    delayEffect[runSymbol](env, function (exit) {\n      if (exit._tag === \"Left\") {\n        return onExit(exit);\n      }\n      self[runSymbol](env, loop);\n    });\n  });\n}));\n/**\n * Repeat the given `Micro` effect using the provided options. Only successful\n * results will be repeated.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */\nexport const repeat = /*#__PURE__*/dual(args => isMicro(args[0]), (self, options) => repeatExit(self, {\n  ...options,\n  while: exit => exit._tag === \"Right\" && (options?.while === undefined || options.while(exit.right))\n}));\n/**\n * Repeat the given `Micro` effect forever, only stopping if the effect fails.\n *\n * @since 3.4.0\n * @experimental\n * @category repetition\n */\nexport const forever = self => repeat(self);\n/**\n * Create a `MicroSchedule` that will stop repeating after the specified number\n * of attempts.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleRecurs = n => attempt => attempt <= n ? Option.some(0) : Option.none();\n/**\n * Create a `MicroSchedule` that will generate a constant delay.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleSpaced = millis => () => Option.some(millis);\n/**\n * Create a `MicroSchedule` that will generate a delay with an exponential backoff.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleExponential = (baseMillis, factor = 2) => attempt => Option.some(Math.pow(factor, attempt) * baseMillis);\n/**\n * Returns a new `MicroSchedule` with an added calculated delay to each delay\n * returned by this schedule.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleAddDelay = /*#__PURE__*/dual(2, (self, f) => (attempt, elapsed) => Option.map(self(attempt, elapsed), duration => duration + f()));\n/**\n * Transform a `MicroSchedule` to one that will have a delay that will never exceed\n * the specified maximum.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleWithMaxDelay = /*#__PURE__*/dual(2, (self, max) => (attempt, elapsed) => Option.map(self(attempt, elapsed), duration => Math.min(duration, max)));\n/**\n * Transform a `MicroSchedule` to one that will stop repeating after the specified\n * amount of time.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleWithMaxElapsed = /*#__PURE__*/dual(2, (self, max) => (attempt, elapsed) => elapsed < max ? self(attempt, elapsed) : Option.none());\n/**\n * Combines two `MicroSchedule`s, by recurring if either schedule wants to\n * recur, using the minimum of the two durations between recurrences.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleUnion = /*#__PURE__*/dual(2, (self, that) => (attempt, elapsed) => Option.zipWith(self(attempt, elapsed), that(attempt, elapsed), (d1, d2) => Math.min(d1, d2)));\n/**\n * Combines two `MicroSchedule`s, by recurring only if both schedules want to\n * recur, using the maximum of the two durations between recurrences.\n *\n * @since 3.4.6\n * @experimental\n * @category scheduling\n */\nexport const scheduleIntersect = /*#__PURE__*/dual(2, (self, that) => (attempt, elapsed) => Option.zipWith(self(attempt, elapsed), that(attempt, elapsed), (d1, d2) => Math.max(d1, d2)));\n// ----------------------------------------------------------------------------\n// error handling\n// ----------------------------------------------------------------------------\n/**\n * Catch the full `MicroCause` object of the given `Micro` effect, allowing you to\n * recover from any kind of cause.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchAllCause = /*#__PURE__*/dual(2, (self, f) => catchCauseIf(self, constTrue, f));\n/**\n * Selectively catch a `MicroCause` object of the given `Micro` effect,\n * using the provided predicate to determine if the failure should be caught.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchCauseIf = /*#__PURE__*/dual(3, (self, predicate, f) => make(function (env, onExit) {\n  self[runSymbol](env, function (exit) {\n    if (exit._tag === \"Right\" || !predicate(exit.left)) {\n      onExit(exit);\n    } else {\n      f(exit.left)[runSymbol](env, onExit);\n    }\n  });\n}));\n/**\n * Catch the error of the given `Micro` effect, allowing you to recover from it.\n *\n * It only catches expected (`MicroCause.Fail`) errors.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchAll = /*#__PURE__*/dual(2, (self, f) => catchAllCause(self, cause => causeIsFail(cause) ? f(cause.error) : failCause(cause)));\n/**\n * Catch any unexpected errors of the given `Micro` effect, allowing you to recover from them.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const catchAllDefect = /*#__PURE__*/dual(2, (self, f) => catchCauseIf(self, causeIsDie, die => f(die.defect)));\n/**\n * Perform a side effect using the full `MicroCause` object of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const tapErrorCause = /*#__PURE__*/dual(2, (self, f) => tapErrorCauseIf(self, constTrue, f));\n/**\n * Perform a side effect using if a `MicroCause` object matches the specified\n * predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const tapErrorCauseIf = /*#__PURE__*/dual(3, (self, refinement, f) => catchCauseIf(self, refinement, cause => andThen(f(cause), failCause(cause))));\n/**\n * Perform a side effect from expected errors of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const tapError = /*#__PURE__*/dual(2, (self, f) => tapErrorCauseIf(self, causeIsFail, fail => f(fail.error)));\n/**\n * Perform a side effect from unexpected errors of the given `Micro`.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const tapDefect = /*#__PURE__*/dual(2, (self, f) => tapErrorCauseIf(self, causeIsDie, die => f(die.defect)));\n/**\n * Catch any expected errors that match the specified predicate.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const catchIf = /*#__PURE__*/dual(3, (self, predicate, f) => catchCauseIf(self, f => causeIsFail(f) && predicate(f.error), fail => f(fail.error)));\n/**\n * Recovers from the specified tagged error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const catchTag = /*#__PURE__*/dual(3, (self, k, f) => catchIf(self, isTagged(k), f));\n/**\n * Transform the full `MicroCause` object of the given `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category error handling\n */\nexport const mapErrorCause = /*#__PURE__*/dual(2, (self, f) => catchAllCause(self, cause => failCause(f(cause))));\n/**\n * Transform any expected errors of the given `Micro` effect.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const mapError = /*#__PURE__*/dual(2, (self, f) => catchAll(self, error => fail(f(error))));\n/**\n * Elevate any expected errors of the given `Micro` effect to unexpected errors,\n * resulting in an error type of `never`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const orDie = self => catchAll(self, die);\n/**\n * Recover from all errors by succeeding with the given value.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const orElseSucceed = /*#__PURE__*/dual(2, (self, f) => catchAll(self, _ => sync(f)));\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const ignore = self => matchEffect(self, {\n  onFailure: _ => void_,\n  onSuccess: _ => void_\n});\n/**\n * Ignore any expected errors of the given `Micro` effect, returning `void`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const ignoreLogged = self => matchEffect(self, {\n  // eslint-disable-next-line no-console\n  onFailure: error => sync(() => console.error(error)),\n  onSuccess: _ => void_\n});\n/**\n * Replace the success value of the given `Micro` effect with an `Option`,\n * wrapping the success value in `Some` and returning `None` if the effect fails\n * with an expected error.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const option = self => match(self, {\n  onFailure: _ => Option.none(),\n  onSuccess: Option.some\n});\n/**\n * Replace the success value of the given `Micro` effect with an `Either`,\n * wrapping the success value in `Right` and wrapping any expected errors with\n * a `Left`.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const either = self => match(self, {\n  onFailure: Either.left,\n  onSuccess: Either.right\n});\n/**\n * Retry the given `Micro` effect using the provided options.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const retry = /*#__PURE__*/dual(args => isMicro(args[0]), (self, options) => repeatExit(self, {\n  ...options,\n  while: exit => exit._tag === \"Left\" && exit.left._tag === \"Fail\" && (options?.while === undefined || options.while(exit.left.error))\n}));\n/**\n * Add a stack trace to any failures that occur in the effect. The trace will be\n * added to the `traces` field of the `MicroCause` object.\n *\n * @since 3.4.0\n * @experimental\n * @category error handling\n */\nexport const withTrace = function () {\n  const prevLimit = globalThis.Error.stackTraceLimit;\n  globalThis.Error.stackTraceLimit = 2;\n  const error = new globalThis.Error();\n  globalThis.Error.stackTraceLimit = prevLimit;\n  function generate(name, cause) {\n    const stack = error.stack;\n    if (!stack) {\n      return cause;\n    }\n    const line = stack.split(\"\\n\")[2]?.trim().replace(/^at /, \"\");\n    if (!line) {\n      return cause;\n    }\n    const lineMatch = line.match(/\\((.*)\\)$/);\n    return causeWithTrace(cause, `at ${name} (${lineMatch ? lineMatch[1] : line})`);\n  }\n  const f = name => self => unsafeMakeOptions(function (env, onExit) {\n    self[runSymbol](env, function (exit) {\n      onExit(exit._tag === \"Left\" ? Either.left(generate(name, exit.left)) : exit);\n    });\n  }, false);\n  if (arguments.length === 2) {\n    return f(arguments[1])(arguments[0]);\n  }\n  return f(arguments[0]);\n};\n// ----------------------------------------------------------------------------\n// pattern matching\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nexport const matchCauseEffect = /*#__PURE__*/dual(2, (self, options) => make(function (env, onExit) {\n  self[runSymbol](env, function (exit) {\n    try {\n      const next = exit._tag === \"Left\" ? options.onFailure(exit.left) : options.onSuccess(exit.right);\n      next[runSymbol](env, onExit);\n    } catch (err) {\n      onExit(exitDie(err));\n    }\n  });\n}));\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nexport const matchCause = /*#__PURE__*/dual(2, (self, options) => matchCauseEffect(self, {\n  onFailure: cause => sync(() => options.onFailure(cause)),\n  onSuccess: value => sync(() => options.onSuccess(value))\n}));\n/**\n * @since 3.4.6\n * @experimental\n * @category pattern matching\n */\nexport const matchEffect = /*#__PURE__*/dual(2, (self, options) => matchCauseEffect(self, {\n  onFailure: cause => cause._tag === \"Fail\" ? options.onFailure(cause.error) : failCause(cause),\n  onSuccess: options.onSuccess\n}));\n/**\n * @since 3.4.0\n * @experimental\n * @category pattern matching\n */\nexport const match = /*#__PURE__*/dual(2, (self, options) => matchEffect(self, {\n  onFailure: error => sync(() => options.onFailure(error)),\n  onSuccess: value => sync(() => options.onSuccess(value))\n}));\n// ----------------------------------------------------------------------------\n// delays & timeouts\n// ----------------------------------------------------------------------------\n/**\n * Create a `Micro` effect that will sleep for the specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const sleep = millis => async(function (resume) {\n  const timeout = setTimeout(function () {\n    resume(void_);\n  }, millis);\n  return sync(() => {\n    return clearTimeout(timeout);\n  });\n});\n/**\n * Returns an effect that will delay the execution of this effect by the\n * specified duration.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const delay = /*#__PURE__*/dual(2, (self, millis) => andThen(sleep(millis), self));\n/**\n * Returns an effect that will timeout this effect, that will execute the\n * fallback effect if the timeout elapses before the effect has produced a value.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const timeoutOrElse = /*#__PURE__*/dual(2, (self, options) => raceFirst(self, andThen(interruptible(sleep(options.duration)), options.onTimeout)));\n/**\n * Returns an effect that will timeout this effect, that will fail with a\n * `TimeoutException` if the timeout elapses before the effect has produced a\n * value.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const timeout = /*#__PURE__*/dual(2, (self, millis) => timeoutOrElse(self, {\n  duration: millis,\n  onTimeout: () => fail(new TimeoutException())\n}));\n/**\n * Returns an effect that will timeout this effect, succeeding with a `None`\n * if the timeout elapses before the effect has produced a value; and `Some` of\n * the produced value otherwise.\n *\n * If the timeout elapses, the running effect will be safely interrupted.\n *\n * @since 3.4.0\n * @experimental\n * @category delays & timeouts\n */\nexport const timeoutOption = /*#__PURE__*/dual(2, (self, millis) => raceFirst(asSome(self), as(interruptible(sleep(millis)), Option.none())));\n// ----------------------------------------------------------------------------\n// resources & finalization\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const MicroScopeTypeId = /*#__PURE__*/Symbol.for(\"effect/Micro/MicroScope\");\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const MicroScope = /*#__PURE__*/Context.GenericTag(\"effect/Micro/MicroScope\");\nclass MicroScopeImpl {\n  [MicroScopeTypeId];\n  state = {\n    _tag: \"Open\",\n    finalizers: /*#__PURE__*/new Set()\n  };\n  constructor() {\n    this[MicroScopeTypeId] = MicroScopeTypeId;\n  }\n  unsafeAddFinalizer(finalizer) {\n    if (this.state._tag === \"Open\") {\n      this.state.finalizers.add(finalizer);\n    }\n  }\n  addFinalizer(finalizer) {\n    return suspend(() => {\n      if (this.state._tag === \"Open\") {\n        this.state.finalizers.add(finalizer);\n        return void_;\n      }\n      return finalizer(this.state.exit);\n    });\n  }\n  unsafeRemoveFinalizer(finalizer) {\n    if (this.state._tag === \"Open\") {\n      this.state.finalizers.delete(finalizer);\n    }\n  }\n  close(microExit) {\n    return suspend(() => {\n      if (this.state._tag === \"Open\") {\n        const finalizers = Array.from(this.state.finalizers).reverse();\n        this.state = {\n          _tag: \"Closed\",\n          exit: microExit\n        };\n        return flatMap(forEach(finalizers, finalizer => exit(finalizer(microExit))), exits => asVoid(fromExit(Either.all(exits))));\n      }\n      return void_;\n    });\n  }\n  get fork() {\n    return sync(() => {\n      const newScope = new MicroScopeImpl();\n      if (this.state._tag === \"Closed\") {\n        newScope.state = this.state;\n        return newScope;\n      }\n      function fin(exit) {\n        return newScope.close(exit);\n      }\n      this.state.finalizers.add(fin);\n      newScope.unsafeAddFinalizer(_ => sync(() => this.unsafeRemoveFinalizer(fin)));\n      return newScope;\n    });\n  }\n}\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scopeMake = /*#__PURE__*/sync(() => new MicroScopeImpl());\n/**\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scopeUnsafeMake = () => new MicroScopeImpl();\n/**\n * Access the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scope = /*#__PURE__*/service(MicroScope);\n/**\n * Provide a `MicroScope` to an effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const provideScope = /*#__PURE__*/dual(2, (self, scope) => provideService(self, MicroScope, scope));\n/**\n * Provide a `MicroScope` to the given effect, closing it after the effect has\n * finished executing.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const scoped = self => suspend(function () {\n  const scope = new MicroScopeImpl();\n  return onExit(provideService(self, MicroScope, scope), exit => scope.close(exit));\n});\n/**\n * Create a resource with a cleanup `Micro` effect, ensuring the cleanup is\n * executed when the `MicroScope` is closed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const acquireRelease = (acquire, release) => uninterruptible(flatMap(scope, scope => tap(acquire, a => scope.addFinalizer(exit => release(a, exit)))));\n/**\n * Add a finalizer to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const addFinalizer = finalizer => flatMap(scope, scope => scope.addFinalizer(finalizer));\n/**\n * When the `Micro` effect is completed, run the given finalizer effect with the\n * `MicroExit` of the executed effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onExit = /*#__PURE__*/dual(2, (self, f) => onExitIf(self, constTrue, f));\n/**\n * When the `Micro` effect is completed, run the given finalizer effect if it\n * matches the specified predicate.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onExitIf = /*#__PURE__*/dual(3, (self, refinement, f) => uninterruptibleMask(restore => make(function (env, onExit) {\n  restore(self)[runSymbol](env, function (exit) {\n    if (!refinement(exit)) {\n      return onExit(exit);\n    }\n    f(exit)[runSymbol](env, function (finalizerExit) {\n      if (finalizerExit._tag === \"Left\") {\n        return onExit(finalizerExit);\n      }\n      onExit(exit);\n    });\n  });\n})));\n/**\n * Regardless of the result of the this `Micro` effect, run the finalizer effect.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const ensuring = /*#__PURE__*/dual(2, (self, finalizer) => onExit(self, _ => finalizer));\n/**\n * When the `Micro` effect fails, run the given finalizer effect with the\n * `MicroCause` of the executed effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onError = /*#__PURE__*/dual(2, (self, f) => onExitIf(self, exitIsFailure, exit => f(exit.left)));\n/**\n * If this `Micro` effect is aborted, run the finalizer effect.\n *\n * @since 3.4.6\n * @experimental\n * @category resources & finalization\n */\nexport const onInterrupt = /*#__PURE__*/dual(2, (self, finalizer) => onExitIf(self, exitIsInterrupt, _ => finalizer));\n/**\n * Acquire a resource, use it, and then release the resource when the `use`\n * effect has completed.\n *\n * @since 3.4.0\n * @experimental\n * @category resources & finalization\n */\nexport const acquireUseRelease = (acquire, use, release) => uninterruptibleMask(restore => flatMap(acquire, a => flatMap(exit(restore(use(a))), exit => andThen(release(a, exit), fromExit(exit)))));\n// ----------------------------------------------------------------------------\n// interruption\n// ----------------------------------------------------------------------------\n/**\n * Abort the current `Micro` effect.\n *\n * @since 3.4.6\n * @experimental\n * @category interruption\n */\nexport const interrupt = /*#__PURE__*/make(function (env, onExit) {\n  const controller = envGet(env, currentAbortController);\n  controller.abort();\n  onExit(exitInterrupt);\n});\n/**\n * Wrap the given `Micro` effect in an uninterruptible region, preventing the\n * effect from being aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n */\nexport const uninterruptible = self => unsafeMakeOptions(function (env, onExit) {\n  const nextEnv = envMutate(env, function (env) {\n    env[currentInterruptible.key] = false;\n    env[currentAbortSignal.key] = new AbortController().signal;\n    return env;\n  });\n  self[runSymbol](nextEnv, onExit);\n}, false);\n/**\n * Wrap the given `Micro` effect in an uninterruptible region, preventing the\n * effect from being aborted.\n *\n * You can use the `restore` function to restore a `Micro` effect to the\n * interruptibility state before the `uninterruptibleMask` was applied.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * Micro.uninterruptibleMask((restore) =>\n *   Micro.sleep(1000).pipe( // uninterruptible\n *     Micro.andThen(restore(Micro.sleep(1000))) // interruptible\n *   )\n * )\n */\nexport const uninterruptibleMask = f => unsafeMakeOptions((env, onExit) => {\n  const isInterruptible = envGet(env, currentInterruptible);\n  const effect = isInterruptible ? f(interruptible) : f(identity);\n  const nextEnv = isInterruptible ? envMutate(env, function (env) {\n    env[currentInterruptible.key] = false;\n    env[currentAbortSignal.key] = new AbortController().signal;\n    return env;\n  }) : env;\n  effect[runSymbol](nextEnv, onExit);\n}, false);\n/**\n * Wrap the given `Micro` effect in an interruptible region, allowing the effect\n * to be aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category interruption\n */\nexport const interruptible = self => make((env, onExit) => {\n  const isInterruptible = envGet(env, currentInterruptible);\n  let newEnv = env;\n  if (!isInterruptible) {\n    const controller = envGet(env, currentAbortController);\n    newEnv = envMutate(env, function (env) {\n      env[currentInterruptible.key] = true;\n      env[currentAbortSignal.key] = controller.signal;\n      return env;\n    });\n  }\n  self[runSymbol](newEnv, onExit);\n});\n/**\n * Runs all the provided effects in sequence respecting the structure provided in input.\n *\n * Supports multiple arguments, a single argument tuple / array or record / struct.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const all = (arg, options) => {\n  if (Array.isArray(arg) || isIterable(arg)) {\n    return forEach(arg, identity, options);\n  } else if (options?.discard) {\n    return forEach(Object.values(arg), identity, options);\n  }\n  return suspend(() => {\n    const out = {};\n    return as(forEach(Object.entries(arg), ([key, effect]) => map(effect, value => {\n      out[key] = value;\n    }), {\n      discard: true,\n      concurrency: options?.concurrency\n    }), out);\n  });\n};\n/**\n * For each element of the provided iterable, run the effect and collect the results.\n *\n * If the `discard` option is set to `true`, the results will be discarded and\n * the effect will return `void`.\n *\n * The `concurrency` option can be set to control how many effects are run in\n * parallel. By default, the effects are run sequentially.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const forEach = (iterable, f, options) => make(function (env, onExit) {\n  const concurrencyOption = options?.concurrency === \"inherit\" ? envGet(env, currentConcurrency) : options?.concurrency ?? 1;\n  const concurrency = concurrencyOption === \"unbounded\" ? Number.POSITIVE_INFINITY : Math.max(1, concurrencyOption);\n  // abort\n  const [envWithSignal, onAbort] = forkSignal(env);\n  // iterate\n  let result = undefined;\n  const items = Array.from(iterable);\n  let length = items.length;\n  if (length === 0) {\n    return onExit(Either.right(options?.discard ? undefined : []));\n  }\n  const out = options?.discard ? undefined : new Array(length);\n  let index = 0;\n  let inProgress = 0;\n  let doneCount = 0;\n  let pumping = false;\n  function pump() {\n    pumping = true;\n    while (inProgress < concurrency && index < length) {\n      const currentIndex = index;\n      const item = items[currentIndex];\n      index++;\n      inProgress++;\n      try {\n        f(item, currentIndex)[runSymbol](envWithSignal, function (exit) {\n          if (exit._tag === \"Left\") {\n            if (result === undefined) {\n              result = exit;\n              length = index;\n              onAbort();\n            }\n          } else if (out !== undefined) {\n            out[currentIndex] = exit.right;\n          }\n          doneCount++;\n          inProgress--;\n          if (doneCount === length) {\n            onExit(result ?? Either.right(out));\n          } else if (!pumping && inProgress < concurrency) {\n            pump();\n          }\n        });\n      } catch (err) {\n        result = exitDie(err);\n        length = index;\n        onAbort();\n      }\n    }\n    pumping = false;\n  }\n  pump();\n});\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed in parallel.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const filter = (iterable, f, options) => filterMap(iterable, a => map(f(a), pass => {\n  pass = options?.negate ? !pass : pass;\n  return pass ? Option.some(a) : Option.none();\n}), options);\n/**\n * Effectfully filter the elements of the provided iterable.\n *\n * Use the `concurrency` option to control how many elements are processed in parallel.\n *\n * @since 3.4.0\n * @experimental\n * @category collecting & elements\n */\nexport const filterMap = (iterable, f, options) => suspend(() => {\n  const out = [];\n  return as(forEach(iterable, a => map(f(a), o => {\n    if (o._tag === \"Some\") {\n      out.push(o.value);\n    }\n  }), {\n    discard: true,\n    concurrency: options?.concurrency\n  }), out);\n});\n// ----------------------------------------------------------------------------\n// do notation\n// ----------------------------------------------------------------------------\n/**\n * Start a do notation block.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nexport const Do = /*#__PURE__*/succeed({});\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nexport const bindTo = /*#__PURE__*/doNotation.bindTo(map);\n/**\n * Bind the success value of this `Micro` effect to the provided name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nexport const bind = /*#__PURE__*/doNotation.bind(map, flatMap);\nconst let_ = /*#__PURE__*/doNotation.let_(map);\nexport {\n/**\n * Bind the result of a synchronous computation to the given name.\n *\n * @since 3.4.0\n * @experimental\n * @category do notation\n */\nlet_ as let };\n// ----------------------------------------------------------------------------\n// handle & forking\n// ----------------------------------------------------------------------------\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const HandleTypeId = /*#__PURE__*/Symbol.for(\"effect/Micro/Handle\");\n/**\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const isHandle = u => typeof u === \"object\" && u !== null && HandleTypeId in u;\nclass HandleImpl extends Class {\n  parentSignal;\n  [HandleTypeId];\n  observers = /*#__PURE__*/new Set();\n  _exit = undefined;\n  _controller;\n  isRoot;\n  constructor(parentSignal, controller) {\n    super();\n    this.parentSignal = parentSignal;\n    this[HandleTypeId] = HandleTypeId;\n    this.isRoot = controller !== undefined;\n    this._controller = controller ?? new AbortController();\n    if (!this.isRoot) {\n      parentSignal.addEventListener(\"abort\", this.unsafeInterrupt);\n    }\n  }\n  unsafePoll() {\n    return this._exit ?? null;\n  }\n  unsafeInterrupt = () => {\n    this._controller.abort();\n  };\n  emit(exit) {\n    if (this._exit) {\n      return;\n    }\n    this._exit = exit;\n    if (!this.isRoot) {\n      this.parentSignal.removeEventListener(\"abort\", this.unsafeInterrupt);\n    }\n    this.observers.forEach(observer => observer(exit));\n    this.observers.clear();\n  }\n  addObserver(observer) {\n    if (this._exit) {\n      return observer(this._exit);\n    }\n    this.observers.add(observer);\n  }\n  removeObserver(observer) {\n    this.observers.delete(observer);\n  }\n  get await() {\n    return suspend(() => {\n      if (this._exit) {\n        return succeed(this._exit);\n      }\n      return async(resume => {\n        function observer(exit) {\n          resume(succeed(exit));\n        }\n        this.addObserver(observer);\n        return sync(() => {\n          this.removeObserver(observer);\n        });\n      });\n    });\n  }\n  get join() {\n    return flatMap(this.await, fromExit);\n  }\n  get interrupt() {\n    return suspend(() => {\n      this.unsafeInterrupt();\n      return this.await;\n    });\n  }\n  asMicro() {\n    return this.join;\n  }\n}\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * When the parent `Micro` finishes, this `Micro` will be aborted.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const fork = self => make(function (env, onExit) {\n  const signal = envGet(env, currentAbortSignal);\n  const handle = new HandleImpl(signal);\n  const nextEnv = envMutate(env, map => {\n    map[currentAbortController.key] = handle._controller;\n    map[currentAbortSignal.key] = handle._controller.signal;\n    return map;\n  });\n  envGet(env, currentScheduler).scheduleTask(() => {\n    self[runSymbol](nextEnv, exit => {\n      handle.emit(exit);\n    });\n  }, 0);\n  onExit(Either.right(handle));\n});\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * It will not be aborted when the parent `Micro` finishes.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const forkDaemon = self => make(function (env, onExit) {\n  const controller = new AbortController();\n  const handle = new HandleImpl(controller.signal, controller);\n  const nextEnv = envMutate(env, map => {\n    map[currentAbortController.key] = controller;\n    map[currentAbortSignal.key] = controller.signal;\n    return map;\n  });\n  envGet(env, currentScheduler).scheduleTask(() => {\n    self[runSymbol](nextEnv, exit => {\n      handle.emit(exit);\n    });\n  }, 0);\n  onExit(Either.right(handle));\n});\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the provided `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const forkIn = /*#__PURE__*/dual(2, (self, scope) => uninterruptibleMask(restore => flatMap(scope.fork, scope => tap(restore(forkDaemon(onExit(self, exit => scope.close(exit)))), fiber => scope.addFinalizer(_ => asVoid(fiber.interrupt))))));\n/**\n * Run the `Micro` effect in a new `Handle` that can be awaited, joined, or\n * aborted.\n *\n * The lifetime of the handle will be attached to the current `MicroScope`.\n *\n * @since 3.4.0\n * @experimental\n * @category handle & forking\n */\nexport const forkScoped = self => flatMap(scope, scope => forkIn(self, scope));\n// ----------------------------------------------------------------------------\n// execution\n// ----------------------------------------------------------------------------\n/**\n * Execute the `Micro` effect and return a `Handle` that can be awaited, joined,\n * or aborted.\n *\n * You can listen for the result by adding an observer using the handle's\n * `addObserver` method.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n * @example\n * import * as Micro from \"effect/Micro\"\n *\n * const handle = Micro.succeed(42).pipe(\n *   Micro.delay(1000),\n *   Micro.runFork\n * )\n *\n * handle.addObserver((exit) => {\n *   console.log(exit)\n * })\n */\nexport const runFork = (effect, options) => {\n  const controller = new AbortController();\n  const refs = Object.create(null);\n  refs[currentAbortController.key] = controller;\n  refs[currentAbortSignal.key] = controller.signal;\n  refs[currentScheduler.key] = options?.scheduler ?? new MicroSchedulerDefault();\n  const env = envMake(refs);\n  const handle = new HandleImpl(controller.signal, controller);\n  effect[runSymbol](envSet(env, currentAbortSignal, handle._controller.signal), exit => {\n    handle.emit(exit);\n    if (options?.signal) {\n      options.signal.removeEventListener(\"abort\", handle.unsafeInterrupt);\n    }\n  });\n  if (options?.signal) {\n    if (options.signal.aborted) {\n      handle.unsafeInterrupt();\n    } else {\n      options.signal.addEventListener(\"abort\", handle.unsafeInterrupt, {\n        once: true\n      });\n    }\n  }\n  return handle;\n};\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * `MicroExit` of the computation.\n *\n * @since 3.4.6\n * @experimental\n * @category execution\n */\nexport const runPromiseExit = (effect, options) => new Promise((resolve, _reject) => {\n  const handle = runFork(effect, options);\n  handle.addObserver(resolve);\n});\n/**\n * Execute the `Micro` effect and return a `Promise` that resolves with the\n * successful value of the computation.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nexport const runPromise = (effect, options) => runPromiseExit(effect, options).then(exit => {\n  if (exit._tag === \"Left\") {\n    throw exit.left;\n  }\n  return exit.right;\n});\n/**\n * Attempt to execute the `Micro` effect synchronously and return the `MicroExit`.\n *\n * If any asynchronous effects are encountered, the function will return a\n * `CauseDie` containing the `Handle`.\n *\n * @since 3.4.6\n * @experimental\n * @category execution\n */\nexport const runSyncExit = effect => {\n  const scheduler = new MicroSchedulerDefault();\n  const handle = runFork(effect, {\n    scheduler\n  });\n  scheduler.flush();\n  const exit = handle.unsafePoll();\n  if (exit === null) {\n    return exitDie(handle);\n  }\n  return exit;\n};\n/**\n * Attempt to execute the `Micro` effect synchronously and return the success\n * value.\n *\n * @since 3.4.0\n * @experimental\n * @category execution\n */\nexport const runSync = effect => {\n  const exit = runSyncExit(effect);\n  if (exit._tag === \"Left\") {\n    throw exit.left;\n  }\n  return exit.right;\n};\nconst YieldableError = /*#__PURE__*/function () {\n  class YieldableError extends globalThis.Error {\n    [runSymbol](_env, onExit) {\n      onExit(exitFail(this));\n    }\n    toString() {\n      return this.message ? `${this.name}: ${this.message}` : this.name;\n    }\n    toJSON() {\n      return {\n        ...this\n      };\n    }\n    [NodeInspectSymbol]() {\n      const stack = this.stack;\n      if (stack) {\n        return `${this.toString()}\\n${stack.split(\"\\n\").slice(1).join(\"\\n\")}`;\n      }\n      return this.toString();\n    }\n  }\n  Object.assign(YieldableError.prototype, MicroProto, StructuralPrototype);\n  return YieldableError;\n}();\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nexport const Error = /*#__PURE__*/function () {\n  return class extends YieldableError {\n    constructor(args) {\n      super();\n      if (args) {\n        Object.assign(this, args);\n      }\n    }\n  };\n}();\n/**\n * @since 3.4.0\n * @experimental\n * @category errors\n */\nexport const TaggedError = tag => {\n  class Base extends Error {\n    _tag = tag;\n  }\n  ;\n  Base.prototype.name = tag;\n  return Base;\n};\n/**\n * Represents a checked exception which occurs when an expected element was\n * unable to be found.\n *\n * @since 3.4.4\n * @experimental\n * @category errors\n */\nexport class NoSuchElementException extends /*#__PURE__*/TaggedError(\"NoSuchElementException\") {}\n/**\n * Represents a checked exception which occurs when a timeout occurs.\n *\n * @since 3.4.4\n * @experimental\n * @category errors\n */\nexport class TimeoutException extends /*#__PURE__*/TaggedError(\"TimeoutException\") {}\n//# sourceMappingURL=Micro.js.map","import * as internal from \"./internal/effectable.js\";\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const EffectTypeId = internal.EffectTypeId;\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const StreamTypeId = internal.StreamTypeId;\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const SinkTypeId = internal.SinkTypeId;\n/**\n * @since 2.0.0\n * @category type ids\n */\nexport const ChannelTypeId = internal.ChannelTypeId;\n/**\n * @since 2.0.0\n * @category prototypes\n */\nexport const EffectPrototype = internal.EffectPrototype;\n/**\n * @since 2.0.0\n * @category prototypes\n */\nexport const CommitPrototype = internal.CommitPrototype;\n/**\n * @since 2.0.0\n * @category prototypes\n */\nexport const StructuralCommitPrototype = internal.StructuralCommitPrototype;\nconst Base = internal.Base;\nconst StructuralBase = internal.StructuralBase;\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport class Class extends Base {}\n/**\n * @since 2.0.0\n * @category constructors\n */\nexport class StructuralClass extends StructuralBase {}\n//# sourceMappingURL=Effectable.js.map","/**\n * @since 2.0.0\n */\nimport * as Equivalence from \"./Equivalence.js\";\nimport { constNull, constUndefined, dual, identity } from \"./Function.js\";\nimport * as doNotation from \"./internal/doNotation.js\";\nimport * as either from \"./internal/either.js\";\nimport { isFunction } from \"./Predicate.js\";\nimport * as Gen from \"./Utils.js\";\n/**\n * @category symbols\n * @since 2.0.0\n */\nexport const TypeId = either.TypeId;\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const right = either.right;\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const left = either.left;\n/**\n * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))\n * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromNullable = /*#__PURE__*/dual(2, (self, onNullable) => self == null ? left(onNullable(self)) : right(self));\n/**\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))\n * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))\n *\n * @category constructors\n * @since 2.0.0\n */\nexport const fromOption = either.fromOption;\nconst try_ = evaluate => {\n  if (isFunction(evaluate)) {\n    try {\n      return right(evaluate());\n    } catch (e) {\n      return left(e);\n    }\n  } else {\n    try {\n      return right(evaluate.try());\n    } catch (e) {\n      return left(evaluate.catch(e));\n    }\n  }\n};\nexport {\n/**\n * Imports a synchronous side-effect into a pure `Either` value, translating any\n * thrown exceptions into typed failed eithers creating with `Either.left`.\n *\n * @category constructors\n * @since 2.0.0\n */\ntry_ as try };\n/**\n * Tests if a value is a `Either`.\n *\n * @param input - The value to test.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isEither(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isEither(Either.left(\"a\")), true)\n * assert.deepStrictEqual(Either.isEither({ right: 1 }), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isEither = either.isEither;\n/**\n * Determine if a `Either` is a `Left`.\n *\n * @param self - The `Either` to check.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isLeft(Either.right(1)), false)\n * assert.deepStrictEqual(Either.isLeft(Either.left(\"a\")), true)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isLeft = either.isLeft;\n/**\n * Determine if a `Either` is a `Right`.\n *\n * @param self - The `Either` to check.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.isRight(Either.right(1)), true)\n * assert.deepStrictEqual(Either.isRight(Either.left(\"a\")), false)\n *\n * @category guards\n * @since 2.0.0\n */\nexport const isRight = either.isRight;\n/**\n * Converts a `Either` to an `Option` discarding the `Left`.\n *\n * Alias of {@link toOption}.\n *\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getRight(Either.right('ok')), Option.some('ok'))\n * assert.deepStrictEqual(Either.getRight(Either.left('err')), Option.none())\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getRight = either.getRight;\n/**\n * Converts a `Either` to an `Option` discarding the value.\n *\n * @example\n * import { Either, Option } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getLeft(Either.right('ok')), Option.none())\n * assert.deepStrictEqual(Either.getLeft(Either.left('err')), Option.some('err'))\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getLeft = either.getLeft;\n/**\n * @category equivalence\n * @since 2.0.0\n */\nexport const getEquivalence = ({\n  left,\n  right\n}) => Equivalence.make((x, y) => isLeft(x) ? isLeft(y) && left(x.left, y.left) : isRight(y) && right(x.right, y.right));\n/**\n * @category mapping\n * @since 2.0.0\n */\nexport const mapBoth = /*#__PURE__*/dual(2, (self, {\n  onLeft,\n  onRight\n}) => isLeft(self) ? left(onLeft(self.left)) : right(onRight(self.right)));\n/**\n * Maps the `Left` side of an `Either` value to a new `Either` value.\n *\n * @param self - The input `Either` value to map.\n * @param f - A transformation function to apply to the `Left` value of the input `Either`.\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const mapLeft = /*#__PURE__*/dual(2, (self, f) => isLeft(self) ? left(f(self.left)) : right(self.right));\n/**\n * Maps the `Right` side of an `Either` value to a new `Either` value.\n *\n * @param self - An `Either` to map\n * @param f - The function to map over the value of the `Either`\n *\n * @category mapping\n * @since 2.0.0\n */\nexport const map = /*#__PURE__*/dual(2, (self, f) => isRight(self) ? right(f(self.right)) : left(self.left));\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,\n * if the value is a `Right` the inner value is applied to the `onRight` function.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`\n *\n * const onRight = (value: number): string => `Ok: ${value}`\n *\n * assert.deepStrictEqual(pipe(Either.right(1), Either.match({ onLeft, onRight })), 'Ok: 1')\n * assert.deepStrictEqual(\n *   pipe(Either.left(['string 1', 'string 2']), Either.match({ onLeft, onRight })),\n *   'strings: string 1, string 2'\n * )\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexport const match = /*#__PURE__*/dual(2, (self, {\n  onLeft,\n  onRight\n}) => isLeft(self) ? onLeft(self.left) : onRight(self.right));\n/**\n * Transforms a `Predicate` function into a `Right` of the input value if the predicate returns `true`\n * or `Left` of the result of the provided function if the predicate returns false\n *\n * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     0,\n *     Either.liftPredicate(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.left(\"0 is not positive\")\n * )\n *\n * @category lifting\n * @since 3.4.0\n */\nexport const liftPredicate = /*#__PURE__*/dual(3, (a, predicate, orLeftWith) => predicate(a) ? right(a) : left(orLeftWith(a)));\n/**\n * Filter the right value with the provided function.\n * If the predicate fails, set the left value with the result of the provided function.\n *\n * @example\n * import { pipe, Either } from \"effect\"\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(1),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     Either.right(0),\n *     Either.filterOrLeft(isPositive, n => `${n} is not positive`)\n *   ),\n *   Either.left(\"0 is not positive\")\n * )\n *\n * @since 2.0.0\n * @category filtering & conditionals\n */\nexport const filterOrLeft = /*#__PURE__*/dual(3, (self, predicate, orLeftWith) => flatMap(self, r => predicate(r) ? right(r) : left(orLeftWith(r))));\n/**\n * @category getters\n * @since 2.0.0\n */\nexport const merge = /*#__PURE__*/match({\n  onLeft: identity,\n  onRight: identity\n});\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + \"!\"), 1)\n * assert.deepStrictEqual(Either.getOrElse(Either.left(\"not a number\"), (error) => error + \"!\"), \"not a number!\")\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrElse = /*#__PURE__*/dual(2, (self, onLeft) => isLeft(self) ? onLeft(self.left) : self.right);\n/**\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrNull(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrNull(Either.left(\"a\")), null)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrNull = /*#__PURE__*/getOrElse(constNull);\n/**\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrUndefined(Either.right(1)), 1)\n * assert.deepStrictEqual(Either.getOrUndefined(Either.left(\"a\")), undefined)\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrUndefined = /*#__PURE__*/getOrElse(constUndefined);\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.\n *\n * @param self - The `Either` to extract the value from.\n * @param onLeft - A function that will be called if the `Either` is `Left`. It returns the error to be thrown.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(\n *   Either.getOrThrowWith(Either.right(1), () => new Error('Unexpected Left')),\n *   1\n * )\n * assert.throws(() => Either.getOrThrowWith(Either.left(\"error\"), () => new Error('Unexpected Left')))\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrThrowWith = /*#__PURE__*/dual(2, (self, onLeft) => {\n  if (isRight(self)) {\n    return self.right;\n  }\n  throw onLeft(self.left);\n});\n/**\n * Extracts the value of an `Either` or throws if the `Either` is `Left`.\n *\n * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.\n *\n * @param self - The `Either` to extract the value from.\n * @throws `Error(\"getOrThrow called on a Left\")`\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.getOrThrow(Either.right(1)), 1)\n * assert.throws(() => Either.getOrThrow(Either.left(\"error\")))\n *\n * @category getters\n * @since 2.0.0\n */\nexport const getOrThrow = /*#__PURE__*/getOrThrowWith(() => new Error(\"getOrThrow called on a Left\"));\n/**\n * Returns `self` if it is a `Right` or `that` otherwise.\n *\n * @param self - The input `Either` value to check and potentially return.\n * @param that - A function that takes the error value from `self` (if it's a `Left`) and returns a new `Either` value.\n *\n * @category error handling\n * @since 2.0.0\n */\nexport const orElse = /*#__PURE__*/dual(2, (self, that) => isLeft(self) ? that(self.left) : right(self.right));\n/**\n * @category sequencing\n * @since 2.0.0\n */\nexport const flatMap = /*#__PURE__*/dual(2, (self, f) => isLeft(self) ? left(self.left) : f(self.right));\n/**\n * Executes a sequence of two `Either`s. The second `Either` can be dependent on the result of the first `Either`.\n *\n * @category sequencing\n * @since 2.0.0\n */\nexport const andThen = /*#__PURE__*/dual(2, (self, f) => flatMap(self, a => {\n  const b = isFunction(f) ? f(a) : f;\n  return isEither(b) ? b : right(b);\n}));\n/**\n * @category zipping\n * @since 2.0.0\n */\nexport const zipWith = /*#__PURE__*/dual(3, (self, that, f) => flatMap(self, r => map(that, r2 => f(r, r2))));\n/**\n * @category combining\n * @since 2.0.0\n */\nexport const ap = /*#__PURE__*/dual(2, (self, that) => zipWith(self, that, (f, a) => f(a)));\n/**\n * Takes a structure of `Either`s and returns an `Either` of values with the same structure.\n *\n * - If a tuple is supplied, then the returned `Either` will contain a tuple with the same length.\n * - If a struct is supplied, then the returned `Either` will contain a struct with the same keys.\n * - If an iterable is supplied, then the returned `Either` will contain an array.\n *\n * @param fields - the struct of `Either`s to be sequenced.\n *\n * @example\n * import { Either } from \"effect\"\n *\n * assert.deepStrictEqual(Either.all([Either.right(1), Either.right(2)]), Either.right([1, 2]))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.right(\"hello\") }), Either.right({ right: 1, b: \"hello\" }))\n * assert.deepStrictEqual(Either.all({ right: Either.right(1), b: Either.left(\"error\") }), Either.left(\"error\"))\n *\n * @category combining\n * @since 2.0.0\n */\n// @ts-expect-error\nexport const all = input => {\n  if (Symbol.iterator in input) {\n    const out = [];\n    for (const e of input) {\n      if (isLeft(e)) {\n        return e;\n      }\n      out.push(e.right);\n    }\n    return right(out);\n  }\n  const out = {};\n  for (const key of Object.keys(input)) {\n    const e = input[key];\n    if (isLeft(e)) {\n      return e;\n    }\n    out[key] = e.right;\n  }\n  return right(out);\n};\n/**\n * Returns an `Either` that swaps the error/success cases. This allows you to\n * use all methods on the error channel, possibly before flipping back.\n *\n * @since 2.0.0\n * @category mapping\n */\nexport const flip = self => isLeft(self) ? right(self.left) : left(self.right);\nconst adapter = /*#__PURE__*/Gen.adapter();\n/**\n * @category generators\n * @since 2.0.0\n */\nexport const gen = (...args) => {\n  const f = args.length === 1 ? args[0] : args[1].bind(args[0]);\n  const iterator = f(adapter);\n  let state = iterator.next();\n  if (state.done) {\n    return right(state.value);\n  } else {\n    let current = state.value;\n    if (Gen.isGenKind(current)) {\n      current = current.value;\n    } else {\n      current = Gen.yieldWrapGet(current);\n    }\n    if (isLeft(current)) {\n      return current;\n    }\n    while (!state.done) {\n      state = iterator.next(current.right);\n      if (!state.done) {\n        current = state.value;\n        if (Gen.isGenKind(current)) {\n          current = current.value;\n        } else {\n          current = Gen.yieldWrapGet(current);\n        }\n        if (isLeft(current)) {\n          return current;\n        }\n      }\n    }\n    return right(state.value);\n  }\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link bind}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const Do = /*#__PURE__*/right({});\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bind = /*#__PURE__*/doNotation.bind(map, flatMap);\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bind}\n * @see {@link let_ let}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nexport const bindTo = /*#__PURE__*/doNotation.bindTo(map);\nconst let_ = /*#__PURE__*/doNotation.let_(map);\nexport {\n/**\n * The \"do simulation\" in Effect allows you to write code in a more declarative style, similar to the \"do notation\" in other programming languages. It provides a way to define variables and perform operations on them using functions like `bind` and `let`.\n *\n * Here's how the do simulation works:\n *\n * 1. Start the do simulation using the `Do` value\n * 2. Within the do simulation scope, you can use the `bind` function to define variables and bind them to `Either` values\n * 3. You can accumulate multiple `bind` statements to define multiple variables within the scope\n * 4. Inside the do simulation scope, you can also use the `let` function to define variables and bind them to simple values\n *\n * @see {@link Do}\n * @see {@link bindTo}\n * @see {@link bind}\n *\n * @example\n * import { Either, pipe } from \"effect\"\n *\n * const result = pipe(\n *   Either.Do,\n *   Either.bind(\"x\", () => Either.right(2)),\n *   Either.bind(\"y\", () => Either.right(3)),\n *   Either.let(\"sum\", ({ x, y }) => x + y)\n * )\n * assert.deepStrictEqual(result, Either.right({ x: 2, y: 3, sum: 5 }))\n *\n * @category do notation\n * @since 2.0.0\n */\nlet_ as let };\n//# sourceMappingURL=Either.js.map","import * as Micro from 'effect/Micro';\nimport { lookup } from '@uploadthing/mime-types';\nimport * as Predicate from 'effect/Predicate';\nimport * as Context from 'effect/Context';\nimport { audio } from '@uploadthing/mime-types/audio';\nimport { image } from '@uploadthing/mime-types/image';\nimport { text } from '@uploadthing/mime-types/text';\nimport { video } from '@uploadthing/mime-types/video';\nimport * as Encoding from 'effect/Encoding';\nimport * as Hash from 'effect/Hash';\nimport * as Redacted from 'effect/Redacted';\nimport SQIds, { defaultOptions } from 'sqids';\n\nconst ValidContentDispositions = [\n    \"inline\",\n    \"attachment\"\n];\nconst ValidACLs = [\n    \"public-read\",\n    \"private\"\n];\n\nclass InvalidRouteConfigError extends /** #__PURE__ */ Micro.TaggedError(\"InvalidRouteConfig\") {\n    constructor(type, field){\n        const reason = field ? `Expected route config to have a ${field} for key ${type} but none was found.` : `Encountered an invalid route config during backfilling. ${type} was not found.`;\n        super({\n            reason\n        });\n    }\n}\nclass UnknownFileTypeError extends /** #__PURE__ */ Micro.TaggedError(\"UnknownFileType\") {\n    constructor(fileName){\n        const reason = `Could not determine type for ${fileName}`;\n        super({\n            reason\n        });\n    }\n}\nclass InvalidFileTypeError extends /** #__PURE__ */ Micro.TaggedError(\"InvalidFileType\") {\n    constructor(fileType, fileName){\n        const reason = `File type ${fileType} not allowed for ${fileName}`;\n        super({\n            reason\n        });\n    }\n}\nclass InvalidFileSizeError extends /** #__PURE__ */ Micro.TaggedError(\"InvalidFileSize\") {\n    constructor(fileSize){\n        const reason = `Invalid file size: ${fileSize}`;\n        super({\n            reason\n        });\n    }\n}\nclass InvalidURLError extends /** #__PURE__ */ Micro.TaggedError(\"InvalidURL\") {\n    constructor(attemptedUrl){\n        super({\n            reason: `Failed to parse '${attemptedUrl}' as a URL.`\n        });\n    }\n}\nclass RetryError extends /** #__PURE__ */ Micro.TaggedError(\"RetryError\") {\n}\nclass FetchError extends /** #__PURE__ */ Micro.TaggedError(\"FetchError\") {\n}\nclass InvalidJsonError extends /** #__PURE__ */ Micro.TaggedError(\"InvalidJson\") {\n}\nclass BadRequestError extends /** #__PURE__ */ Micro.TaggedError(\"BadRequestError\") {\n    getMessage() {\n        if (Predicate.isRecord(this.json)) {\n            if (typeof this.json.message === \"string\") return this.json.message;\n        }\n        return this.message;\n    }\n}\nclass UploadPausedError extends /** #__PURE__ */ Micro.TaggedError(\"UploadAborted\") {\n}\nclass UploadAbortedError extends /** #__PURE__ */ Micro.TaggedError(\"UploadAborted\") {\n}\n\nfunction isRouteArray(routeConfig) {\n    return Array.isArray(routeConfig);\n}\nfunction getDefaultSizeForType(fileType) {\n    if (fileType === \"image\") return \"4MB\";\n    if (fileType === \"video\") return \"16MB\";\n    if (fileType === \"audio\") return \"8MB\";\n    if (fileType === \"blob\") return \"8MB\";\n    if (fileType === \"pdf\") return \"4MB\";\n    if (fileType === \"text\") return \"64KB\";\n    return \"4MB\";\n}\nfunction getDefaultRouteConfigValues(type) {\n    return {\n        maxFileSize: getDefaultSizeForType(type),\n        maxFileCount: 1,\n        minFileCount: 1,\n        contentDisposition: \"inline\"\n    };\n}\n/**\n * This function takes in the user's input and \"upscales\" it to a full config\n * Additionally, it replaces numbers with \"safe\" equivalents\n *\n * Example:\n * ```ts\n * [\"image\"] => { image: { maxFileSize: \"4MB\", limit: 1 } }\n * ```\n */ const fillInputRouteConfig = (routeConfig)=>{\n    // If array, apply defaults\n    if (isRouteArray(routeConfig)) {\n        return Micro.succeed(routeConfig.reduce((acc, fileType)=>{\n            acc[fileType] = getDefaultRouteConfigValues(fileType);\n            return acc;\n        }, {}));\n    }\n    // Backfill defaults onto config\n    const newConfig = {};\n    for (const key of objectKeys(routeConfig)){\n        const value = routeConfig[key];\n        if (!value) return Micro.fail(new InvalidRouteConfigError(key));\n        newConfig[key] = {\n            ...getDefaultRouteConfigValues(key),\n            ...value\n        };\n    }\n    // we know that the config is valid, so we can stringify it and parse it back\n    // this allows us to replace numbers with \"safe\" equivalents\n    return Micro.succeed(JSON.parse(JSON.stringify(newConfig, safeNumberReplacer)));\n};\n/**\n * Match the file's type for a given allow list e.g. `image/png => image`\n * Prefers the file's type, then falls back to a extension-based lookup\n */ const matchFileType = (file, allowedTypes)=>{\n    // Type might be \"\" if the browser doesn't recognize the mime type\n    const mimeType = file.type || lookup(file.name);\n    if (!mimeType) {\n        if (allowedTypes.includes(\"blob\")) return Micro.succeed(\"blob\");\n        return Micro.fail(new UnknownFileTypeError(file.name));\n    }\n    // If the user has specified a specific mime type, use that\n    if (allowedTypes.some((type)=>type.includes(\"/\"))) {\n        if (allowedTypes.includes(mimeType)) {\n            return Micro.succeed(mimeType);\n        }\n    }\n    // Otherwise, we have a \"magic\" type eg. \"image\" or \"video\"\n    const type = mimeType.toLowerCase() === \"application/pdf\" ? \"pdf\" : mimeType.split(\"/\")[0];\n    if (!allowedTypes.includes(type)) {\n        // Blob is a catch-all for any file type not explicitly supported\n        if (allowedTypes.includes(\"blob\")) {\n            return Micro.succeed(\"blob\");\n        } else {\n            return Micro.fail(new InvalidFileTypeError(type, file.name));\n        }\n    }\n    return Micro.succeed(type);\n};\nconst FILESIZE_UNITS = [\n    \"B\",\n    \"KB\",\n    \"MB\",\n    \"GB\"\n];\nconst fileSizeToBytes = (fileSize)=>{\n    const regex = new RegExp(`^(\\\\d+)(\\\\.\\\\d+)?\\\\s*(${FILESIZE_UNITS.join(\"|\")})$`, \"i\");\n    // make sure the string is in the format of 123KB\n    const match = fileSize.match(regex);\n    if (!match) {\n        return Micro.fail(new InvalidFileSizeError(fileSize));\n    }\n    const sizeValue = parseFloat(match[1]);\n    const sizeUnit = match[3].toUpperCase();\n    const bytes = sizeValue * Math.pow(1024, FILESIZE_UNITS.indexOf(sizeUnit));\n    return Micro.succeed(Math.floor(bytes));\n};\nconst bytesToFileSize = (bytes)=>{\n    if (bytes === 0 || bytes === -1) {\n        return \"0B\";\n    }\n    const i = Math.floor(Math.log(bytes) / Math.log(1000));\n    return `${(bytes / Math.pow(1000, i)).toFixed(2)}${FILESIZE_UNITS[i]}`;\n};\nasync function safeParseJSON(input) {\n    const text = await input.text();\n    try {\n        return JSON.parse(text ?? \"null\");\n    } catch (err) {\n        console.error(`Error parsing JSON, got '${text}'`);\n        return new Error(`Error parsing JSON, got '${text}'`);\n    }\n}\n/** typesafe Object.keys */ function objectKeys(obj) {\n    return Object.keys(obj);\n}\nfunction filterDefinedObjectValues(obj) {\n    return Object.fromEntries(Object.entries(obj).filter((pair)=>pair[1] != null));\n}\n/** construct content-disposition header */ function contentDisposition(contentDisposition, fileName) {\n    return [\n        contentDisposition,\n        `filename=\"${encodeURI(fileName)}\"`,\n        `filename*=UTF-8''${encodeURI(fileName)}`\n    ].join(\"; \");\n}\nfunction semverLite(required, toCheck) {\n    // Pull out numbers from strings like `6.0.0`, `^6.4`, `~6.4.0`\n    const semverRegex = /(\\d+)\\.?(\\d+)?\\.?(\\d+)?/;\n    const requiredMatch = required.match(semverRegex);\n    if (!requiredMatch?.[0]) {\n        throw new Error(`Invalid semver requirement: ${required}`);\n    }\n    const toCheckMatch = toCheck.match(semverRegex);\n    if (!toCheckMatch?.[0]) {\n        throw new Error(`Invalid semver to check: ${toCheck}`);\n    }\n    const [_1, rMajor, rMinor, rPatch] = requiredMatch;\n    const [_2, cMajor, cMinor, cPatch] = toCheckMatch;\n    if (required.startsWith(\"^\")) {\n        // Major must be equal, minor must be greater or equal\n        if (rMajor !== cMajor) return false;\n        if (rMinor > cMinor) return false;\n        return true;\n    }\n    if (required.startsWith(\"~\")) {\n        // Major must be equal, minor must be equal\n        if (rMajor !== cMajor) return false;\n        if (rMinor !== cMinor) return false;\n        return true;\n    }\n    // Exact match\n    return rMajor === cMajor && rMinor === cMinor && rPatch === cPatch;\n}\nfunction warnIfInvalidPeerDependency(pkg, required, toCheck) {\n    if (!semverLite(required, toCheck)) {\n        console.warn(`!!!WARNING::: ${pkg} requires \"uploadthing@${required}\", but version \"${toCheck}\" is installed`);\n    }\n}\nconst getRequestUrl = (req)=>Micro.gen(function*() {\n        const host = req.headers.get(\"x-forwarded-host\") ?? req.headers.get(\"host\");\n        const proto = req.headers.get(\"x-forwarded-proto\") ?? \"https\";\n        const protocol = proto.endsWith(\":\") ? proto : `${proto}:`;\n        const url = yield* Micro.try({\n            try: ()=>new URL(req.url, `${protocol}//${host}`),\n            catch: ()=>new InvalidURLError(req.url)\n        });\n        url.search = \"\";\n        return url;\n    });\nconst getFullApiUrl = (maybeUrl)=>Micro.gen(function*() {\n        const base = (()=>{\n            if (typeof window !== \"undefined\") return window.location.origin;\n            if (process.env?.VERCEL_URL) return `https://${process.env.VERCEL_URL}`;\n            return \"http://localhost:3000\";\n        })();\n        const url = yield* Micro.try({\n            try: ()=>new URL(maybeUrl ?? \"/api/uploadthing\", base),\n            catch: ()=>new InvalidURLError(maybeUrl ?? \"/api/uploadthing\")\n        });\n        if (url.pathname === \"/\") {\n            url.pathname = \"/api/uploadthing\";\n        }\n        return url;\n    });\n/*\n * Returns a full URL to the dev's uploadthing endpoint\n * Can take either an origin, or a pathname, or a full URL\n * and will return the \"closest\" url matching the default\n * `<VERCEL_URL || localhost>/api/uploadthing`\n */ const resolveMaybeUrlArg = (maybeUrl)=>{\n    return maybeUrl instanceof URL ? maybeUrl : Micro.runSync(getFullApiUrl(maybeUrl));\n};\nfunction parseTimeToSeconds(time) {\n    if (typeof time === \"number\") return time;\n    const match = time.split(/(\\d+)/).filter(Boolean);\n    const num = Number(match[0]);\n    const unit = (match[1] ?? \"s\").trim().slice(0, 1);\n    const multiplier = {\n        s: 1,\n        m: 60,\n        h: 3600,\n        d: 86400\n    }[unit];\n    return num * multiplier;\n}\n/**\n * Replacer for JSON.stringify that will replace numbers that cannot be\n * serialized to JSON with \"reasonable equivalents\".\n *\n * Infinity and -Infinity are replaced by MAX_SAFE_INTEGER and MIN_SAFE_INTEGER\n * NaN is replaced by 0\n *\n */ const safeNumberReplacer = (_, value)=>{\n    if (typeof value !== \"number\") return value;\n    if (Number.isSafeInteger(value) || value <= Number.MAX_SAFE_INTEGER && value >= Number.MIN_SAFE_INTEGER) {\n        return value;\n    }\n    if (value === Infinity) return Number.MAX_SAFE_INTEGER;\n    if (value === -Infinity) return Number.MIN_SAFE_INTEGER;\n    if (Number.isNaN(value)) return 0;\n};\nfunction noop() {\n// noop\n}\nfunction createIdentityProxy() {\n    return new Proxy(noop, {\n        get: (_, prop)=>prop\n    });\n}\nfunction unwrap(x, ...args) {\n    return typeof x === \"function\" ? x(...args) : x;\n}\n\nconst ALLOWED_FILE_TYPES = [\n    \"image\",\n    \"video\",\n    \"audio\",\n    \"pdf\",\n    \"text\",\n    \"blob\"\n];\n\nconst ERROR_CODES = {\n    // Generic\n    BAD_REQUEST: 400,\n    NOT_FOUND: 404,\n    FORBIDDEN: 403,\n    INTERNAL_SERVER_ERROR: 500,\n    INTERNAL_CLIENT_ERROR: 500,\n    // S3 specific\n    TOO_LARGE: 413,\n    TOO_SMALL: 400,\n    TOO_MANY_FILES: 400,\n    KEY_TOO_LONG: 400,\n    // UploadThing specific\n    URL_GENERATION_FAILED: 500,\n    UPLOAD_FAILED: 500,\n    MISSING_ENV: 500,\n    INVALID_SERVER_CONFIG: 500,\n    FILE_LIMIT_EXCEEDED: 500\n};\nfunction messageFromUnknown(cause, fallback) {\n    if (typeof cause === \"string\") {\n        return cause;\n    }\n    if (cause instanceof Error) {\n        return cause.message;\n    }\n    if (cause && typeof cause === \"object\" && \"message\" in cause && typeof cause.message === \"string\") {\n        return cause.message;\n    }\n    return fallback ?? \"An unknown error occurred\";\n}\nclass UploadThingError extends Micro.Error {\n    constructor(initOpts){\n        const opts = typeof initOpts === \"string\" ? {\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: initOpts\n        } : initOpts;\n        const message = opts.message ?? messageFromUnknown(opts.cause, opts.code);\n        super({\n            message\n        });\n        this._tag = \"UploadThingError\";\n        this.name = \"UploadThingError\";\n        this.code = opts.code;\n        this.data = opts.data;\n        if (opts.cause instanceof Error) {\n            this.cause = opts.cause;\n        } else if (Predicate.isRecord(opts.cause) && Predicate.isNumber(opts.cause.status) && Predicate.isString(opts.cause.statusText)) {\n            this.cause = new Error(`Response ${opts.cause.status} ${opts.cause.statusText}`);\n        } else if (Predicate.isString(opts.cause)) {\n            this.cause = new Error(opts.cause);\n        } else {\n            this.cause = opts.cause;\n        }\n    }\n    static toObject(error) {\n        return {\n            code: error.code,\n            message: error.message,\n            data: error.data\n        };\n    }\n    static serialize(error) {\n        return JSON.stringify(UploadThingError.toObject(error));\n    }\n}\nfunction getErrorTypeFromStatusCode(statusCode) {\n    for (const [code, status] of Object.entries(ERROR_CODES)){\n        if (status === statusCode) {\n            return code;\n        }\n    }\n    return \"INTERNAL_SERVER_ERROR\";\n}\nfunction getStatusCodeFromError(error) {\n    return ERROR_CODES[error.code] ?? 500;\n}\nconst INTERNAL_DO_NOT_USE__fatalClientError = (e)=>new UploadThingError({\n        code: \"INTERNAL_CLIENT_ERROR\",\n        message: \"Something went wrong. Please report this to UploadThing.\",\n        cause: e\n    });\n\nclass FetchContext extends /** #__PURE__ */ Context.Tag(\"uploadthing/Fetch\")() {\n}\n// Temporary Effect wrappers below.\n// Only for use in the browser.\n// On the server, use `@effect/platform.HttpClient` instead.\nconst fetchEff = (input, init)=>Micro.flatMap(Micro.service(FetchContext), (fetch)=>{\n        const headers = new Headers(init?.headers ?? []);\n        const reqInfo = {\n            url: input.toString(),\n            method: init?.method,\n            body: init?.body,\n            headers: Object.fromEntries(headers)\n        };\n        return Micro.tryPromise({\n            try: (signal)=>fetch(input, {\n                    ...init,\n                    headers,\n                    signal\n                }),\n            catch: (error)=>new FetchError({\n                    error: error instanceof Error ? {\n                        ...error,\n                        name: error.name,\n                        message: error.message,\n                        stack: error.stack\n                    } : error,\n                    input: reqInfo\n                })\n        }).pipe(Micro.tapError((e)=>Micro.sync(()=>console.error(e.input))), Micro.map((res)=>Object.assign(res, {\n                requestUrl: reqInfo.url\n            })), Micro.withTrace(\"fetch\"));\n    });\nconst parseResponseJson = (res)=>Micro.tryPromise({\n        try: async ()=>{\n            const json = await res.json();\n            return {\n                json,\n                ok: res.ok,\n                status: res.status\n            };\n        },\n        catch: (error)=>new InvalidJsonError({\n                error,\n                input: res.requestUrl\n            })\n    }).pipe(Micro.filterOrFail(({ ok })=>ok, ({ json, status })=>new BadRequestError({\n            status,\n            message: `Request to ${res.requestUrl} failed with status ${status}`,\n            json\n        })), Micro.map(({ json })=>json), Micro.withTrace(\"parseJson\"));\n\nconst generateMimeTypes = (typesOrRouteConfig)=>{\n    const fileTypes = Array.isArray(typesOrRouteConfig) ? typesOrRouteConfig : objectKeys(typesOrRouteConfig);\n    if (fileTypes.includes(\"blob\")) return [];\n    return fileTypes.map((type)=>{\n        if (type === \"pdf\") return \"application/pdf\";\n        if (type.includes(\"/\")) return type;\n        // Add wildcard to support all subtypes, e.g. image => \"image/*\"\n        // But some browsers/OSes don't support it, so we'll also dump all the mime types\n        // we know that starts with the type, e.g. image => \"image/png, image/jpeg, ...\"\n        if (type === \"audio\") return [\n            \"audio/*\",\n            ...objectKeys(audio)\n        ].join(\", \");\n        if (type === \"image\") return [\n            \"image/*\",\n            ...objectKeys(image)\n        ].join(\", \");\n        if (type === \"text\") return [\n            \"text/*\",\n            ...objectKeys(text)\n        ].join(\", \");\n        if (type === \"video\") return [\n            \"video/*\",\n            ...objectKeys(video)\n        ].join(\", \");\n        return `${type}/*`;\n    });\n};\nconst generateClientDropzoneAccept = (fileTypes)=>{\n    const mimeTypes = generateMimeTypes(fileTypes);\n    return Object.fromEntries(mimeTypes.map((type)=>[\n            type,\n            []\n        ]));\n};\nfunction getFilesFromClipboardEvent(event) {\n    const dataTransferItems = event.clipboardData?.items;\n    if (!dataTransferItems) return;\n    const files = Array.from(dataTransferItems).reduce((acc, curr)=>{\n        const f = curr.getAsFile();\n        return f ? [\n            ...acc,\n            f\n        ] : acc;\n    }, []);\n    return files;\n}\n/**\n * Shared helpers for our premade components that's reusable by multiple frameworks\n */ const generatePermittedFileTypes = (config)=>{\n    const fileTypes = config ? objectKeys(config) : [];\n    const maxFileCount = config ? Object.values(config).map((v)=>v.maxFileCount) : [];\n    return {\n        fileTypes,\n        multiple: maxFileCount.some((v)=>v && v > 1)\n    };\n};\nconst capitalizeStart = (str)=>{\n    return str.charAt(0).toUpperCase() + str.slice(1);\n};\nconst INTERNAL_doFormatting = (config)=>{\n    if (!config) return \"\";\n    const allowedTypes = objectKeys(config);\n    const formattedTypes = allowedTypes.map((f)=>f === \"blob\" ? \"file\" : f);\n    // Format multi-type uploader label as \"Supports videos, images and files\";\n    if (formattedTypes.length > 1) {\n        const lastType = formattedTypes.pop();\n        return `${formattedTypes.join(\"s, \")} and ${lastType}s`;\n    }\n    // Single type uploader label\n    const key = allowedTypes[0];\n    const formattedKey = formattedTypes[0];\n    const { maxFileSize, maxFileCount, minFileCount } = config[key];\n    if (maxFileCount && maxFileCount > 1) {\n        if (minFileCount > 1) {\n            return `${minFileCount} - ${maxFileCount} ${formattedKey}s up to ${maxFileSize}`;\n        } else {\n            return `${formattedKey}s up to ${maxFileSize}, max ${maxFileCount}`;\n        }\n    } else {\n        return `${formattedKey} (${maxFileSize})`;\n    }\n};\nconst allowedContentTextLabelGenerator = (config)=>{\n    return capitalizeStart(INTERNAL_doFormatting(config));\n};\nconst styleFieldToClassName = (styleField, args)=>{\n    if (typeof styleField === \"string\") return styleField;\n    if (typeof styleField === \"function\") {\n        const result = styleField(args);\n        if (typeof result === \"string\") return result;\n    }\n    return \"\";\n};\nconst styleFieldToCssObject = (styleField, args)=>{\n    if (typeof styleField === \"object\") return styleField;\n    if (typeof styleField === \"function\") {\n        const result = styleField(args);\n        if (typeof result === \"object\") return result;\n    }\n    return {};\n};\nconst contentFieldToContent = (contentField, arg)=>{\n    if (!contentField) return null;\n    if (typeof contentField !== \"function\") return contentField;\n    if (typeof contentField === \"function\") {\n        const result = contentField(arg);\n        return result;\n    }\n};\nconst defaultClassListMerger = (...classes)=>{\n    return classes.filter(Boolean).join(\" \");\n};\n\nconst signaturePrefix = \"hmac-sha256=\";\nconst algorithm = {\n    name: \"HMAC\",\n    hash: \"SHA-256\"\n};\nconst encoder = new TextEncoder();\nfunction shuffle(str, seed) {\n    const chars = str.split(\"\");\n    const seedNum = Hash.string(seed);\n    let temp;\n    let j;\n    for(let i = 0; i < chars.length; i++){\n        j = (seedNum % (i + 1) + i) % chars.length;\n        temp = chars[i];\n        chars[i] = chars[j];\n        chars[j] = temp;\n    }\n    return chars.join(\"\");\n}\nconst signPayload = (payload, secret)=>Micro.gen(function*() {\n        const signingKey = yield* Micro.tryPromise({\n            try: ()=>crypto.subtle.importKey(\"raw\", encoder.encode(Redacted.value(secret)), algorithm, false, [\n                    \"sign\"\n                ]),\n            catch: (e)=>new UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Invalid signing secret\",\n                    cause: e\n                })\n        });\n        const signature = yield* Micro.map(Micro.tryPromise({\n            try: ()=>crypto.subtle.sign(algorithm, signingKey, encoder.encode(payload)),\n            catch: (e)=>new UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    cause: e\n                })\n        }), (arrayBuffer)=>Encoding.encodeHex(new Uint8Array(arrayBuffer)));\n        return `${signaturePrefix}${signature}`;\n    }).pipe(Micro.withTrace(\"signPayload\"));\nconst verifySignature = (payload, signature, secret)=>Micro.gen(function*() {\n        const sig = signature?.slice(signaturePrefix.length);\n        if (!sig) return false;\n        const secretBytes = encoder.encode(Redacted.value(secret));\n        const signingKey = yield* Micro.promise(()=>crypto.subtle.importKey(\"raw\", secretBytes, algorithm, false, [\n                \"verify\"\n            ]));\n        const sigBytes = yield* Micro.fromEither(Encoding.decodeHex(sig));\n        const payloadBytes = encoder.encode(payload);\n        return yield* Micro.promise(()=>crypto.subtle.verify(algorithm, signingKey, sigBytes, payloadBytes));\n    }).pipe(Micro.withTrace(\"verifySignature\"), Micro.orElseSucceed(()=>false));\nconst generateKey = (file, appId, getHashParts)=>Micro.sync(()=>{\n        // Get the parts of which we should hash to constuct the key\n        // This allows the user to customize the hashing algorithm\n        // If they for example want to generate the same key for the\n        // same file whenever it was uploaded\n        const hashParts = JSON.stringify(getHashParts?.(file) ?? [\n            file.name,\n            file.size,\n            file.type,\n            file.lastModified,\n            Date.now()\n        ]);\n        // Hash and Encode the parts and appId as sqids\n        const alphabet = shuffle(defaultOptions.alphabet, appId);\n        const encodedFileSeed = new SQIds({\n            alphabet,\n            minLength: 36\n        }).encode([\n            Math.abs(Hash.string(hashParts))\n        ]);\n        const encodedAppId = new SQIds({\n            alphabet,\n            minLength: 12\n        }).encode([\n            Math.abs(Hash.string(appId))\n        ]);\n        // Concatenate them\n        return encodedAppId + encodedFileSeed;\n    }).pipe(Micro.withTrace(\"generateKey\"));\n// Verify that the key was generated with the same appId\nconst verifyKey = (key, appId)=>Micro.sync(()=>{\n        const alphabet = shuffle(defaultOptions.alphabet, appId);\n        const expectedPrefix = new SQIds({\n            alphabet,\n            minLength: 12\n        }).encode([\n            Math.abs(Hash.string(appId))\n        ]);\n        return key.startsWith(expectedPrefix);\n    }).pipe(Micro.withTrace(\"verifyKey\"), Micro.orElseSucceed(()=>false));\nconst generateSignedURL = (url, secretKey, opts)=>Micro.gen(function*() {\n        const parsedURL = new URL(url);\n        const ttl = opts.ttlInSeconds ? parseTimeToSeconds(opts.ttlInSeconds) : 60 * 60;\n        const expirationTime = Date.now() + ttl * 1000;\n        parsedURL.searchParams.append(\"expires\", expirationTime.toString());\n        if (opts.data) {\n            Object.entries(opts.data).forEach(([key, value])=>{\n                if (value == null) return;\n                const encoded = encodeURIComponent(value);\n                parsedURL.searchParams.append(key, encoded);\n            });\n        }\n        const signature = yield* signPayload(parsedURL.toString(), secretKey);\n        parsedURL.searchParams.append(\"signature\", signature);\n        return parsedURL.href;\n    }).pipe(Micro.withTrace(\"generateSignedURL\"));\n\n/**\n * Copyright (c) (MIT License) 2015 Andrey Okonetchnikov\n * https://github.com/react-dropzone/attr-accept/blob/master/src/index.js\n */ function accepts(file, acceptedFiles) {\n    if (file && acceptedFiles) {\n        const acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(\",\");\n        const fileName = file.name ?? \"\";\n        const mimeType = (file.type ?? \"\").toLowerCase();\n        const baseMimeType = mimeType.replace(/\\/.*$/, \"\");\n        return acceptedFilesArray.some((type)=>{\n            const validType = type.trim().toLowerCase();\n            if (validType.startsWith(\".\")) {\n                return fileName.toLowerCase().endsWith(validType);\n            } else if (validType.endsWith(\"/*\")) {\n                // This is something like a image/* mime type\n                return baseMimeType === validType.replace(/\\/.*$/, \"\");\n            }\n            return mimeType === validType;\n        });\n    }\n    return true;\n}\nconst isPropagationStopped = (event)=>{\n    if (typeof event.isPropagationStopped === \"function\") {\n        return event.isPropagationStopped();\n    }\n    if (typeof event.cancelBubble !== \"undefined\") {\n        return event.cancelBubble;\n    }\n    return false;\n};\n// Firefox versions prior to 53 return a bogus MIME type for every file drag, so dragovers with\n// that MIME type will always be accepted\nfunction isFileAccepted(file, accept) {\n    return file.type === \"application/x-moz-file\" || accepts(file, accept);\n}\nfunction isEnterOrSpace(event) {\n    return \"key\" in event && (event.key === \" \" || event.key === \"Enter\") || \"keyCode\" in event && (event.keyCode === 32 || event.keyCode === 13);\n}\nconst isDefined = (v)=>v != null;\nfunction isValidSize(file, minSize, maxSize) {\n    if (!isDefined(file.size)) return true;\n    if (isDefined(minSize) && isDefined(maxSize)) {\n        return file.size >= minSize && file.size <= maxSize;\n    }\n    if (isDefined(minSize) && file.size < minSize) return false;\n    if (isDefined(maxSize) && file.size > maxSize) return false;\n    return true;\n}\nfunction isValidQuantity(files, multiple, maxFiles) {\n    if (!multiple && files.length > 1) return false;\n    if (multiple && maxFiles >= 1 && files.length > maxFiles) return false;\n    return true;\n}\nfunction allFilesAccepted({ files, accept, minSize, maxSize, multiple, maxFiles }) {\n    if (!isValidQuantity(files, multiple, maxFiles)) return false;\n    return files.every((file)=>isFileAccepted(file, accept) && isValidSize(file, minSize, maxSize));\n}\nfunction isEventWithFiles(event) {\n    if (!(\"dataTransfer\" in event && event.dataTransfer !== null)) {\n        return !!event.target && \"files\" in event.target && !!event.target.files;\n    }\n    // https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#file\n    return Array.prototype.some.call(// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    event.dataTransfer?.types, (type)=>type === \"Files\" || type === \"application/x-moz-file\");\n}\nfunction isIeOrEdge(ua = window.navigator.userAgent) {\n    return ua.indexOf(\"MSIE \") > -1 || ua.indexOf(\"Trident/\") > -1 || ua.indexOf(\"Edge/\") > -1;\n}\nfunction isMIMEType(v) {\n    return v === \"audio/*\" || v === \"video/*\" || v === \"image/*\" || v === \"text/*\" || /\\w+\\/[-+.\\w]+/g.test(v);\n}\nfunction isExt(v) {\n    return /^.*\\.[\\w]+$/.test(v);\n}\n/**\n * Convert the `{accept}` dropzone prop to an array of MIME types/extensions.\n */ function acceptPropAsAcceptAttr(accept) {\n    if (isDefined(accept)) {\n        return Object.entries(accept).reduce((a, [mimeType, ext])=>[\n                ...a,\n                mimeType,\n                ...ext\n            ], [])// Silently discard invalid entries as pickerOptionsFromAccept warns about these\n        .filter((v)=>isMIMEType(v) || isExt(v)).join(\",\");\n    }\n    return undefined;\n}\nconst initialState = {\n    isFocused: false,\n    isFileDialogActive: false,\n    isDragActive: false,\n    isDragAccept: false,\n    isDragReject: false,\n    acceptedFiles: []\n};\nfunction reducer(state, action) {\n    switch(action.type){\n        case \"focus\":\n            return {\n                ...state,\n                isFocused: true\n            };\n        case \"blur\":\n            return {\n                ...state,\n                isFocused: false\n            };\n        case \"openDialog\":\n            return {\n                ...initialState,\n                isFileDialogActive: true\n            };\n        case \"closeDialog\":\n            return {\n                ...state,\n                isFileDialogActive: false\n            };\n        case \"setDraggedFiles\":\n            return {\n                ...state,\n                ...action.payload\n            };\n        case \"setFiles\":\n            return {\n                ...state,\n                ...action.payload\n            };\n        case \"reset\":\n            return initialState;\n        default:\n            return state;\n    }\n}\n\nexport { ALLOWED_FILE_TYPES, BadRequestError, FILESIZE_UNITS, FetchContext, FetchError, INTERNAL_DO_NOT_USE__fatalClientError, INTERNAL_doFormatting, InvalidFileSizeError, InvalidFileTypeError, InvalidJsonError, InvalidRouteConfigError, InvalidURLError, RetryError, UnknownFileTypeError, UploadAbortedError, UploadPausedError, UploadThingError, ValidACLs, ValidContentDispositions, acceptPropAsAcceptAttr, allFilesAccepted, allowedContentTextLabelGenerator, bytesToFileSize, capitalizeStart, contentDisposition, contentFieldToContent, createIdentityProxy, defaultClassListMerger, fetchEff, fileSizeToBytes, fillInputRouteConfig, filterDefinedObjectValues, generateClientDropzoneAccept, generateKey, generateMimeTypes, generatePermittedFileTypes, generateSignedURL, getDefaultRouteConfigValues, getDefaultSizeForType, getErrorTypeFromStatusCode, getFilesFromClipboardEvent, getFullApiUrl, getRequestUrl, getStatusCodeFromError, initialState, isEnterOrSpace, isEventWithFiles, isFileAccepted, isIeOrEdge, isPropagationStopped, isRouteArray, isValidQuantity, isValidSize, matchFileType, noop, objectKeys, parseResponseJson, parseTimeToSeconds, reducer, resolveMaybeUrlArg, safeNumberReplacer, safeParseJSON, semverLite, signPayload, styleFieldToClassName, styleFieldToCssObject, unwrap, verifyKey, verifySignature, warnIfInvalidPeerDependency };\n","import * as Arr from 'effect/Array';\nimport * as Micro from 'effect/Micro';\nimport { fetchEff, parseResponseJson, UploadThingError, getErrorTypeFromStatusCode, FetchContext, matchFileType, objectKeys, fileSizeToBytes, createIdentityProxy, resolveMaybeUrlArg, UploadPausedError, UploadAbortedError } from '@uploadthing/shared';\nexport { UploadAbortedError, UploadPausedError, generateClientDropzoneAccept, generateMimeTypes, generatePermittedFileTypes } from '@uploadthing/shared';\nimport { unsafeCoerce } from 'effect/Function';\n\nvar version$1 = \"7.2.0\";\n\nconst createDeferred = ()=>{\n    let resolve;\n    let reject;\n    const ac = new AbortController();\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise,\n        ac,\n        resolve,\n        reject\n    };\n};\n\nconst createAPIRequestUrl = (config)=>{\n    const url = new URL(config.url);\n    const queryParams = new URLSearchParams(url.search);\n    queryParams.set(\"actionType\", config.actionType);\n    queryParams.set(\"slug\", config.slug);\n    url.search = queryParams.toString();\n    return url;\n};\n/**\n * Creates a \"client\" for reporting events to the UploadThing server via the user's API endpoint.\n * Events are handled in \"./handler.ts starting at L112\"\n */ const createUTReporter = (cfg)=>(type, payload)=>Micro.gen(function*() {\n            const url = createAPIRequestUrl({\n                url: cfg.url,\n                slug: cfg.endpoint,\n                actionType: type\n            });\n            const headers = new Headers((yield* Micro.promise(async ()=>typeof cfg.headers === \"function\" ? await cfg.headers() : cfg.headers)));\n            headers.set(\"x-uploadthing-package\", cfg.package);\n            headers.set(\"x-uploadthing-version\", version$1);\n            headers.set(\"Content-Type\", \"application/json\");\n            const response = yield* fetchEff(url, {\n                method: \"POST\",\n                body: JSON.stringify(payload),\n                headers\n            }).pipe(Micro.andThen(parseResponseJson), /**\n         * We don't _need_ to validate the response here, just cast it for now.\n         * As of now, @effect/schema includes quite a few bytes we cut out by this...\n         * We have \"strong typing\" on the backend that ensures the shape should match.\n         */ Micro.map(unsafeCoerce), Micro.catchTag(\"FetchError\", (e)=>Micro.fail(new UploadThingError({\n                    code: \"INTERNAL_CLIENT_ERROR\",\n                    message: `Failed to report event \"${type}\" to UploadThing server`,\n                    cause: e\n                }))), Micro.catchTag(\"BadRequestError\", (e)=>Micro.fail(new UploadThingError({\n                    code: getErrorTypeFromStatusCode(e.status),\n                    message: e.getMessage(),\n                    cause: e.json\n                }))), Micro.catchTag(\"InvalidJson\", (e)=>Micro.fail(new UploadThingError({\n                    code: \"INTERNAL_CLIENT_ERROR\",\n                    message: \"Failed to parse response from UploadThing server\",\n                    cause: e\n                }))));\n            return response;\n        });\n\nconst uploadWithProgress = (file, rangeStart, presigned, onUploadProgress)=>Micro.async((resume)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", presigned.url, true);\n        xhr.setRequestHeader(\"Range\", `bytes=${rangeStart}-`);\n        xhr.setRequestHeader(\"x-uploadthing-version\", version$1);\n        xhr.responseType = \"json\";\n        let previousLoaded = 0;\n        xhr.upload.addEventListener(\"progress\", ({ loaded })=>{\n            const delta = loaded - previousLoaded;\n            onUploadProgress?.({\n                loaded,\n                delta\n            });\n            previousLoaded = loaded;\n        });\n        xhr.addEventListener(\"load\", ()=>{\n            resume(xhr.status >= 200 && xhr.status < 300 ? Micro.succeed(xhr.response) : Micro.die(`XHR failed ${xhr.status} ${xhr.statusText} - ${JSON.stringify(xhr.response)}`));\n        });\n        // Is there a case when the client would throw and\n        // ingest server not knowing about it? idts?\n        xhr.addEventListener(\"error\", ()=>{\n            resume(new UploadThingError({\n                code: \"UPLOAD_FAILED\"\n            }));\n        });\n        const formData = new FormData();\n        formData.append(\"file\", file.slice(rangeStart));\n        xhr.send(formData);\n        return Micro.sync(()=>xhr.abort());\n    });\nconst uploadFile = (file, presigned, opts)=>fetchEff(presigned.url, {\n        method: \"HEAD\"\n    }).pipe(Micro.map(({ headers })=>parseInt(headers.get(\"x-ut-range-start\") ?? \"0\", 10)), Micro.tap((start)=>opts.onUploadProgress?.({\n            delta: start,\n            loaded: start\n        })), Micro.flatMap((start)=>uploadWithProgress(file, start, presigned, (progressEvent)=>opts.onUploadProgress?.({\n                delta: progressEvent.delta,\n                loaded: progressEvent.loaded + start\n            }))), Micro.map(unsafeCoerce), Micro.map((uploadResponse)=>({\n            name: file.name,\n            size: file.size,\n            key: presigned.key,\n            lastModified: file.lastModified,\n            serverData: uploadResponse.serverData,\n            url: uploadResponse.url,\n            appUrl: uploadResponse.appUrl,\n            customId: presigned.customId,\n            type: file.type,\n            fileHash: uploadResponse.fileHash\n        })));\nconst uploadFilesInternal = (endpoint, opts)=>{\n    // classic service right here\n    const reportEventToUT = createUTReporter({\n        endpoint: String(endpoint),\n        package: opts.package,\n        url: opts.url,\n        headers: opts.headers\n    });\n    const totalSize = opts.files.reduce((acc, f)=>acc + f.size, 0);\n    let totalLoaded = 0;\n    return reportEventToUT(\"upload\", {\n        input: \"input\" in opts ? opts.input : null,\n        files: opts.files.map((f)=>({\n                name: f.name,\n                size: f.size,\n                type: f.type,\n                lastModified: f.lastModified\n            }))\n    }).pipe(Micro.flatMap((presigneds)=>Micro.forEach(presigneds, (presigned, i)=>Micro.flatMap(Micro.sync(()=>opts.onUploadBegin?.({\n                    file: opts.files[i].name\n                })), ()=>uploadFile(opts.files[i], presigned, {\n                    onUploadProgress: (ev)=>{\n                        totalLoaded += ev.delta;\n                        opts.onUploadProgress?.({\n                            file: opts.files[i],\n                            progress: Math.round(ev.loaded / opts.files[i].size * 100),\n                            loaded: ev.loaded,\n                            delta: ev.delta,\n                            totalLoaded,\n                            totalProgress: Math.round(totalLoaded / totalSize * 100)\n                        });\n                    }\n                })), {\n            concurrency: 6\n        })), Micro.provideService(FetchContext, window.fetch));\n};\n\nconst version = version$1;\n/**\n * Validate that a file is of a valid type given a route config\n * @public\n */ const isValidFileType = (file, routeConfig)=>Micro.runSync(matchFileType(file, objectKeys(routeConfig)).pipe(Micro.map((type)=>file.type.includes(type)), Micro.orElseSucceed(()=>false)));\n/**\n * Validate that a file is of a valid size given a route config\n * @public\n */ const isValidFileSize = (file, routeConfig)=>Micro.runSync(matchFileType(file, objectKeys(routeConfig)).pipe(Micro.flatMap((type)=>fileSizeToBytes(routeConfig[type].maxFileSize)), Micro.map((maxFileSize)=>file.size <= maxFileSize), Micro.orElseSucceed(()=>false)));\n/**\n * Generate a typed uploader for a given FileRouter\n * @public\n */ const genUploader = (initOpts)=>{\n    const routeRegistry = createIdentityProxy();\n    const controllableUpload = async (slug, opts)=>{\n        const uploads = new Map();\n        const endpoint = typeof slug === \"function\" ? slug(routeRegistry) : slug;\n        const utReporter = createUTReporter({\n            endpoint: String(endpoint),\n            package: initOpts.package,\n            url: resolveMaybeUrlArg(initOpts?.url),\n            headers: opts.headers\n        });\n        const presigneds = await Micro.runPromise(utReporter(\"upload\", {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            input: \"input\" in opts ? opts.input : null,\n            files: opts.files.map((f)=>({\n                    name: f.name,\n                    size: f.size,\n                    type: f.type,\n                    lastModified: f.lastModified\n                }))\n        }).pipe(Micro.provideService(FetchContext, window.fetch)));\n        const totalSize = opts.files.reduce((acc, f)=>acc + f.size, 0);\n        let totalLoaded = 0;\n        const uploadEffect = (file, presigned)=>uploadFile(file, presigned, {\n                onUploadProgress: (progressEvent)=>{\n                    totalLoaded += progressEvent.delta;\n                    opts.onUploadProgress?.({\n                        ...progressEvent,\n                        file,\n                        progress: Math.round(progressEvent.loaded / file.size * 100),\n                        totalLoaded,\n                        totalProgress: Math.round(totalLoaded / totalSize * 100)\n                    });\n                }\n            }).pipe(Micro.provideService(FetchContext, window.fetch));\n        for (const [i, p] of presigneds.entries()){\n            const file = opts.files[i];\n            const deferred = createDeferred();\n            uploads.set(file, {\n                deferred,\n                presigned: p\n            });\n            void Micro.runPromiseExit(uploadEffect(file, p), {\n                signal: deferred.ac.signal\n            }).then((result)=>{\n                if (result._tag === \"Right\") {\n                    return deferred.resolve(result.right);\n                } else if (result.left._tag === \"Interrupt\") {\n                    throw new UploadPausedError();\n                }\n                throw Micro.causeSquash(result.left);\n            }).catch((err)=>{\n                if (err instanceof UploadPausedError) return;\n                deferred.reject(err);\n            });\n        }\n        /**\n     * Pause an ongoing upload\n     * @param file The file upload you want to pause. Can be omitted to pause all files\n     */ const pauseUpload = (file)=>{\n            const files = Arr.ensure(file ?? opts.files);\n            for (const file of files){\n                const upload = uploads.get(file);\n                if (!upload) return;\n                if (upload.deferred.ac.signal.aborted) {\n                    // Cancel the upload if it's already been paused\n                    throw new UploadAbortedError();\n                }\n                upload.deferred.ac.abort();\n            }\n        };\n        /**\n     * Resume a paused upload\n     * @param file The file upload you want to resume. Can be omitted to resume all files\n     */ const resumeUpload = (file)=>{\n            const files = Arr.ensure(file ?? opts.files);\n            for (const file of files){\n                const upload = uploads.get(file);\n                if (!upload) throw \"No upload found\";\n                upload.deferred.ac = new AbortController();\n                void Micro.runPromiseExit(uploadEffect(file, upload.presigned), {\n                    signal: upload.deferred.ac.signal\n                }).then((result)=>{\n                    if (result._tag === \"Right\") {\n                        return upload.deferred.resolve(result.right);\n                    } else if (result.left._tag === \"Interrupt\") {\n                        throw new UploadPausedError();\n                    }\n                    throw Micro.causeSquash(result.left);\n                }).catch((err)=>{\n                    if (err instanceof UploadPausedError) return;\n                    upload.deferred.reject(err);\n                });\n            }\n        };\n        /**\n     * Wait for an upload to complete\n     * @param file The file upload you want to wait for. Can be omitted to wait for all files\n     */ const done = async (file)=>{\n            const promises = [];\n            const files = Arr.ensure(file ?? opts.files);\n            for (const file of files){\n                const upload = uploads.get(file);\n                if (!upload) throw \"No upload found\";\n                promises.push(upload.deferred.promise);\n            }\n            const results = await Promise.all(promises);\n            return file ? results[0] : results;\n        };\n        return {\n            pauseUpload,\n            resumeUpload,\n            done\n        };\n    };\n    /**\n   * One step upload function that both requests presigned URLs\n   * and then uploads the files to UploadThing\n   */ const typedUploadFiles = (slug, opts)=>{\n        const endpoint = typeof slug === \"function\" ? slug(routeRegistry) : slug;\n        return uploadFilesInternal(endpoint, {\n            ...opts,\n            skipPolling: {},\n            url: resolveMaybeUrlArg(initOpts?.url),\n            package: initOpts.package,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            input: opts.input\n        }).pipe((effect)=>Micro.runPromiseExit(effect, opts.signal && {\n                signal: opts.signal\n            })).then((exit)=>{\n            if (exit._tag === \"Right\") {\n                return exit.right;\n            } else if (exit.left._tag === \"Interrupt\") {\n                throw new UploadAbortedError();\n            }\n            throw Micro.causeSquash(exit.left);\n        });\n    };\n    return {\n        uploadFiles: typedUploadFiles,\n        createUpload: controllableUpload,\n        /**\n     * Identity object that can be used instead of raw strings\n     * that allows \"Go to definition\" in your IDE to bring you\n     * to the backend definition of a route.\n     */ routeRegistry\n    };\n};\n\nexport { genUploader, isValidFileSize, isValidFileType, version };\n","import { genUploader } from \"uploadthing/client\";\r\n\r\nconst { uploadFiles } = genUploader({\r\n    url: 'http://localhost:8081/api/uploadthing'\r\n});\r\n/** @type (s: string, context: Document | HTMLElement) => Element | null */\r\nconst $ = (s, context = document) => context.querySelector(s);\r\n\r\n$('#file-upload').addEventListener('submit', async (ev) => {\r\n    ev.preventDefault();\r\n    /** @type HTMLInputElement */\r\n    const fileInput = $('#files');\r\n\r\n    console.log('Sending %d files...', fileInput.files.length);\r\n    const response = await uploadFiles(\"imageUploader\", {\r\n        files: Array.from(fileInput.files)\r\n    });\r\n    console.log('Sent.');\r\n    console.dir(response);\r\n})"],"names":["isStrictEquivalent","x","y","arity","body","arguments","self","RangeError","a","b","c","d","e","args","globalStoreId","Symbol","globalThis","Map","globalStore","globalValue","id","compute","isString","input","isNumber","isRecordOrArray","property","isTagged","tag","isRecord","Array","getBugErrorMessage","message","GenKindTypeId","SingleShotGen","YieldWrapTypeId","YieldWrap","value","structuralRegionState","undefined","randomHashCache","WeakMap","String","Date","isHash","random","Error","Math","Number","optimize","n","u","Infinity","h","str","i","structureKeys","o","keys","ab","bc","cd","de","ef","fg","gh","hi","ret","structure","Object","cached","hash","equals","compareBoth","that","selfType","isEqual","v","keysSelf","keysThat","key","NodeInspectSymbol","toJSON","redact","format","JSON","toStringUnknown","whitespace","stringifyCircular","_","obj","cache","retVal","_key","redactableState","isRedactable","symbolRedactable","pipeArguments","len","EffectTypeId","StreamTypeId","SinkTypeId","ChannelTypeId","effectVariance","EffectPrototype","StructuralPrototype","selfKeys","thatKeys","CommitPrototype","TypeId","CommonProto","SomeProto","isOption","isSome","NoneHash","NoneProto","isNone","fa","none","RightProto","isEither","isRight","LeftProto","isLeft","ma","left","right","constEmptyIterator","compare","f","out","collection","ensure","isEquivalent","dual","TagTypeId","STMTypeId","TagProto","ContextProto","isContext","k","makeContext","unsafeMap","context","serviceNotFoundError","error","lines","afterAt","_empty","service","add","map","limit","creationError","TagClass","runSymbol","isMicro","MicroProto","MicroBase","Base","env","onExit","MicroCauseTypeId","microCauseVariance","MicroCauseImpl","_tag","originalError","traces","name","stack","causeName","messageLines","FailImpl","causeFail","DieImpl","defect","causeDie","InterruptImpl","causeInterrupt","causeIsFail","causeSquash","causeWithTrace","trace","exitInterrupt","exitFail","exitDie","EnvProto","envMake","refs","envGet","ref","envSet","envMutate","exitSucceed","currentContext","getEnvRef","envRef","provideService","nextEnv","setImmediate","setTimeout","MicroSchedulerDefault","task","_priority","tasks","_env","EnvRefTypeId","EnvRefProto","envRefMake","initial","currentAbortController","currentAbortSignal","currentConcurrency","currentMaxDepthBeforeYield","currentInterruptible","currentScheduler","microDepthState","run","unsafeMakeOptions","checkAbort","execute","scheduler","err","fromExit","succeed","failCause","cause","exitFailCause","sync","evaluate","suspend","register","cleanup","resumed","controller","AbortController","signal","onAbort","resume","uninterruptible","effect","options","tryPromise","iterator","running","shouldContinue","result","yieldWrapGet","exit","selfExit","tapExit","forkSignal","parentSignal","filterOrFail","refinement","orFailWith","catchCauseIf","predicate","tapErrorCauseIf","tapError","fail","catchIf","catchTag","withTrace","prevLimit","generate","line","lineMatch","MicroScopeTypeId","MicroScopeImpl","Set","finalizer","microExit","finalizers","exits","Either","newScope","fin","interruptible","isInterruptible","newEnv","iterable","concurrencyOption","concurrency","envWithSignal","items","length","index","inProgress","doneCount","pumping","pump","currentIndex","item","HandleTypeId","HandleImpl","observer","runFork","handle","runPromiseExit","Promise","resolve","_reject","runPromise","runSyncExit","runSync","YieldableError","TaggedError","InvalidURLError","attemptedUrl","FetchError","InvalidJsonError","BadRequestError","UploadPausedError","UploadAbortedError","getFullApiUrl","maybeUrl","base","window","process","url","URL","resolveMaybeUrlArg","noop","ERROR_CODES","UploadThingError","initOpts","opts","messageFromUnknown","fallback","FetchContext","fetchEff","init","fetch","headers","Headers","reqInfo","console","res","parseResponseJson","json","ok","status","TextEncoder","isDefined","version$1","createDeferred","reject","ac","promise","rej","createAPIRequestUrl","config","queryParams","URLSearchParams","createUTReporter","cfg","type","payload","getErrorTypeFromStatusCode","statusCode","code","uploadWithProgress","file","rangeStart","presigned","onUploadProgress","xhr","XMLHttpRequest","previousLoaded","loaded","delta","formData","FormData","uploadFile","parseInt","start","progressEvent","uploadResponse","uploadFilesInternal","endpoint","reportEventToUT","totalSize","acc","totalLoaded","presigneds","ev","uploadFiles","genUploader","routeRegistry","Proxy","prop","controllableUpload","slug","uploads","utReporter","uploadEffect","p","deferred","pauseUpload","upload","resumeUpload","done","promises","results","$","s","document","fileInput","response"],"mappings":"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"}